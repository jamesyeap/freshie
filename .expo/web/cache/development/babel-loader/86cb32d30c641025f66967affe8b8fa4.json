{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/connectionStatusBar/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { NetInfoPackage as NetInfo } from \"../../optionalDependencies\";\nimport { Constants } from \"../../helpers\";\nimport { PureBaseComponent } from \"../../commons\";\nimport { Colors, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport View from \"../view\";\n\nvar ConnectionStatusBar = function (_PureBaseComponent) {\n  _inherits(ConnectionStatusBar, _PureBaseComponent);\n\n  var _super = _createSuper(ConnectionStatusBar);\n\n  function ConnectionStatusBar(props) {\n    var _this;\n\n    _classCallCheck(this, ConnectionStatusBar);\n\n    _this = _super.call(this, props);\n    _this.onConnectionChange = _this.onConnectionChange.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isConnected: true,\n      isCancelled: false\n    };\n\n    if (NetInfo) {\n      _this.getInitialConnectionState();\n    } else {\n      console.error(\"RNUILib ConnectionStatusBar component requires installing \\\"@react-native-community/netinfo\\\" dependency\");\n    }\n\n    return _this;\n  }\n\n  _createClass(ConnectionStatusBar, [{\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = NetInfo == null ? void 0 : NetInfo.addEventListener(this.onConnectionChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.unsubscribe) {\n        this.unsubscribe();\n      }\n    }\n  }, {\n    key: \"onConnectionChange\",\n    value: function onConnectionChange(state) {\n      var _this2 = this;\n\n      var isConnected = this.isStateConnected(state);\n\n      if (isConnected !== this.state.isConnected) {\n        this.setState({\n          isConnected: isConnected,\n          isCancelled: false\n        });\n\n        if (this.props.onConnectionChange) {\n          this.props.onConnectionChange(isConnected, false);\n        }\n\n        if (!isConnected) {\n          setTimeout(function () {\n            _this2.getInitialConnectionState();\n          }, 3000);\n        }\n\n        if (!isConnected && _.isFunction(ConnectionStatusBar.onConnectionLost)) {\n          ConnectionStatusBar.onConnectionLost();\n        }\n      }\n    }\n  }, {\n    key: \"getInitialConnectionState\",\n    value: function getInitialConnectionState() {\n      var isConnected;\n      return _regeneratorRuntime.async(function getInitialConnectionState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(NetInfo == null ? void 0 : NetInfo.fetch());\n\n            case 2:\n              isConnected = _context.sent.isConnected;\n              this.setState({\n                isConnected: isConnected\n              });\n\n              if (this.props.onConnectionChange) {\n                this.props.onConnectionChange(isConnected, true);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isStateConnected\",\n    value: function isStateConnected(state) {\n      var lowerCaseState = _.lowerCase(state.type);\n\n      var isConnected = lowerCaseState !== 'none';\n      return isConnected;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.isConnected || this.state.isCancelled) {\n        return false;\n      }\n\n      var containerStyle = [this.styles.topContainer, this.props.useAbsolutePosition ? this.styles.absolutePosition : null];\n      return React.createElement(View, {\n        useSafeArea: true,\n        style: containerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: this.styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: this.styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, this.props.label), this.props.allowDismiss && React.createElement(TouchableOpacity, {\n        style: this.styles.xContainer,\n        onPress: function onPress() {\n          return _this3.setState({\n            isCancelled: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: this.styles.x,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, \"\\u2715\")))));\n    }\n  }], [{\n    key: \"registerGlobalOnConnectionLost\",\n    value: function registerGlobalOnConnectionLost(callback) {\n      ConnectionStatusBar.onConnectionLost = callback;\n    }\n  }, {\n    key: \"unregisterGlobalOnConnectionLost\",\n    value: function unregisterGlobalOnConnectionLost() {\n      delete ConnectionStatusBar.onConnectionLost;\n    }\n  }]);\n\n  return ConnectionStatusBar;\n}(PureBaseComponent);\n\nConnectionStatusBar.displayName = 'ConnectionStatusBar';\nConnectionStatusBar.propTypes = {\n  label: PropTypes.string,\n  onConnectionChange: PropTypes.func,\n  allowDismiss: PropTypes.bool,\n  useAbsolutePosition: PropTypes.bool\n};\nConnectionStatusBar.defaultProps = {\n  label: 'No internet. Check your connection.',\n  allowDismiss: false,\n  useAbsolutePosition: true\n};\nexport { ConnectionStatusBar as default };\n\nfunction createStyles() {\n  var typography = Constants.isSmallScreen ? Typography.text90 : Typography.text80;\n  return StyleSheet.create({\n    topContainer: {\n      backgroundColor: Colors.dark30\n    },\n    absolutePosition: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n      bottom: undefined\n    }),\n    container: {\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    text: _objectSpread(_objectSpread({\n      flex: 1\n    }, typography), {}, {\n      textAlign: 'center',\n      color: Colors.dark60,\n      marginTop: 8,\n      marginBottom: 8,\n      alignSelf: 'center'\n    }),\n    xContainer: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      alignSelf: 'center'\n    },\n    x: {\n      fontSize: Typography.text80.fontSize,\n      color: Colors.black\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/connectionStatusBar/index.js"],"names":["React","PropTypes","_","NetInfoPackage","NetInfo","Constants","PureBaseComponent","Colors","Typography","TouchableOpacity","View","ConnectionStatusBar","props","onConnectionChange","bind","state","isConnected","isCancelled","getInitialConnectionState","console","error","styles","createStyles","unsubscribe","addEventListener","isStateConnected","setState","setTimeout","isFunction","onConnectionLost","fetch","lowerCaseState","lowerCase","type","containerStyle","topContainer","useAbsolutePosition","absolutePosition","container","flex","flexDirection","text","label","allowDismiss","xContainer","x","callback","displayName","propTypes","string","func","bool","defaultProps","typography","isSmallScreen","text90","text80","StyleSheet","create","backgroundColor","dark30","absoluteFillObject","bottom","undefined","justifyContent","textAlign","color","dark60","marginTop","marginBottom","alignSelf","paddingLeft","paddingRight","fontSize","black"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {StyleSheet, Text} from 'react-native';\nimport {NetInfoPackage as NetInfo} from '../../optionalDependencies';\nimport {Constants} from '../../helpers';\nimport {PureBaseComponent} from '../../commons';\nimport {Colors, Typography} from '../../style';\nimport TouchableOpacity from '../touchableOpacity';\nimport View from '../view';\n\n/**\n * @description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n * @image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.js\n * @notes: The component requires installing the '@react-native-community/netinfo' native library\n */\nexport default class ConnectionStatusBar extends PureBaseComponent {\n  static displayName = 'ConnectionStatusBar';\n  static propTypes = {\n    /**\n     * Text to show as the status\n     */\n    label: PropTypes.string,\n    /**\n     * Handler to get connection change events propagation\n     */\n    onConnectionChange: PropTypes.func,\n    /**\n     * Text to show as the status\n     */\n    allowDismiss: PropTypes.bool,\n\n    /**\n     * Use absolute position for the component\n     */\n    useAbsolutePosition: PropTypes.bool\n  };\n\n  static defaultProps = {\n    label: 'No internet. Check your connection.',\n    allowDismiss: false,\n    useAbsolutePosition: true\n  };\n\n  static onConnectionLost;\n  static registerGlobalOnConnectionLost(callback) {\n    ConnectionStatusBar.onConnectionLost = callback;\n  }\n\n  static unregisterGlobalOnConnectionLost() {\n    delete ConnectionStatusBar.onConnectionLost;\n  }\n\n  constructor(props) {\n    super(props);\n    this.onConnectionChange = this.onConnectionChange.bind(this);\n\n    this.state = {\n      isConnected: true,\n      isCancelled: false\n    };\n    \n    if (NetInfo) {\n      this.getInitialConnectionState();\n    } else {\n      console.error(`RNUILib ConnectionStatusBar component requires installing \"@react-native-community/netinfo\" dependency`);\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles();\n  }\n\n  componentDidMount() {\n    this.unsubscribe = NetInfo?.addEventListener(this.onConnectionChange);\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  onConnectionChange(state) {\n    const isConnected = this.isStateConnected(state);\n    if (isConnected !== this.state.isConnected) {\n      this.setState({\n        isConnected,\n        isCancelled: false\n      });\n      if (this.props.onConnectionChange) {\n        this.props.onConnectionChange(isConnected, false);\n      }\n\n      if (!isConnected) {\n        setTimeout(() => {\n          this.getInitialConnectionState();\n        }, 3000);\n      }\n\n      if (!isConnected && _.isFunction(ConnectionStatusBar.onConnectionLost)) {\n        ConnectionStatusBar.onConnectionLost();\n      }\n    }\n  }\n\n  async getInitialConnectionState() {\n    const isConnected = (await NetInfo?.fetch()).isConnected;\n\n    this.setState({isConnected});\n    if (this.props.onConnectionChange) {\n      this.props.onConnectionChange(isConnected, true);\n    }\n  }\n\n  isStateConnected(state) {\n    const lowerCaseState = _.lowerCase(state.type);\n    const isConnected = lowerCaseState !== 'none';\n    return isConnected;\n  }\n\n  render() {\n    if (this.state.isConnected || this.state.isCancelled) {\n      return false;\n    }\n    const containerStyle = [\n      this.styles.topContainer,\n      this.props.useAbsolutePosition ? this.styles.absolutePosition : null\n    ];\n    return (\n      <View useSafeArea style={containerStyle}>\n        <View style={this.styles.container}>\n          <View style={{flex: 1, flexDirection: 'row'}}>\n            <Text style={this.styles.text}>{this.props.label}</Text>\n            {this.props.allowDismiss && (\n              <TouchableOpacity style={this.styles.xContainer} onPress={() => this.setState({isCancelled: true})}>\n                <Text style={this.styles.x}>✕</Text>\n              </TouchableOpacity>\n            )}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nfunction createStyles() {\n  const typography = Constants.isSmallScreen ? Typography.text90 : Typography.text80;\n  return StyleSheet.create({\n    topContainer: {\n      backgroundColor: Colors.dark30\n    },\n    absolutePosition: {\n      ...StyleSheet.absoluteFillObject,\n      bottom: undefined\n    },\n    container: {\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    text: {\n      flex: 1,\n      ...typography,\n      textAlign: 'center',\n      color: Colors.dark60,\n      marginTop: 8,\n      marginBottom: 8,\n      alignSelf: 'center'\n    },\n    xContainer: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      alignSelf: 'center'\n    },\n    x: {\n      fontSize: Typography.text80.fontSize,\n      color: Colors.black\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}