{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TabController/TabBarItem.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Reanimated from 'react-native-reanimated';\nimport { State } from 'react-native-gesture-handler';\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport Badge from \"../../components/badge\";\nimport TouchableOpacity from \"../TouchableOpacity\";\nvar cond = Reanimated.cond,\n    eq = Reanimated.eq,\n    call = Reanimated.call,\n    block = Reanimated.block,\n    event = Reanimated.event,\n    and = Reanimated.and,\n    defined = Reanimated.defined;\nvar DEFAULT_LABEL_COLOR = Colors.black;\nvar DEFAULT_SELECTED_LABEL_COLOR = Colors.blue30;\n\nvar TabBarItem = function (_PureComponent) {\n  _inherits(TabBarItem, _PureComponent);\n\n  var _super = _createSuper(TabBarItem);\n\n  function TabBarItem() {\n    var _this;\n\n    _classCallCheck(this, TabBarItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      itemWidth: undefined\n    };\n    _this.onStateChange = event([{\n      nativeEvent: {\n        state: _this.props.state\n      }\n    }], {\n      useNativeDriver: true\n    });\n\n    _this.onLayout = function (_ref) {\n      var width = _ref.nativeEvent.layout.width;\n      var _this$props = _this.props,\n          index = _this$props.index,\n          onLayout = _this$props.onLayout;\n      var itemWidth = _this.state.itemWidth;\n\n      if (!itemWidth) {\n        _this.setState({\n          itemWidth: width\n        });\n\n        onLayout(width, index);\n      }\n    };\n\n    _this.onPress = function () {\n      var _this$props2 = _this.props,\n          index = _this$props2.index,\n          onPress = _this$props2.onPress;\n      onPress(index);\n    };\n\n    return _this;\n  }\n\n  _createClass(TabBarItem, [{\n    key: \"getItemStyle\",\n    value: function getItemStyle() {\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          width = _this$props3.width;\n      var itemWidth = this.state.itemWidth;\n      var opacity = block([cond(eq(state, State.END), call([], this.onPress)), cond(eq(state, State.BEGAN), this.props.activeOpacity, 1)]);\n      var style = {\n        opacity: opacity\n      };\n\n      if (width || itemWidth) {\n        style.flex = undefined;\n        style.width = width || itemWidth;\n        style.paddingHorizontal = undefined;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"getLabelStyle\",\n    value: function getLabelStyle() {\n      var itemWidth = this.state.itemWidth;\n      var _this$props4 = this.props,\n          index = _this$props4.index,\n          currentPage = _this$props4.currentPage,\n          labelColor = _this$props4.labelColor,\n          selectedLabelColor = _this$props4.selectedLabelColor,\n          labelStyle = _this$props4.labelStyle,\n          ignore = _this$props4.ignore;\n      var fontWeight = cond(and(eq(currentPage, index), defined(itemWidth)), '700', '400');\n      var activeColor = selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR;\n      var inactiveColor = labelColor || DEFAULT_LABEL_COLOR;\n      var color = cond(eq(currentPage, index), processColor(activeColor), processColor(ignore ? activeColor : inactiveColor));\n      return [{\n        fontWeight: fontWeight,\n        color: color\n      }, labelStyle];\n    }\n  }, {\n    key: \"getIconStyle\",\n    value: function getIconStyle() {\n      var _this$props5 = this.props,\n          index = _this$props5.index,\n          currentPage = _this$props5.currentPage,\n          iconColor = _this$props5.iconColor,\n          selectedIconColor = _this$props5.selectedIconColor,\n          labelColor = _this$props5.labelColor,\n          selectedLabelColor = _this$props5.selectedLabelColor,\n          ignore = _this$props5.ignore;\n      var activeColor = selectedIconColor || selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR;\n      var inactiveColor = iconColor || labelColor || DEFAULT_LABEL_COLOR;\n      var tintColor = cond(eq(currentPage, index), activeColor, ignore ? activeColor : inactiveColor);\n      return {\n        tintColor: tintColor\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          label = _this$props6.label,\n          icon = _this$props6.icon,\n          badge = _this$props6.badge,\n          state = _this$props6.state,\n          uppercase = _this$props6.uppercase,\n          activeOpacity = _this$props6.activeOpacity,\n          activeBackgroundColor = _this$props6.activeBackgroundColor,\n          testID = _this$props6.testID;\n      return React.createElement(TouchableOpacity, {\n        pressState: state,\n        style: [styles.tabItem, this.getItemStyle()],\n        onLayout: this.onLayout,\n        feedbackColor: activeBackgroundColor,\n        activeOpacity: activeOpacity,\n        onPress: this.onPress,\n        testID: testID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 7\n        }\n      }, icon && React.createElement(Reanimated.Image, {\n        source: icon,\n        style: [styles.tabItemIcon, this.getIconStyle()],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 18\n        }\n      }), !_.isEmpty(label) && React.createElement(Reanimated.Text, {\n        style: [styles.tabItemLabel, this.getLabelStyle()],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }\n      }, uppercase ? _.toUpper(label) : label), badge && React.createElement(Badge, _extends({\n        backgroundColor: Colors.red30,\n        size: 'default'\n      }, badge, {\n        containerStyle: styles.badge,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 19\n        }\n      })));\n    }\n  }]);\n\n  return TabBarItem;\n}(PureComponent);\n\nTabBarItem.displayName = 'IGNORE';\nTabBarItem.propTypes = {\n  label: PropTypes.string,\n  labelStyle: RNText.propTypes.style,\n  labelColor: PropTypes.string,\n  selectedLabelColor: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  iconColor: PropTypes.string,\n  selectedIconColor: PropTypes.string,\n  badge: PropTypes.shape(Badge.propTypes),\n  width: PropTypes.number,\n  ignore: PropTypes.bool,\n  onPress: PropTypes.func,\n  uppercase: PropTypes.bool,\n  activeOpacity: PropTypes.number,\n  activeBackgroundColor: PropTypes.string,\n  index: PropTypes.number,\n  state: PropTypes.object,\n  currentPage: PropTypes.object,\n  onLayout: PropTypes.func\n};\nTabBarItem.defaultProps = {\n  activeOpacity: 1,\n  onPress: _.noop\n};\nexport { TabBarItem as default };\nvar styles = StyleSheet.create({\n  tabItem: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: Spacings.s4\n  },\n  tabItemLabel: _objectSpread({}, Typography.text80),\n  tabItemIcon: {\n    marginRight: 10\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  }\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TabController/TabBarItem.js"],"names":["React","PureComponent","PropTypes","_","Reanimated","State","Colors","Typography","Spacings","Badge","TouchableOpacity","cond","eq","call","block","event","and","defined","DEFAULT_LABEL_COLOR","black","DEFAULT_SELECTED_LABEL_COLOR","blue30","TabBarItem","state","itemWidth","undefined","onStateChange","nativeEvent","props","useNativeDriver","onLayout","width","layout","index","setState","onPress","opacity","END","BEGAN","activeOpacity","style","flex","paddingHorizontal","currentPage","labelColor","selectedLabelColor","labelStyle","ignore","fontWeight","activeColor","inactiveColor","color","processColor","iconColor","selectedIconColor","tintColor","label","icon","badge","uppercase","activeBackgroundColor","testID","styles","tabItem","getItemStyle","tabItemIcon","getIconStyle","isEmpty","tabItemLabel","getLabelStyle","toUpper","red30","displayName","propTypes","string","RNText","oneOfType","object","number","shape","bool","func","defaultProps","noop","StyleSheet","create","flexDirection","alignItems","justifyContent","s4","text80","marginRight","marginLeft","s1"],"mappings":"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","sourcesContent":["// TODO: support commented props\nimport React, {PureComponent} from 'react';\nimport {StyleSheet, processColor, Text as RNText} from 'react-native';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Reanimated from 'react-native-reanimated';\nimport {State} from 'react-native-gesture-handler';\nimport {Colors, Typography, Spacings} from '../../style';\nimport Badge from '../../components/badge';\nimport TouchableOpacity from '../TouchableOpacity';\n\nconst {cond, eq, call, block, event, and, defined} = Reanimated;\n\nconst DEFAULT_LABEL_COLOR = Colors.black;\nconst DEFAULT_SELECTED_LABEL_COLOR = Colors.blue30;\n\n/**\n * @description: TabController's TabBarItem\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n * @notes: Must be rendered as a direct child of TabController.TabBar.\n */\nexport default class TabBarItem extends PureComponent {\n  static displayName = 'IGNORE';\n\n  static propTypes = {\n    /**\n     * label of the tab\n     */\n    label: PropTypes.string,\n    /**\n     * custom label style\n     */\n    labelStyle: RNText.propTypes.style,\n    /**\n     * the default label color\n     */\n    labelColor: PropTypes.string,\n    /**\n     * the selected label color\n     */\n    selectedLabelColor: PropTypes.string,\n    /**\n     * icon of the tab\n     */\n    icon: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * icon tint color\n     */\n    iconColor: PropTypes.string,\n    /**\n     * icon selected tint color\n     */\n    selectedIconColor: PropTypes.string,\n    /**\n     * Badge component props to display next the item label\n     */\n    badge: PropTypes.shape(Badge.propTypes),\n    // /**\n    //  * maximun number of lines the label can break\n    //  */\n    // maxLines: PropTypes.number,\n    // /**\n    //  * whether the tab will have a divider on its right\n    //  */\n    // showDivider: PropTypes.bool,\n    /**\n     * A fixed width for the item\n     */\n    width: PropTypes.number,\n    /**\n     * ignore of the tab\n     */\n    ignore: PropTypes.bool, // eslint-disable-line\n    /**\n     * callback for when pressing a tab\n     */\n    onPress: PropTypes.func,\n    /**\n     * whether to change the text to uppercase\n     */\n    uppercase: PropTypes.bool,\n    /**\n     * The active opacity when pressing a tab\n     */\n    activeOpacity: PropTypes.number,\n    /**\n     * TODO: rename to feedbackColor\n     * Apply background color on press for TouchableOpacity\n     */\n    activeBackgroundColor: PropTypes.string,\n\n    // INTERNAL PROPS\n    index: PropTypes.number,\n    state: PropTypes.object,\n    currentPage: PropTypes.object,\n    onLayout: PropTypes.func\n  };\n\n  static defaultProps = {\n    activeOpacity: 1,\n    onPress: _.noop\n  };\n\n  state = {\n    itemWidth: undefined\n  };\n\n  onStateChange = event([\n    {\n      nativeEvent: {state: this.props.state}\n    }\n  ],\n  {useNativeDriver: true});\n\n  onLayout = ({\n    nativeEvent: {\n      layout: {width}\n    }\n  }) => {\n    const {index, onLayout} = this.props;\n    const {itemWidth} = this.state;\n    if (!itemWidth) {\n      this.setState({itemWidth: width});\n      onLayout(width, index);\n    }\n  };\n\n  onPress = () => {\n    const {index, onPress} = this.props;\n    onPress(index);\n  };\n\n  getItemStyle() {\n    const {state, width} = this.props;\n    const {itemWidth} = this.state;\n    const opacity = block([\n      cond(eq(state, State.END), call([], this.onPress)),\n      cond(eq(state, State.BEGAN), this.props.activeOpacity, 1)\n    ]);\n\n    const style = {\n      opacity\n    };\n\n    if (width || itemWidth) {\n      style.flex = undefined;\n      style.width = width || itemWidth;\n      style.paddingHorizontal = undefined;\n    }\n\n    return style;\n  }\n\n  getLabelStyle() {\n    const {itemWidth} = this.state;\n    const {index, currentPage, labelColor, selectedLabelColor, labelStyle, ignore} = this.props;\n    const fontWeight = cond(and(eq(currentPage, index), defined(itemWidth)), '700', '400');\n    const activeColor = selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR;\n    const inactiveColor = labelColor || DEFAULT_LABEL_COLOR;\n    const color = cond(eq(currentPage, index),\n      processColor(activeColor),\n      processColor(ignore ? activeColor : inactiveColor));\n\n    return [\n      {\n        fontWeight,\n        color\n      },\n      labelStyle\n    ];\n  }\n\n  getIconStyle() {\n    const {index, currentPage, iconColor, selectedIconColor, labelColor, selectedLabelColor, ignore} = this.props;\n\n    const activeColor = selectedIconColor || selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR;\n    const inactiveColor = iconColor || labelColor || DEFAULT_LABEL_COLOR;\n\n    const tintColor = cond(eq(currentPage, index),\n      // TODO: using processColor here broke functionality,\n      // not using it seem to not be very performant\n      activeColor,\n      ignore ? activeColor : inactiveColor);\n\n    return {\n      tintColor\n    };\n  }\n\n  render() {\n    const {label, icon, badge, state, uppercase, activeOpacity, activeBackgroundColor, testID} = this.props;\n\n    return (\n      <TouchableOpacity\n        pressState={state}\n        style={[styles.tabItem, this.getItemStyle()]}\n        onLayout={this.onLayout}\n        feedbackColor={activeBackgroundColor}\n        activeOpacity={activeOpacity}\n        onPress={this.onPress}\n        testID={testID}\n      >\n        {icon && <Reanimated.Image source={icon} style={[styles.tabItemIcon, this.getIconStyle()]}/>}\n        {!_.isEmpty(label) && (\n          <Reanimated.Text style={[styles.tabItemLabel, this.getLabelStyle()]}>\n            {uppercase ? _.toUpper(label) : label}\n          </Reanimated.Text>\n        )}\n        {badge && <Badge backgroundColor={Colors.red30} size={'default'} {...badge} containerStyle={styles.badge}/>}\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  tabItem: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: Spacings.s4\n  },\n  tabItemLabel: {\n    ...Typography.text80\n  },\n  tabItemIcon: {\n    marginRight: 10\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  }\n});\n"]},"metadata":{},"sourceType":"module"}