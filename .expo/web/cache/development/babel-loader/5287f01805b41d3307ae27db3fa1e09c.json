{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nvar and = Animated.and,\n    add = Animated.add,\n    cond = Animated.cond,\n    eq = Animated.eq,\n    multiply = Animated.multiply,\n    sqrt = Animated.sqrt,\n    cos = Animated.cos,\n    sin = Animated.sin,\n    sub = Animated.sub,\n    lessThan = Animated.lessThan,\n    divide = Animated.divide,\n    greaterOrEq = Animated.greaterOrEq,\n    atan = Animated.atan,\n    pow = Animated.pow;\n\nvar exhaustiveCheck = function exhaustiveCheck(a) {\n  throw new Error(\"Unexhaustive handling for \" + a);\n};\n\nvar identityMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n\nvar translateXMatrix = function translateXMatrix(x) {\n  return [[1, 0, x], [0, 1, 0], [0, 0, 1]];\n};\n\nvar translateYMatrix = function translateYMatrix(y) {\n  return [[1, 0, 0], [0, 1, y], [0, 0, 1]];\n};\n\nvar scaleMatrix = function scaleMatrix(s) {\n  return [[s, 0, 0], [0, s, 0], [0, 0, 1]];\n};\n\nvar scaleXMatrix = function scaleXMatrix(s) {\n  return [[s, 0, 0], [0, 1, 0], [0, 0, 1]];\n};\n\nvar scaleYMatrix = function scaleYMatrix(s) {\n  return [[1, 0, 0], [0, s, 0], [0, 0, 1]];\n};\n\nvar rotateZMatrix = function rotateZMatrix(r) {\n  return [[cos(r), multiply(-1, sin(r)), 0], [sin(r), cos(r), 0], [0, 0, 1]];\n};\n\nvar multiplyRowByCol = function multiplyRowByCol(row, col) {\n  return add(multiply(row[0], col[0]), multiply(row[1], col[1]), multiply(row[2], col[2]));\n};\n\nvar multiply4 = function multiply4(m1, m2) {\n  var col0 = [m2[0][0], m2[1][0], m2[2][0]];\n  var col1 = [m2[0][1], m2[1][1], m2[2][1]];\n  var col2 = [m2[0][2], m2[1][2], m2[2][2]];\n  return [[multiplyRowByCol(m1[0], col0), multiplyRowByCol(m1[0], col1), multiplyRowByCol(m1[0], col2)], [multiplyRowByCol(m1[1], col0), multiplyRowByCol(m1[1], col1), multiplyRowByCol(m1[1], col2)], [multiplyRowByCol(m1[2], col0), multiplyRowByCol(m1[2], col1), multiplyRowByCol(m1[2], col2)]];\n};\n\nexport var accumulatedTransform = function accumulatedTransform(transforms) {\n  var matrix = transforms.reduce(function (acc, transform) {\n    var key = Object.keys(transform)[0];\n    var value = transform[key];\n\n    if (key === \"translateX\") {\n      return multiply4(acc, translateXMatrix(value));\n    }\n\n    if (key === \"translateY\") {\n      return multiply4(acc, translateYMatrix(value));\n    }\n\n    if (key === \"scale\") {\n      return multiply4(acc, scaleMatrix(value));\n    }\n\n    if (key === \"scaleX\") {\n      return multiply4(acc, scaleXMatrix(value));\n    }\n\n    if (key === \"scaleY\") {\n      return multiply4(acc, scaleYMatrix(value));\n    }\n\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply4(acc, rotateZMatrix(value));\n    }\n\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n  var row0x = matrix[0][0];\n  var row0y = matrix[1][0];\n  var row1x = matrix[0][1];\n  var row1y = matrix[1][1];\n  var translateX = matrix[0][2];\n  var translateY = matrix[1][2];\n  var scaleXAbs = sqrt(add(pow(row0x, 2), pow(row0y, 2)));\n  var scaleYAbs = sqrt(add(pow(row1x, 2), pow(row1y, 2)));\n  var determinant = sub(multiply(row0x, row1y), multiply(row0y, row1x));\n  var scaleX = multiply(cond(and(lessThan(determinant, 0), lessThan(row0x, row1y)), -1, 1), scaleXAbs);\n  var scaleY = multiply(cond(and(lessThan(determinant, 0), greaterOrEq(row0x, row1y)), -1, 1), scaleYAbs);\n  var row0y1 = divide(row0y, scaleX);\n  var row0x1 = divide(row0x, scaleX);\n  var rotateZ = atan(divide(row0y1, row0x1));\n  var scale = cond(eq(scaleX, scaleY), scaleX, 1);\n  return {\n    translateX: translateX,\n    translateY: translateY,\n    scaleX: scaleX,\n    scaleY: scaleY,\n    scale: scale,\n    rotateZ: rotateZ,\n    rotate: rotateZ\n  };\n};","map":{"version":3,"sources":["Matrix.ts"],"names":["and","add","cond","eq","multiply","sqrt","cos","sin","sub","lessThan","divide","greaterOrEq","atan","pow","Animated","exhaustiveCheck","identityMatrix","translateXMatrix","translateYMatrix","scaleMatrix","scaleXMatrix","scaleYMatrix","rotateZMatrix","multiplyRowByCol","row","col","multiply4","col0","m2","col1","col2","m1","accumulatedTransform","matrix","transforms","key","Object","value","transform","row0x","row0y","row1x","row1y","translateX","translateY","scaleXAbs","scaleYAbs","determinant","scaleX","scaleY","row0y1","row0x1","rotateZ","scale","rotate"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  and,\n  add,\n  cond,\n  eq,\n  multiply,\n  sqrt,\n  cos,\n  sin,\n  sub,\n  lessThan,\n  divide,\n  greaterOrEq,\n  atan,\n  pow,\n} = Animated;\n\ntype Column3 = readonly [\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>\n];\n\ntype Row3 = Column3;\ntype Matrix3 = readonly [Column3, Column3, Column3];\n\ntype TransformName =\n  | \"translateX\"\n  | \"translateY\"\n  | \"scale\"\n  | \"scaleX\"\n  | \"scaleY\"\n  | \"rotateZ\"\n  | \"rotate\";\ntype Transformations = { [Name in TransformName]: Animated.Adaptable<number> };\nexport type Transforms = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"rotateZ\">\n  | Pick<Transformations, \"rotate\">\n)[];\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix3 = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateXMatrix = (x: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, x],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateYMatrix = (y: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, 1, y],\n  [0, 0, 1],\n];\n\nconst scaleMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst scaleXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst scaleYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\n/*\nconst rotateXMatrix = (r: Animated.Adaptable<number>): Matrix4 => [\n  [1, 0, 0, 0],\n  [0, cos(r), multiply(-1, sin(r)), 0],\n  [0, sin(r), cos(r), 0],\n  [0, 0, 0, 1],\n];\n\nconst rotateYMatrix = (r: Animated.Adaptable<number>): Matrix4 => [\n  [cos(r), 0, sin(r), 0],\n  [0, 1, 0, 0],\n  [multiply(-1, sin(r)), 0, cos(r), 0],\n  [0, 0, 0, 1],\n];\n*/\n\nconst rotateZMatrix = (r: Animated.Adaptable<number>): Matrix3 => [\n  [cos(r), multiply(-1, sin(r)), 0],\n  [sin(r), cos(r), 0],\n  [0, 0, 1],\n];\n\nconst multiplyRowByCol = (row: Row3, col: Column3) => {\n  return add(\n    multiply(row[0], col[0]),\n    multiply(row[1], col[1]),\n    multiply(row[2], col[2])\n  );\n};\n\nconst multiply4 = (m1: Matrix3, m2: Matrix3) => {\n  const col0 = [m2[0][0], m2[1][0], m2[2][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2]] as const;\n  return [\n    [\n      multiplyRowByCol(m1[0], col0),\n      multiplyRowByCol(m1[0], col1),\n      multiplyRowByCol(m1[0], col2),\n    ],\n    [\n      multiplyRowByCol(m1[1], col0),\n      multiplyRowByCol(m1[1], col1),\n      multiplyRowByCol(m1[1], col2),\n    ],\n    [\n      multiplyRowByCol(m1[2], col0),\n      multiplyRowByCol(m1[2], col1),\n      multiplyRowByCol(m1[2], col2),\n    ],\n  ] as const;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const accumulatedTransform = (transforms: Transforms) => {\n  const matrix = transforms.reduce((acc, transform) => {\n    const key = Object.keys(transform)[0] as TransformName;\n    const value = (transform as Pick<Transformations, typeof key>)[key];\n    if (key === \"translateX\") {\n      return multiply4(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply4(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply4(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply4(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply4(acc, scaleYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply4(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n  // https://www.w3.org/TR/css-transforms-1/#decomposing-a-2d-matrix\n  const row0x = matrix[0][0];\n  const row0y = matrix[1][0];\n  const row1x = matrix[0][1];\n  const row1y = matrix[1][1];\n  const translateX = matrix[0][2] as Animated.Node<number>;\n  const translateY = matrix[1][2] as Animated.Node<number>;\n  const scaleXAbs = sqrt(add(pow(row0x, 2), pow(row0y, 2)));\n  const scaleYAbs = sqrt(add(pow(row1x, 2), pow(row1y, 2)));\n  const determinant = sub(multiply(row0x, row1y), multiply(row0y, row1x));\n  const scaleX = multiply(\n    cond(and(lessThan(determinant, 0), lessThan(row0x, row1y)), -1, 1),\n    scaleXAbs\n  );\n  const scaleY = multiply(\n    cond(and(lessThan(determinant, 0), greaterOrEq(row0x, row1y)), -1, 1),\n    scaleYAbs\n  );\n  const row0y1 = divide(row0y, scaleX);\n  const row0x1 = divide(row0x, scaleX);\n  const rotateZ = atan(divide(row0y1, row0x1));\n  const scale = cond(eq(scaleX, scaleY), scaleX, 1);\n  return {\n    translateX,\n    translateY,\n    scaleX,\n    scaleY,\n    scale,\n    rotateZ,\n    rotate: rotateZ,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}