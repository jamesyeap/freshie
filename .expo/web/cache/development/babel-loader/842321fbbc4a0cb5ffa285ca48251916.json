{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/panningViews/panResponderView.js\";\nvar _excluded = [\"isAnimated\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport View from \"../view\";\nimport asPanViewConsumer from \"./asPanViewConsumer\";\n\nvar PanResponderView = function (_PureComponent) {\n  _inherits(PanResponderView, _PureComponent);\n\n  var _super = _createSuper(PanResponderView);\n\n  function PanResponderView() {\n    var _this;\n\n    _classCallCheck(this, PanResponderView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.initialLeft = 0;\n    _this.initialTop = 0;\n    _this.ref = React.createRef();\n    return _this;\n  }\n\n  _createClass(PanResponderView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setNativeProps(this.initialLeft, this.initialTop);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var ignorePanning = this.props.ignorePanning;\n      var _this$props$context = this.props.context,\n          isPanning = _this$props$context.isPanning,\n          dragDeltas = _this$props$context.dragDeltas;\n      var _prevProps$context = prevProps.context,\n          prevIsPanning = _prevProps$context.isPanning,\n          prevDragDeltas = _prevProps$context.dragDeltas;\n\n      if (!ignorePanning && !isPanning && prevIsPanning) {\n        this.onPanEnd();\n      }\n\n      if (!ignorePanning && isPanning && (dragDeltas.x || dragDeltas.y) && (dragDeltas.x !== prevDragDeltas.x || dragDeltas.y !== prevDragDeltas.y)) {\n        this.onDrag(dragDeltas);\n      }\n    }\n  }, {\n    key: \"onPanEnd\",\n    value: function onPanEnd() {\n      var location = {\n        left: this.left,\n        top: this.top\n      };\n      this.initialLeft = this.left || this.initialLeft;\n      this.initialTop = this.top || this.initialTop;\n\n      _.invoke(this.props, 'onPanLocationChanged', location);\n\n      _.invoke(this.props.context, 'onPanLocationChanged', location);\n    }\n  }, {\n    key: \"onDrag\",\n    value: function onDrag(deltas) {\n      var left = this.initialLeft + (deltas.x ? Math.round(deltas.x) : 0);\n      var top = this.initialTop + (deltas.y ? Math.round(deltas.y) : 0);\n      this.setNativeProps(left, top);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(left, top) {\n      if (this.ref.current) {\n        this.ref.current.setNativeProps({\n          style: {\n            left: left,\n            top: top\n          }\n        });\n        this.left = left;\n        this.top = top;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isAnimated = _this$props.isAnimated,\n          others = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(View, _extends({\n        animated: isAnimated,\n        ref: this.ref,\n        pointerEvents: 'box-none'\n      }, others, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 12\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return PanResponderView;\n}(PureComponent);\n\nPanResponderView.propTypes = {\n  onPanLocationChanged: _pt.func,\n  ignorePanning: _pt.bool,\n  isAnimated: _pt.bool,\n  context: _pt.shape({\n    isPanning: _pt.bool.isRequired\n  }).isRequired\n};\nPanResponderView.displayName = 'PanResponderView';\nPanResponderView.defaultProps = {\n  isAnimated: false\n};\nexport default asPanViewConsumer(PanResponderView);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/panningViews/panResponderView.js"],"names":["_pt","_","React","PureComponent","View","asPanViewConsumer","PanResponderView","initialLeft","initialTop","ref","createRef","setNativeProps","prevProps","ignorePanning","props","context","isPanning","dragDeltas","prevIsPanning","prevDragDeltas","onPanEnd","x","y","onDrag","location","left","top","invoke","deltas","Math","round","current","style","isAnimated","others","children","propTypes","onPanLocationChanged","func","bool","shape","isRequired","displayName","defaultProps"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport View from \"../view\";\nimport asPanViewConsumer from \"./asPanViewConsumer\";\n\n/**\n * @description: panResponderView component created to making listening to swipe and drag events easier.\n * @notes: Has to be used as a child of a PanningProvider that also has a PanListenerView.\n *         The PanListenerView is the one that sends the drag\\swipe events.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanResponderScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanResponderView/PanResponderView.gif?raw=true\n */\nclass PanResponderView extends PureComponent {\n  static propTypes = {\n    /**\n         * Will be called with the current location ({left, top}) when the pan has ended\n         */\n    onPanLocationChanged: _pt.func,\n\n    /**\n         * Ignore panning events while this is true\n         */\n    ignorePanning: _pt.bool,\n\n    /**\n         * Allow the view to be animated (send animation via style; default is false)\n         */\n    isAnimated: _pt.bool,\n    context: _pt.shape({\n      isPanning: _pt.bool.isRequired\n    }).isRequired\n  };\n  static displayName = 'PanResponderView';\n  static defaultProps = {\n    isAnimated: false\n  };\n  initialLeft = 0;\n  initialTop = 0;\n  ref = React.createRef();\n\n  componentDidMount() {\n    this.setNativeProps(this.initialLeft, this.initialTop);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      ignorePanning\n    } = this.props;\n    const {\n      isPanning,\n      dragDeltas\n    } = this.props.context;\n    const {\n      isPanning: prevIsPanning,\n      dragDeltas: prevDragDeltas\n    } = prevProps.context;\n\n    if (!ignorePanning && !isPanning && prevIsPanning) {\n      this.onPanEnd();\n    }\n\n    if (!ignorePanning && isPanning && (dragDeltas.x || dragDeltas.y) && (dragDeltas.x !== prevDragDeltas.x || dragDeltas.y !== prevDragDeltas.y)) {\n      this.onDrag(dragDeltas);\n    }\n  }\n\n  onPanEnd() {\n    const location = {\n      left: this.left,\n      top: this.top\n    };\n    this.initialLeft = this.left || this.initialLeft;\n    this.initialTop = this.top || this.initialTop;\n\n    _.invoke(this.props, 'onPanLocationChanged', location);\n\n    _.invoke(this.props.context, 'onPanLocationChanged', location);\n  }\n\n  onDrag(deltas) {\n    const left = this.initialLeft + (deltas.x ? Math.round(deltas.x) : 0);\n    const top = this.initialTop + (deltas.y ? Math.round(deltas.y) : 0);\n    this.setNativeProps(left, top);\n  }\n\n  setNativeProps(left, top) {\n    if (this.ref.current) {\n      this.ref.current.setNativeProps({\n        style: {\n          left,\n          top\n        }\n      });\n      this.left = left;\n      this.top = top;\n    }\n  }\n\n  render() {\n    const {\n      isAnimated,\n      ...others\n    } = this.props;\n    return <View animated={isAnimated} ref={this.ref} pointerEvents={'box-none'} {...others}>\n        {this.props.children}\n      </View>;\n  }\n\n}\n\nexport default asPanViewConsumer(PanResponderView);"]},"metadata":{},"sourceType":"module"}