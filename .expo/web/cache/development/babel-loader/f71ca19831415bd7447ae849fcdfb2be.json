{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/WheelPicker/Item.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { interpolateColors } from 'react-native-reanimated';\nimport Text from \"../../components/text\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport { Colors, Spacings } from \"../../../src/style\";\nvar AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nexport default (function (_ref) {\n  var index = _ref.index,\n      label = _ref.label,\n      itemHeight = _ref.itemHeight,\n      onSelect = _ref.onSelect,\n      offset = _ref.offset,\n      _ref$activeColor = _ref.activeColor,\n      activeColor = _ref$activeColor === void 0 ? Colors.primary : _ref$activeColor,\n      _ref$inactiveColor = _ref.inactiveColor,\n      inactiveColor = _ref$inactiveColor === void 0 ? Colors.grey20 : _ref$inactiveColor,\n      style = _ref.style,\n      testID = _ref.testID,\n      _ref$centerH = _ref.centerH,\n      centerH = _ref$centerH === void 0 ? true : _ref$centerH;\n  var selectItem = useCallback(function () {\n    return onSelect(index);\n  }, [index]);\n  var itemOffset = index * itemHeight;\n  var color = useMemo(function () {\n    return interpolateColors(offset, {\n      inputRange: [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight],\n      outputColorRange: [inactiveColor, activeColor, inactiveColor]\n    });\n  }, [itemHeight]);\n  var containerStyle = useMemo(function () {\n    return [{\n      height: itemHeight\n    }, styles.container];\n  }, [itemHeight]);\n  return React.createElement(AnimatedTouchableOpacity, {\n    activeOpacity: 1,\n    style: containerStyle,\n    key: index,\n    centerV: true,\n    centerH: centerH,\n    right: !centerH,\n    onPress: selectItem,\n    index: index,\n    testID: testID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  }, React.createElement(AnimatedText, {\n    text60R: true,\n    style: _objectSpread({\n      color: color\n    }, style),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, label));\n});\nvar styles = StyleSheet.create({\n  container: {\n    minWidth: Spacings.s10\n  }\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/WheelPicker/Item.js"],"names":["React","useCallback","useMemo","Animated","interpolateColors","Text","TouchableOpacity","Colors","Spacings","AnimatedTouchableOpacity","createAnimatedComponent","AnimatedText","index","label","itemHeight","onSelect","offset","activeColor","primary","inactiveColor","grey20","style","testID","centerH","selectItem","itemOffset","color","inputRange","outputColorRange","containerStyle","height","styles","container","StyleSheet","create","minWidth","s10"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;;AAEA,OAAOC,QAAP,IAAmBC,iBAAnB,QAA4C,yBAA5C;AACA,OAAOC,IAAP;AACA,OAAOC,gBAAP;AACA,SAASC,MAAT,EAAiBC,QAAjB;AACA,IAAMC,wBAAwB,GAAGN,QAAQ,CAACO,uBAAT,CAAiCJ,gBAAjC,CAAjC;AACA,IAAMK,YAAY,GAAGR,QAAQ,CAACO,uBAAT,CAAiCL,IAAjC,CAArB;AACA,gBAAgB,gBAWV;AAAA,MAVJO,KAUI,QAVJA,KAUI;AAAA,MATJC,KASI,QATJA,KASI;AAAA,MARJC,UAQI,QARJA,UAQI;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,MAMI,QANJA,MAMI;AAAA,8BALJC,WAKI;AAAA,MALJA,WAKI,iCALUV,MAAM,CAACW,OAKjB;AAAA,gCAJJC,aAII;AAAA,MAJJA,aAII,mCAJYZ,MAAM,CAACa,MAInB;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,0BADJC,OACI;AAAA,MADJA,OACI,6BADM,IACN;AACJ,MAAMC,UAAU,GAAGvB,WAAW,CAAC;AAAA,WAAMc,QAAQ,CAACH,KAAD,CAAd;AAAA,GAAD,EAAwB,CAACA,KAAD,CAAxB,CAA9B;AACA,MAAMa,UAAU,GAAGb,KAAK,GAAGE,UAA3B;AACA,MAAMY,KAAK,GAAGxB,OAAO,CAAC,YAAM;AAC1B,WAAOE,iBAAiB,CAACY,MAAD,EAAS;AAC/BW,MAAAA,UAAU,EAAE,CAACF,UAAU,GAAGX,UAAd,EAA0BW,UAA1B,EAAsCA,UAAU,GAAGX,UAAnD,CADmB;AAE/Bc,MAAAA,gBAAgB,EAAE,CAACT,aAAD,EAAgBF,WAAhB,EAA6BE,aAA7B;AAFa,KAAT,CAAxB;AAID,GALoB,EAKlB,CAACL,UAAD,CALkB,CAArB;AAMA,MAAMe,cAAc,GAAG3B,OAAO,CAAC,YAAM;AACnC,WAAO,CAAC;AACN4B,MAAAA,MAAM,EAAEhB;AADF,KAAD,EAEJiB,MAAM,CAACC,SAFH,CAAP;AAGD,GAJ6B,EAI3B,CAAClB,UAAD,CAJ2B,CAA9B;AAKA,SAAO,oBAAC,wBAAD;AAA0B,IAAA,aAAa,EAAE,CAAzC;AAA4C,IAAA,KAAK,EAAEe,cAAnD;AAAmE,IAAA,GAAG,EAAEjB,KAAxE;AAA+E,IAAA,OAAO,MAAtF;AAAuF,IAAA,OAAO,EAAEW,OAAhG;AAAyG,IAAA,KAAK,EAAE,CAACA,OAAjH;AAA0H,IAAA,OAAO,EAAEC,UAAnI;AACP,IAAA,KAAK,EAAEZ,KADA;AACO,IAAA,MAAM,EAAEU,MADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKH,oBAAC,YAAD;AAAc,IAAA,OAAO,MAArB;AAAsB,IAAA,KAAK;AAC3BI,MAAAA,KAAK,EAALA;AAD2B,OAExBL,KAFwB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGR,KAJH,CALG,CAAP;AAYD,CArCD;AAsCA,IAAMkB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,QAAQ,EAAE3B,QAAQ,CAAC4B;AADV;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, { interpolateColors } from 'react-native-reanimated';\nimport Text from \"../../components/text\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport { Colors, Spacings } from \"../../../src/style\";\nconst AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\nconst AnimatedText = Animated.createAnimatedComponent(Text);\nexport default (({\n  index,\n  label,\n  itemHeight,\n  onSelect,\n  offset,\n  activeColor = Colors.primary,\n  inactiveColor = Colors.grey20,\n  style,\n  testID,\n  centerH = true\n}) => {\n  const selectItem = useCallback(() => onSelect(index), [index]);\n  const itemOffset = index * itemHeight;\n  const color = useMemo(() => {\n    return interpolateColors(offset, {\n      inputRange: [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight],\n      outputColorRange: [inactiveColor, activeColor, inactiveColor]\n    });\n  }, [itemHeight]);\n  const containerStyle = useMemo(() => {\n    return [{\n      height: itemHeight\n    }, styles.container];\n  }, [itemHeight]);\n  return <AnimatedTouchableOpacity activeOpacity={1} style={containerStyle} key={index} centerV centerH={centerH} right={!centerH} onPress={selectItem} // @ts-ignore reanimated2\n  index={index} testID={testID}>\n      {\n      /* @ts-ignore reanimated2*/\n    }\n      <AnimatedText text60R style={{\n      color,\n      ...style\n    }}>\n        {label}\n      </AnimatedText>\n    </AnimatedTouchableOpacity>;\n});\nconst styles = StyleSheet.create({\n  container: {\n    minWidth: Spacings.s10\n  }\n});"]},"metadata":{},"sourceType":"module"}