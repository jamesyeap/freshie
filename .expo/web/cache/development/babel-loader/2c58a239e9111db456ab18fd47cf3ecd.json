{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/dateTimePicker/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { DateTimePickerPackage as RNDateTimePicker } from \"../../optionalDependencies\";\nimport { Constants } from \"../../helpers\";\nimport { Colors } from \"../../style\";\nimport Assets from \"../../assets\";\nimport { asBaseComponent } from \"../../commons\";\nimport { TextField } from \"../inputs\";\nimport Dialog from \"../dialog\";\nimport View from \"../view\";\nimport Button from \"../button\";\nvar MODES = {\n  DATE: 'date',\n  TIME: 'time'\n};\n\nvar DateTimePicker = function (_Component) {\n  _inherits(DateTimePicker, _Component);\n\n  var _super = _createSuper(DateTimePicker);\n\n  function DateTimePicker(props) {\n    var _this;\n\n    _classCallCheck(this, DateTimePicker);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var date = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (event.type !== 'dismissed' && date !== undefined) {\n        _this.chosenDate = date;\n\n        if (Constants.isAndroid) {\n          _this.onDonePressed();\n        }\n      }\n    };\n\n    _this.toggleExpandableOverlay = function (callback) {\n      _this.setState({\n        showExpandableOverlay: !_this.state.showExpandableOverlay\n      }, function () {\n        if (_.isFunction(callback)) {\n          callback();\n        }\n      });\n    };\n\n    _this.onToggleExpandableModal = function (value) {\n      _this.toggleExpandableOverlay();\n\n      _.invoke(_this.props, 'onToggleExpandableModal', value);\n    };\n\n    _this.onDonePressed = function () {\n      return _this.toggleExpandableOverlay(function () {\n        if (Constants.isIOS && !_this.chosenDate) {\n          _this.chosenDate = new Date();\n        }\n\n        _.invoke(_this.props, 'onChange', _this.chosenDate);\n\n        _this.setState({\n          value: _this.chosenDate\n        });\n      });\n    };\n\n    _this.getStringValue = function () {\n      var value = _this.state.value;\n      var _this$props = _this.props,\n          mode = _this$props.mode,\n          dateFormat = _this$props.dateFormat,\n          timeFormat = _this$props.timeFormat,\n          dateFormatter = _this$props.dateFormatter,\n          timeFormatter = _this$props.timeFormatter;\n\n      if (value) {\n        switch (mode) {\n          case MODES.DATE:\n            return dateFormatter ? dateFormatter(value) : dateFormat ? moment(value).format(dateFormat) : value.toLocaleDateString();\n\n          case MODES.TIME:\n            return timeFormatter ? timeFormatter(value) : timeFormat ? moment(value).format(timeFormat) : value.toLocaleTimeString();\n        }\n      }\n    };\n\n    _this.renderExpandableOverlay = function () {\n      var _this$props2 = _this.props,\n          testID = _this$props2.testID,\n          dialogProps = _this$props2.dialogProps;\n      var showExpandableOverlay = _this.state.showExpandableOverlay;\n      return React.createElement(Dialog, _extends({\n        migrate: true,\n        visible: showExpandableOverlay,\n        width: \"100%\",\n        height: null,\n        bottom: true,\n        centerH: true,\n        onDismiss: _this.toggleExpandableOverlay,\n        containerStyle: styles.dialog,\n        testID: testID + \".dialog\",\n        supportedOrientations: ['portrait', 'landscape', 'landscape-left', 'landscape-right']\n      }, dialogProps, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }\n      }, _this.renderHeader(), _this.renderDateTimePicker()));\n    };\n\n    _this.renderExpandable = function () {\n      return Constants.isAndroid ? _this.renderDateTimePicker() : _this.renderExpandableOverlay();\n    };\n\n    _this.chosenDate = props.value;\n    _this.state = {\n      showExpandableOverlay: false,\n      prevValue: props.value,\n      value: props.value\n    };\n\n    if (!RNDateTimePicker) {\n      console.error(\"RNUILib DateTimePicker component requires installing \\\"@react-native-community/datetimepicker\\\" dependency\");\n    }\n\n    return _this;\n  }\n\n  _createClass(DateTimePicker, [{\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var _this$props3 = this.props,\n          useCustomTheme = _this$props3.useCustomTheme,\n          headerStyle = _this$props3.headerStyle;\n      return React.createElement(View, {\n        row: true,\n        spread: true,\n        \"bg-white\": true,\n        \"paddingH-20\": true,\n        style: [styles.header, headerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 7\n        }\n      }, React.createElement(Button, {\n        link: true,\n        iconSource: Assets.icons.x,\n        iconStyle: {\n          tintColor: Colors.dark10\n        },\n        onPress: this.toggleExpandableOverlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        link: true,\n        iconSource: Assets.icons.check,\n        useCustomTheme: useCustomTheme,\n        onPress: this.onDonePressed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"renderDateTimePicker\",\n    value: function renderDateTimePicker() {\n      if (!RNDateTimePicker) {\n        return null;\n      }\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          showExpandableOverlay = _this$state.showExpandableOverlay;\n      var _this$props4 = this.props,\n          mode = _this$props4.mode,\n          minimumDate = _this$props4.minimumDate,\n          maximumDate = _this$props4.maximumDate,\n          locale = _this$props4.locale,\n          is24Hour = _this$props4.is24Hour,\n          minuteInterval = _this$props4.minuteInterval,\n          timeZoneOffsetInMinutes = _this$props4.timeZoneOffsetInMinutes;\n\n      if (showExpandableOverlay) {\n        return React.createElement(RNDateTimePicker, {\n          mode: mode,\n          value: value || new Date(),\n          onChange: this.handleChange,\n          minimumDate: minimumDate,\n          maximumDate: maximumDate,\n          locale: locale,\n          is24Hour: is24Hour,\n          minuteInterval: minuteInterval,\n          timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,\n          display: Constants.isIOS ? 'spinner' : undefined,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 9\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var textInputProps = TextField.extractOwnProps(this.props);\n      return React.createElement(TextField, _extends({}, textInputProps, {\n        value: this.getStringValue(),\n        expandable: true,\n        renderExpandable: this.renderExpandable,\n        onToggleExpandableModal: this.onToggleExpandableModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 7\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.prevValue) {\n        return {\n          prevValue: prevState.value,\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return DateTimePicker;\n}(Component);\n\nDateTimePicker.displayName = 'DateTimePicker';\nDateTimePicker.propTypes = _objectSpread(_objectSpread({}, TextField.propTypes), {}, {\n  mode: PropTypes.oneOf(Object.values(MODES)),\n  value: PropTypes.instanceOf(Date),\n  onChange: PropTypes.func,\n  minimumDate: PropTypes.instanceOf(Date),\n  maximumDate: PropTypes.instanceOf(Date),\n  dateFormat: PropTypes.string,\n  dateFormatter: PropTypes.func,\n  timeFormat: PropTypes.string,\n  timeFormatter: PropTypes.func,\n  locale: PropTypes.string,\n  is24Hour: PropTypes.bool,\n  minuteInterval: PropTypes.number,\n  timeZoneOffsetInMinutes: PropTypes.number,\n  dialogProps: PropTypes.object,\n  headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  renderInput: PropTypes.elementType\n});\nDateTimePicker.defaultProps = _objectSpread(_objectSpread({}, TextField.defaultProps), {}, {\n  mode: MODES.DATE\n});\nexport { DateTimePicker };\nexport default asBaseComponent(DateTimePicker);\nvar styles = StyleSheet.create({\n  header: {\n    height: 56,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.dark80\n  },\n  dialog: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: 12,\n    borderTopRightRadius: 12\n  }\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/dateTimePicker/index.js"],"names":["_","PropTypes","moment","React","Component","DateTimePickerPackage","RNDateTimePicker","Constants","Colors","Assets","asBaseComponent","TextField","Dialog","View","Button","MODES","DATE","TIME","DateTimePicker","props","handleChange","event","date","type","undefined","chosenDate","isAndroid","onDonePressed","toggleExpandableOverlay","callback","setState","showExpandableOverlay","state","isFunction","onToggleExpandableModal","value","invoke","isIOS","Date","getStringValue","mode","dateFormat","timeFormat","dateFormatter","timeFormatter","format","toLocaleDateString","toLocaleTimeString","renderExpandableOverlay","testID","dialogProps","styles","dialog","renderHeader","renderDateTimePicker","renderExpandable","prevValue","console","error","useCustomTheme","headerStyle","header","icons","x","tintColor","dark10","check","minimumDate","maximumDate","locale","is24Hour","minuteInterval","timeZoneOffsetInMinutes","textInputProps","extractOwnProps","nextProps","prevState","displayName","propTypes","oneOf","Object","values","instanceOf","onChange","func","string","bool","number","object","oneOfType","renderInput","elementType","defaultProps","StyleSheet","create","height","borderBottomWidth","borderBottomColor","dark80","backgroundColor","white","borderTopLeftRadius","borderTopRightRadius"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport React, {Component} from 'react';\nimport {StyleSheet} from 'react-native';\nimport {DateTimePickerPackage as RNDateTimePicker} from '../../optionalDependencies';\nimport {Constants} from '../../helpers';\nimport {Colors} from '../../style';\nimport Assets from '../../assets';\nimport {asBaseComponent} from '../../commons';\nimport {TextField} from '../inputs';\nimport Dialog from '../dialog';\nimport View from '../view';\nimport Button from '../button';\n\n\nconst MODES = {\n  DATE: 'date',\n  TIME: 'time'\n};\n\n/*eslint-disable*/\n/**\n * @description: Date and Time Picker Component that wraps RNDateTimePicker for date and time modes.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.js\n * @important: DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects.\n * @extends: TextField, react-native-community/datetimepicker\n * @extendsLink: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_iOS.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_Android.gif?raw=true\n */\n/*eslint-enable*/\n\nclass DateTimePicker extends Component {\n  static displayName = 'DateTimePicker';\n\n  static propTypes = {\n    ...TextField.propTypes,\n    /**\n     * The type of picker to display ('date' or 'time')\n     */\n    mode: PropTypes.oneOf(Object.values(MODES)),\n    /**\n     * The initial value to set the picker to. Defaults to device's date / time\n     */\n    value: PropTypes.instanceOf(Date),\n    /**\n     * The onChange callback\n     */\n    onChange: PropTypes.func,\n    /**\n     * The minimum date or time value to use\n     */\n    minimumDate: PropTypes.instanceOf(Date),\n    /**\n     * The maximum date or time value to use\n     */\n    maximumDate: PropTypes.instanceOf(Date),\n    /**\n     * The date format for the text display\n     */\n    dateFormat: PropTypes.string,\n    /**\n     * A callback function to format date\n     */\n    dateFormatter: PropTypes.func,\n    /**\n     * The time format for the text display\n     */\n    timeFormat: PropTypes.string,\n    /**\n     * A callback function to format time\n     */\n    timeFormatter: PropTypes.func,\n    /**\n     * Allows changing of the locale of the component (iOS only)\n     */\n    locale: PropTypes.string,\n    /**\n     * Allows changing of the time picker to a 24 hour format (Android only)\n     */\n    is24Hour: PropTypes.bool,\n    /**\n     * The interval at which minutes can be selected. Possible values are: 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30 (iOS only)\n     */\n    minuteInterval: PropTypes.number,\n    /**\n     * Allows changing of the timeZone of the date picker. By default it uses the device's time zone (iOS only)\n     */\n    timeZoneOffsetInMinutes: PropTypes.number,\n    /**\n     * Props to pass the Dialog component\n     */\n    dialogProps: PropTypes.object,\n    /**\n     * style to apply to the iOS dialog header\n     */\n    headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * Render custom input\n     */\n    renderInput: PropTypes.elementType\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    mode: MODES.DATE\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.chosenDate = props.value;\n\n    this.state = {\n      showExpandableOverlay: false,\n      prevValue: props.value,\n      value: props.value\n    };\n\n    if (!RNDateTimePicker) {\n      console.error(`RNUILib DateTimePicker component requires installing \"@react-native-community/datetimepicker\" dependency`);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.value !== prevState.prevValue) {\n      return {\n        prevValue: prevState.value,\n        value: nextProps.value\n      };\n    }\n    return null;\n  }\n\n  handleChange = (event = {}, date) => {\n    // NOTE: will be called on Android even when there was no actual change\n    if (event.type !== 'dismissed' && date !== undefined) {\n      this.chosenDate = date;\n\n      if (Constants.isAndroid) {\n        this.onDonePressed();\n      }\n    }\n  };\n\n  toggleExpandableOverlay = callback => {\n    this.setState({showExpandableOverlay: !this.state.showExpandableOverlay}, () => {\n      if (_.isFunction(callback)) {\n        callback();\n      }\n    });\n  };\n\n  onToggleExpandableModal = value => {\n    this.toggleExpandableOverlay();\n    _.invoke(this.props, 'onToggleExpandableModal', value);\n  };\n\n  onDonePressed = () =>\n    this.toggleExpandableOverlay(() => {\n      if (Constants.isIOS && !this.chosenDate) {\n        // since handleChange() is not called on iOS when there is no actual change\n        this.chosenDate = new Date();\n      }\n\n      _.invoke(this.props, 'onChange', this.chosenDate);\n      this.setState({value: this.chosenDate});\n    });\n\n  getStringValue = () => {\n    const {value} = this.state;\n    const {mode, dateFormat, timeFormat, dateFormatter, timeFormatter} = this.props;\n    if (value) {\n      switch (mode) {\n        case MODES.DATE:\n          return dateFormatter\n            ? dateFormatter(value)\n            : dateFormat\n              ? moment(value).format(dateFormat)\n              : value.toLocaleDateString();\n        case MODES.TIME:\n          return timeFormatter\n            ? timeFormatter(value)\n            : timeFormat\n              ? moment(value).format(timeFormat)\n              : value.toLocaleTimeString();\n      }\n    }\n  };\n\n  renderExpandableOverlay = () => {\n    const {testID, dialogProps} = this.props;\n    const {showExpandableOverlay} = this.state;\n\n    return (\n      <Dialog\n        migrate\n        visible={showExpandableOverlay}\n        width=\"100%\"\n        height={null}\n        bottom\n        centerH\n        onDismiss={this.toggleExpandableOverlay}\n        containerStyle={styles.dialog}\n        testID={`${testID}.dialog`}\n        supportedOrientations={['portrait', 'landscape', 'landscape-left', 'landscape-right']} // iOS only\n        {...dialogProps}\n      >\n        <View /* useSafeArea */>\n          {this.renderHeader()}\n          {this.renderDateTimePicker()}\n        </View>\n      </Dialog>\n    );\n  };\n\n  renderHeader() {\n    const {useCustomTheme, headerStyle} = this.props;\n\n    return (\n      <View row spread bg-white paddingH-20 style={[styles.header, headerStyle]}>\n        <Button\n          link\n          iconSource={Assets.icons.x}\n          iconStyle={{tintColor: Colors.dark10}}\n          onPress={this.toggleExpandableOverlay}\n        />\n        <Button link iconSource={Assets.icons.check} useCustomTheme={useCustomTheme} onPress={this.onDonePressed}/>\n      </View>\n    );\n  }\n\n  renderDateTimePicker() {\n    if (!RNDateTimePicker) {\n      return null;\n    }\n\n    const {value, showExpandableOverlay} = this.state;\n    const {mode, minimumDate, maximumDate, locale, is24Hour, minuteInterval, timeZoneOffsetInMinutes} = this.props;\n\n    if (showExpandableOverlay) {\n      return (\n        <RNDateTimePicker\n          mode={mode}\n          value={value || new Date()}\n          onChange={this.handleChange}\n          minimumDate={minimumDate}\n          maximumDate={maximumDate}\n          locale={locale}\n          is24Hour={is24Hour}\n          minuteInterval={minuteInterval}\n          timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}\n          display={Constants.isIOS ? 'spinner' : undefined}\n        />\n      );\n    }\n  }\n\n  renderExpandable = () => {\n    return Constants.isAndroid ? this.renderDateTimePicker() : this.renderExpandableOverlay();\n  };\n\n  render() {\n    const textInputProps = TextField.extractOwnProps(this.props);\n\n    return (\n      <TextField\n        {...textInputProps}\n        value={this.getStringValue()}\n        expandable\n        renderExpandable={this.renderExpandable}\n        onToggleExpandableModal={this.onToggleExpandableModal}\n      />\n    );\n  }\n}\n\nexport {DateTimePicker}; // For tests\nexport default asBaseComponent(DateTimePicker);\n\n\nconst styles = StyleSheet.create({\n  header: {\n    height: 56,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.dark80\n  },\n  dialog: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: 12,\n    borderTopRightRadius: 12\n  }\n});\n"]},"metadata":{},"sourceType":"module"}