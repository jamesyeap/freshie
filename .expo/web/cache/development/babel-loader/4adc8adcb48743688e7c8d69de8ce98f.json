{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/segmentedControl/segment.js\";\n\nimport _pt from \"prop-types\";\nimport React, { useCallback, useMemo } from 'react';\nimport { Colors, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nvar Segment = React.memo(function (props) {\n  var _props$activeColor = props.activeColor,\n      activeColor = _props$activeColor === void 0 ? Colors.primary : _props$activeColor,\n      label = props.label,\n      iconSource = props.iconSource,\n      iconStyle = props.iconStyle,\n      isSelected = props.isSelected,\n      onLayout = props.onLayout,\n      onPress = props.onPress,\n      inactiveColor = props.inactiveColor,\n      index = props.index,\n      iconOnRight = props.iconOnRight;\n  var segmentedColor = useMemo(function () {\n    return isSelected ? activeColor : inactiveColor;\n  }, [isSelected, activeColor, inactiveColor]);\n  var segmentStyle = useMemo(function () {\n    return {\n      paddingHorizontal: Spacings.s3,\n      borderColor: segmentedColor\n    };\n  }, [segmentedColor]);\n  var renderIcon = useCallback(function () {\n    return iconSource && React.createElement(Image, {\n      source: iconSource,\n      style: [{\n        tintColor: segmentedColor\n      }, iconStyle],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 26\n      }\n    });\n  }, [iconSource, segmentedColor, iconStyle]);\n  var onSegmentPress = useCallback(function () {\n    onPress(index);\n  }, [index, onPress]);\n  var segmentOnLayout = useCallback(function (event) {\n    onLayout == null ? void 0 : onLayout(index, event);\n  }, [onLayout, index]);\n  return React.createElement(TouchableOpacity, {\n    onLayout: segmentOnLayout,\n    style: segmentStyle,\n    onPress: onSegmentPress,\n    row: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, !iconOnRight && renderIcon(), label && React.createElement(Text, {\n    text90: true,\n    numberOfLines: 1,\n    color: segmentedColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, label), iconOnRight && renderIcon());\n});\nSegment.propTypes = {\n  label: _pt.string,\n  iconOnRight: _pt.bool,\n  isSelected: _pt.bool,\n  activeColor: _pt.string,\n  inactiveColor: _pt.string,\n  onPress: _pt.func.isRequired,\n  index: _pt.number.isRequired,\n  onLayout: _pt.func\n};\nexport default asBaseComponent(Segment);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/segmentedControl/segment.js"],"names":["_pt","React","useCallback","useMemo","Colors","Spacings","asBaseComponent","TouchableOpacity","Text","Image","Segment","memo","props","activeColor","primary","label","iconSource","iconStyle","isSelected","onLayout","onPress","inactiveColor","index","iconOnRight","segmentedColor","segmentStyle","paddingHorizontal","s3","borderColor","renderIcon","tintColor","onSegmentPress","segmentOnLayout","event","propTypes","string","bool","func","isRequired","number"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useCallback, useMemo } from 'react';\nimport { Colors, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Image from \"../image\";\n\n/**\n * Segment sub-component for SegmentedControl component\n */\nconst Segment = React.memo(props => {\n  const {\n    activeColor = Colors.primary,\n    label,\n    iconSource,\n    iconStyle,\n    isSelected,\n    onLayout,\n    onPress,\n    inactiveColor,\n    index,\n    iconOnRight\n  } = props;\n  const segmentedColor = useMemo(() => isSelected ? activeColor : inactiveColor, [isSelected, activeColor, inactiveColor]);\n  const segmentStyle = useMemo(() => ({\n    paddingHorizontal: Spacings.s3,\n    borderColor: segmentedColor\n  }), [segmentedColor]);\n  const renderIcon = useCallback(() => {\n    return iconSource && <Image source={iconSource} style={[{\n      tintColor: segmentedColor\n    }, iconStyle]} />;\n  }, [iconSource, segmentedColor, iconStyle]);\n  const onSegmentPress = useCallback(() => {\n    onPress(index);\n  }, [index, onPress]);\n  const segmentOnLayout = useCallback(event => {\n    onLayout?.(index, event);\n  }, [onLayout, index]);\n  return <TouchableOpacity onLayout={segmentOnLayout} style={segmentStyle} onPress={onSegmentPress} row>\n      {!iconOnRight && renderIcon()}\n      {label && <Text text90 numberOfLines={1} color={segmentedColor}>\n          {label}\n        </Text>}\n      {iconOnRight && renderIcon()}\n    </TouchableOpacity>;\n});\nSegment.propTypes = {\n  /**\n     * The label of the segment.\n     */\n  label: _pt.string,\n\n  /**\n     * Should the icon be on right of the label\n     */\n  iconOnRight: _pt.bool,\n\n  /**\n     * Is the item selected.\n     */\n  isSelected: _pt.bool,\n\n  /**\n     * The color of the active segment (label and outline).\n     */\n  activeColor: _pt.string,\n\n  /**\n     * The color of the inactive segment (label).\n     */\n  inactiveColor: _pt.string,\n\n  /**\n     * Callback for when segment has pressed.\n     */\n  onPress: _pt.func.isRequired,\n\n  /**\n     * The index of the segment.\n     */\n  index: _pt.number.isRequired,\n\n  /**\n     * onLayout function.\n     */\n  onLayout: _pt.func\n};\nexport default asBaseComponent(Segment);"]},"metadata":{},"sourceType":"module"}