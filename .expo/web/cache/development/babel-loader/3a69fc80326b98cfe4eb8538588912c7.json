{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/lib/components/WheelPicker/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport WheelPickerItem from \"./WheelPickerItem\";\nimport { Constants } from \"../../../src/helpers\";\nimport { Typography, Colors } from \"../../../src/style\";\nimport { PickerPackage, CommunityPickerPackage } from \"../../../src/optionalDependencies\";\n\nvar Picker = (PickerPackage == null ? void 0 : PickerPackage.Picker) || (CommunityPickerPackage == null ? void 0 : CommunityPickerPackage.Picker) || function () {\n  return null;\n};\n\nif (!PickerPackage) {\n  if (CommunityPickerPackage) {\n    console.warn(\"RNUILib Picker will soon migrate to use \\\"@react-native-picker/picker\\\" package instead of '@react-native-community/picker'\");\n  } else {\n    console.error(\"RNUILib Picker requires installing \\\"@react-native-picker/picker\\\" dependency\");\n  }\n}\n\nvar WheelPickerNative = requireNativeComponent('WheelPicker', null);\n\nvar WheelPicker = function (_Component) {\n  _inherits(WheelPicker, _Component);\n\n  var _super = _createSuper(WheelPicker);\n\n  function WheelPicker(props) {\n    var _this;\n\n    _classCallCheck(this, WheelPicker);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: _this.getItems()\n    };\n\n    _this.onLogReceived = function (event) {\n      console[event.LogType](event.TAG, event.text);\n    };\n\n    _this.onValueChange = _this.onValueChange.bind(_assertThisInitialized(_this));\n\n    _this.getItems();\n\n    DeviceEventEmitter.addListener('log', _this.onLogReceived);\n    return _this;\n  }\n\n  _createClass(WheelPicker, [{\n    key: \"onValueChange\",\n    value: function onValueChange(event) {\n      var index = event.nativeEvent.itemIndex;\n      var onValueChange = this.props.onValueChange;\n\n      if (onValueChange) {\n        var items = this.state.items;\n        onValueChange(items[index].value, index);\n      }\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      var items = _.map(React.Children.toArray(this.props.children), function (child) {\n        return {\n          value: child.props.value,\n          label: child.props.label\n        };\n      });\n\n      return items;\n    }\n  }, {\n    key: \"getInitialIndex\",\n    value: function getInitialIndex() {\n      var items = this.state.items;\n      var selectedValue = this.props.selectedValue;\n      return _.findIndex(items, {\n        value: selectedValue\n      });\n    }\n  }, {\n    key: \"extractLabelsFromItems\",\n    value: function extractLabelsFromItems() {\n      return _.map(this.state.items, 'label');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          color = _this$props.color,\n          labelStyle = _this$props.labelStyle,\n          itemHeight = _this$props.itemHeight;\n      var fontSize = labelStyle.fontSize,\n          fontFamily = labelStyle.fontFamily;\n      var labelColor = labelStyle.color;\n      return React.createElement(View, {\n        collapsable: false,\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }, React.createElement(WheelPickerNative, {\n        data: this.extractLabelsFromItems(),\n        initialIndex: this.getInitialIndex(),\n        onChange: this.onValueChange,\n        style: [styles.wheelPicker, style],\n        color: color,\n        labelColor: labelColor || color,\n        fontSize: fontSize,\n        itemHeight: itemHeight,\n        fontFamily: fontFamily,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return WheelPicker;\n}(Component);\n\nWheelPicker.displayName = 'WheelPicker';\nWheelPicker.propTypes = {\n  selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onValueChange: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  labelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  itemHeight: PropTypes.number,\n  color: PropTypes.string,\n  itemStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number])\n};\nWheelPicker.defaultProps = {\n  labelStyle: {\n    fontSize: Typography.text70.fontSize,\n    fontFamily: Typography.text70.fontFamily\n  },\n  color: Colors.primary\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  wheelPicker: {\n    width: 200,\n    height: 200\n  }\n});\nWheelPicker.Item = WheelPickerItem;\nexport default Constants.isAndroid ? WheelPicker : Picker;","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/lib/components/WheelPicker/index.js"],"names":["_","PropTypes","React","Component","requireNativeComponent","WheelPickerItem","Constants","Typography","Colors","PickerPackage","CommunityPickerPackage","Picker","console","warn","error","WheelPickerNative","WheelPicker","props","state","items","getItems","onLogReceived","event","LogType","TAG","text","onValueChange","bind","DeviceEventEmitter","addListener","index","nativeEvent","itemIndex","value","map","Children","toArray","children","child","label","selectedValue","findIndex","style","color","labelStyle","itemHeight","fontSize","fontFamily","labelColor","styles","container","extractLabelsFromItems","getInitialIndex","wheelPicker","displayName","propTypes","oneOfType","string","number","func","object","itemStyle","defaultProps","text70","primary","StyleSheet","create","overflow","width","height","Item","isAndroid"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {DeviceEventEmitter, requireNativeComponent, StyleSheet, View} from 'react-native';\n\nimport WheelPickerItem from './WheelPickerItem';\nimport {Constants} from '../../../src/helpers';\nimport {Typography, Colors} from '../../../src/style';\n\nimport {PickerPackage, CommunityPickerPackage} from '../../../src/optionalDependencies';\nconst Picker = PickerPackage?.Picker || CommunityPickerPackage?.Picker || (() => null);\n\nif (!PickerPackage) {\n  if (CommunityPickerPackage) {\n    console.warn(`RNUILib Picker will soon migrate to use \"@react-native-picker/picker\" package instead of '@react-native-community/picker'`);\n  } else {\n    console.error(`RNUILib Picker requires installing \"@react-native-picker/picker\" dependency`);\n  }\n}\n\nconst WheelPickerNative = requireNativeComponent('WheelPicker', null);\n\nclass WheelPicker extends Component {\n  static displayName = 'WheelPicker';\n\n  static propTypes = {\n    /**\n     * the current selected value of the picker\n     */\n    selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), //eslint-disable-line\n    /**\n     * callback for when a value change\n     */\n    onValueChange: PropTypes.func,\n    /**\n     * pass custom style\n     */\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * pass custom label style: fontSize, fontFamily, color<br>\n     * Note: label's color will override the text color (hex only)\n     */\n    labelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * The height of the selected item\n     */\n    itemHeight: PropTypes.number,\n    /**\n     * The color of the wheel picker (hex only)\n     */\n    color: PropTypes.string,\n    /**\n     * pass custom style for the picker item\n     */\n    itemStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]) //eslint-disable-line\n  };\n\n  static defaultProps = {\n    labelStyle: {fontSize: Typography.text70.fontSize, fontFamily: Typography.text70.fontFamily},\n    color: Colors.primary\n  };\n\n  constructor(props) {\n    super(props);\n    this.onValueChange = this.onValueChange.bind(this); //eslint-disable-line\n    this.getItems();\n    DeviceEventEmitter.addListener('log', this.onLogReceived); // TODO: consider moving to a more generic place (base class?)\n  }\n\n  state = {\n    items: this.getItems()\n  };\n\n  onLogReceived = event => {\n    console[event.LogType](event.TAG, event.text);\n  };\n\n  onValueChange(event) {\n    const index = event.nativeEvent.itemIndex;\n    const {onValueChange} = this.props;\n    if (onValueChange) {\n      const {items} = this.state;\n      onValueChange(items[index].value, index);\n    }\n  }\n\n  getItems() {\n    const items = _.map(React.Children.toArray(this.props.children), child => ({\n      value: child.props.value,\n      label: child.props.label\n    }));\n    return items;\n  }\n\n  getInitialIndex() {\n    const {items} = this.state;\n    const {selectedValue} = this.props;\n    return _.findIndex(items, {value: selectedValue});\n  }\n\n  extractLabelsFromItems() {\n    return _.map(this.state.items, 'label');\n  }\n\n  render() {\n    const {style, color, labelStyle, itemHeight} = this.props;\n    const {fontSize, fontFamily} = labelStyle;\n    const {color: labelColor} = labelStyle;\n\n    return (\n      <View collapsable={false} style={styles.container}>\n        <WheelPickerNative\n          data={this.extractLabelsFromItems()}\n          initialIndex={this.getInitialIndex()}\n          onChange={this.onValueChange}\n          style={[styles.wheelPicker, style]}\n          color={color}\n          labelColor={labelColor || color}\n          fontSize={fontSize}\n          itemHeight={itemHeight}\n          fontFamily={fontFamily}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  wheelPicker: {\n    width: 200,\n    height: 200\n  }\n});\n\nWheelPicker.Item = WheelPickerItem;\n\nexport default Constants.isAndroid ? WheelPicker : Picker;\n"]},"metadata":{},"sourceType":"module"}