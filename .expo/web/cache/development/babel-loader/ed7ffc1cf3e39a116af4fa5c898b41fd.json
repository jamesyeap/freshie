{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js\";\nvar _excluded = [\"modifiers\", \"style\", \"onPress\", \"onLongPress\", \"disabled\", \"forwardedRef\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport _ from 'lodash';\nimport Reanimated, { Easing as _Easing, EasingNode } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler, State } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nvar Clock = Reanimated.Clock,\n    Code = Reanimated.Code,\n    cond = Reanimated.cond,\n    and = Reanimated.and,\n    or = Reanimated.or,\n    eq = Reanimated.eq,\n    neq = Reanimated.neq,\n    _interpolate = Reanimated.interpolate,\n    interpolateNode = Reanimated.interpolateNode,\n    Extrapolate = Reanimated.Extrapolate,\n    Value = Reanimated.Value,\n    call = Reanimated.call,\n    block = Reanimated.block,\n    event = Reanimated.event,\n    timing = Reanimated.timing,\n    set = Reanimated.set,\n    startClock = Reanimated.startClock,\n    stopClock = Reanimated.stopClock;\nvar Easing = EasingNode || _Easing;\nvar interpolate = interpolateNode || _interpolate;\n\nvar TouchableOpacity = function (_PureComponent) {\n  _inherits(TouchableOpacity, _PureComponent);\n\n  var _super = _createSuper(TouchableOpacity);\n\n  function TouchableOpacity() {\n    var _this;\n\n    _classCallCheck(this, TouchableOpacity);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      pressState: new Value(-1)\n    };\n    _this._prevPressState = new Value(-1);\n    _this.isAnimating = new Value(0);\n    _this.clock = new Clock();\n    _this._scale = runTiming(_this.clock, _this.pressState, _this.props.activeScale || 1, 1);\n    _this._opacity = runTiming(_this.clock, _this.pressState, _this.props.activeOpacity || 0.2, 1);\n    _this._color = cond(eq(_this.pressState, State.BEGAN), processColor(_this.props.feedbackColor || _this.backgroundColor), processColor(_this.backgroundColor));\n    _this.onStateChange = event([{\n      nativeEvent: {\n        state: _this.pressState\n      }\n    }], {\n      useNativeDriver: true\n    });\n\n    _this.onLongPress = function (event) {\n      if (event.nativeEvent.state === State.ACTIVE) {\n        _.invoke(_this.props, 'onLongPress', _this.props);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TouchableOpacity, [{\n    key: \"pressState\",\n    get: function get() {\n      return this.props.pressState || this.state.pressState;\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      var _this$props = this.props,\n          modifiers = _this$props.modifiers,\n          backgroundColorProp = _this$props.backgroundColor;\n      var backgroundColor = modifiers.backgroundColor;\n      return backgroundColorProp || backgroundColor;\n    }\n  }, {\n    key: \"animatedStyle\",\n    get: function get() {\n      var feedbackColor = this.props.feedbackColor;\n      var style = {\n        opacity: this._opacity,\n        transform: [{\n          scale: this._scale\n        }]\n      };\n\n      if (feedbackColor) {\n        style.backgroundColor = this._color;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          modifiers = _this$props2.modifiers,\n          style = _this$props2.style,\n          _this$props2$onPress = _this$props2.onPress,\n          onPress = _this$props2$onPress === void 0 ? _.noop : _this$props2$onPress,\n          onLongPress = _this$props2.onLongPress,\n          disabled = _this$props2.disabled,\n          forwardedRef = _this$props2.forwardedRef,\n          others = _objectWithoutProperties(_this$props2, _excluded);\n\n      var borderRadius = modifiers.borderRadius,\n          paddings = modifiers.paddings,\n          margins = modifiers.margins,\n          alignments = modifiers.alignments,\n          flexStyle = modifiers.flexStyle,\n          backgroundColor = modifiers.backgroundColor;\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this.onStateChange,\n        shouldCancelWhenOutside: true,\n        enabled: !disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 12\n        }\n      }, React.createElement(Reanimated.View, _extends({}, others, {\n        ref: forwardedRef,\n        style: [borderRadius && {\n          borderRadius: borderRadius\n        }, flexStyle, paddings, margins, alignments, backgroundColor && {\n          backgroundColor: backgroundColor\n        }, style, this.animatedStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }), this.props.children, React.createElement(Code, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }, function () {\n        return block([cond(and(eq(_this2.pressState, State.END), eq(_this2._prevPressState, State.BEGAN)), [call([], function () {\n          return onPress(_this2.props);\n        })]), set(_this2._prevPressState, _this2.pressState)]);\n      }), onLongPress && React.createElement(LongPressGestureHandler, {\n        onHandlerStateChange: this.onLongPress,\n        enabled: !disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 27\n        }\n      }, React.createElement(Reanimated.View, {\n        style: StyleSheet.absoluteFillObject,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return TouchableOpacity;\n}(PureComponent);\n\nTouchableOpacity.propTypes = {\n  backgroundColor: _pt.string,\n  feedbackColor: _pt.string,\n  activeOpacity: _pt.number,\n  activeScale: _pt.number,\n  onPress: _pt.func,\n  onLongPress: _pt.func,\n  disabled: _pt.bool,\n  onLayout: _pt.func,\n  testID: _pt.string\n};\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nTouchableOpacity.defaultProps = {\n  activeOpacity: 0.2,\n  activeScale: 1,\n  onPress: _.noop\n};\n\nfunction runTiming(clock, gestureState, initialValue, endValue) {\n  var state = {\n    finished: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n    frameTime: new Value(0)\n  };\n  var config = {\n    duration: 150,\n    toValue: new Value(0),\n    easing: Easing.inOut(Easing.ease)\n  };\n  return block([cond(and(eq(gestureState, State.BEGAN), neq(config.toValue, 1)), [set(state.finished, 0), set(state.time, 0), set(state.frameTime, 0), set(config.toValue, 1), startClock(clock)]), cond(and(or(eq(gestureState, State.END), eq(gestureState, State.FAILED)), neq(config.toValue, 0)), [set(state.finished, 0), set(state.time, 0), set(state.frameTime, 0), set(config.toValue, 0), startClock(clock)]), timing(clock, state, config), cond(state.finished, stopClock(clock)), interpolate(state.position, {\n    inputRange: [0, 1],\n    outputRange: [endValue, initialValue],\n    extrapolate: Extrapolate.CLAMP\n  })]);\n}\n\nexport default asBaseComponent(forwardRef(TouchableOpacity));","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js"],"names":["_pt","React","PureComponent","_","Reanimated","Easing","_Easing","EasingNode","TapGestureHandler","LongPressGestureHandler","State","asBaseComponent","forwardRef","Clock","Code","cond","and","or","eq","neq","_interpolate","interpolate","interpolateNode","Extrapolate","Value","call","block","event","timing","set","startClock","stopClock","TouchableOpacity","state","pressState","_prevPressState","isAnimating","clock","_scale","runTiming","props","activeScale","_opacity","activeOpacity","_color","BEGAN","processColor","feedbackColor","backgroundColor","onStateChange","nativeEvent","useNativeDriver","onLongPress","ACTIVE","invoke","modifiers","backgroundColorProp","style","opacity","transform","scale","onPress","noop","disabled","forwardedRef","others","borderRadius","paddings","margins","alignments","flexStyle","animatedStyle","children","END","StyleSheet","absoluteFillObject","propTypes","string","number","func","bool","onLayout","testID","displayName","defaultProps","gestureState","initialValue","endValue","finished","position","time","frameTime","config","duration","toValue","easing","inOut","ease","FAILED","inputRange","outputRange","extrapolate","CLAMP"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n// TODO: support hitSlop\nimport React, { PureComponent } from 'react';\nimport { processColor, StyleSheet } from 'react-native';\nimport _ from 'lodash';\nimport Reanimated, { Easing as _Easing, EasingNode } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler, State } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nconst {\n  Clock,\n  Code,\n  cond,\n  and,\n  or,\n  eq,\n  neq,\n  interpolate: _interpolate,\n  interpolateNode,\n  Extrapolate,\n  Value,\n  call,\n  block,\n  event,\n  timing,\n  set,\n  startClock,\n  stopClock\n} = Reanimated;\nconst Easing = EasingNode || _Easing;\nconst interpolate = interpolateNode || _interpolate;\n\n/**\n * @description: a Better, enhanced TouchableOpacity component\n * @modifiers: flex, margin, padding, background\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js\n */\nclass TouchableOpacity extends PureComponent {\n  static propTypes = {\n    /**\n       * Background color\n       */\n    backgroundColor: _pt.string,\n\n    /**\n       * Background color when actively pressing the touchable\n       */\n    feedbackColor: _pt.string,\n\n    /**\n       * Opacity value when actively pressing the touchable\n       */\n    activeOpacity: _pt.number,\n\n    /**\n       * Scale value when actively pressing the touchable\n       */\n    activeScale: _pt.number,\n\n    /**\n       * Callback for when tapping the touchable\n       */\n    onPress: _pt.func,\n\n    /**\n       * Callback for when long pressing the touchable\n       */\n    onLongPress: _pt.func,\n\n    /**\n       * If true, disable all interactions for this component.\n       */\n    disabled: _pt.bool,\n    onLayout: _pt.func,\n    testID: _pt.string\n  };\n  static displayName = 'Incubator.TouchableOpacity';\n  static defaultProps = {\n    activeOpacity: 0.2,\n    activeScale: 1,\n    onPress: _.noop\n  };\n  state = {\n    pressState: new Value(-1)\n  };\n  _prevPressState = new Value(-1);\n  isAnimating = new Value(0);\n  clock = new Clock();\n  _scale = runTiming(this.clock, this.pressState, this.props.activeScale || 1, 1);\n  _opacity = runTiming(this.clock, this.pressState, this.props.activeOpacity || 0.2, 1);\n  _color = cond(eq(this.pressState, State.BEGAN), // @ts-expect-error\n  processColor(this.props.feedbackColor || this.backgroundColor), processColor(this.backgroundColor));\n\n  get pressState() {\n    return this.props.pressState || this.state.pressState;\n  }\n\n  get backgroundColor() {\n    const {\n      modifiers,\n      backgroundColor: backgroundColorProp\n    } = this.props;\n    const {\n      backgroundColor\n    } = modifiers;\n    return backgroundColorProp || backgroundColor;\n  }\n\n  get animatedStyle() {\n    const {\n      feedbackColor\n    } = this.props;\n    const style = {\n      opacity: this._opacity,\n      transform: [{\n        scale: this._scale\n      }]\n    };\n\n    if (feedbackColor) {\n      style.backgroundColor = this._color;\n    }\n\n    return style;\n  }\n\n  onStateChange = event([{\n    nativeEvent: {\n      state: this.pressState\n    }\n  }], {\n    useNativeDriver: true\n  });\n  onLongPress = event => {\n    if (event.nativeEvent.state === State.ACTIVE) {\n      _.invoke(this.props, 'onLongPress', this.props);\n    }\n  };\n\n  render() {\n    const {\n      modifiers,\n      style,\n      onPress = _.noop,\n      onLongPress,\n      disabled,\n      forwardedRef,\n      ...others\n    } = this.props;\n    const {\n      borderRadius,\n      paddings,\n      margins,\n      alignments,\n      flexStyle,\n      backgroundColor\n    } = modifiers;\n    return <TapGestureHandler onHandlerStateChange={this.onStateChange} shouldCancelWhenOutside enabled={!disabled}>\n        <Reanimated.View {...others} ref={forwardedRef} style={[borderRadius && {\n        borderRadius\n      }, flexStyle, paddings, margins, alignments, backgroundColor && {\n        backgroundColor\n      }, style, this.animatedStyle]}>\n          {this.props.children}\n\n          <Code>\n            {() => {\n            return block([cond(and(eq(this.pressState, State.END), eq(this._prevPressState, State.BEGAN)), [call([], () => onPress(this.props))]), set(this._prevPressState, this.pressState)]);\n          }}\n          </Code>\n          {onLongPress && <LongPressGestureHandler onHandlerStateChange={this.onLongPress} enabled={!disabled}>\n              <Reanimated.View style={StyleSheet.absoluteFillObject} />\n            </LongPressGestureHandler>}\n        </Reanimated.View>\n      </TapGestureHandler>;\n  }\n\n}\n\nfunction runTiming(clock, gestureState, initialValue, endValue) {\n  const state = {\n    finished: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n    frameTime: new Value(0)\n  };\n  const config = {\n    duration: 150,\n    toValue: new Value(0),\n    easing: Easing.inOut(Easing.ease)\n  };\n  return block([cond(and(eq(gestureState, State.BEGAN), neq(config.toValue, 1)), [set(state.finished, 0), set(state.time, 0), set(state.frameTime, 0), set(config.toValue, 1), startClock(clock)]), cond(and(or(eq(gestureState, State.END), eq(gestureState, State.FAILED)), neq(config.toValue, 0)), [set(state.finished, 0), set(state.time, 0), set(state.frameTime, 0), set(config.toValue, 0), startClock(clock)]), timing(clock, state, config), cond(state.finished, stopClock(clock)), interpolate(state.position, {\n    inputRange: [0, 1],\n    outputRange: [endValue, initialValue],\n    extrapolate: Extrapolate.CLAMP\n  })]);\n}\n\nexport default asBaseComponent(forwardRef(TouchableOpacity));"]},"metadata":{},"sourceType":"module"}