{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/loaderScreen/index.js\";\nvar _excluded = [\"message\", \"messageStyle\", \"loaderColor\", \"overlay\", \"backgroundColor\", \"customLoader\", \"containerStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Colors, Typography } from \"../../style\";\nimport { Constants } from \"../../helpers\";\nimport { BaseComponent } from \"../../commons\";\nimport View from \"../../components/view\";\nimport Text from \"../../components/text\";\n\nvar LoaderScreen = function (_BaseComponent) {\n  _inherits(LoaderScreen, _BaseComponent);\n\n  var _super = _createSuper(LoaderScreen);\n\n  function LoaderScreen() {\n    _classCallCheck(this, LoaderScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoaderScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          message = _this$props.message,\n          messageStyle = _this$props.messageStyle,\n          loaderColor = _this$props.loaderColor,\n          overlay = _this$props.overlay,\n          backgroundColor = _this$props.backgroundColor,\n          customLoader = _this$props.customLoader,\n          containerStyle = _this$props.containerStyle,\n          others = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(View, {\n        style: [overlay ? [styles.overlayContainer, {\n          backgroundColor: backgroundColor\n        }] : styles.container, containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        flex: true,\n        center: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, customLoader || React.createElement(ActivityIndicator, _extends({\n        size: 'large',\n        animating: true,\n        color: loaderColor || (Constants.isIOS ? Colors.dark60 : Colors.primary)\n      }, others, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      })), message && React.createElement(Text, {\n        style: [styles.message, messageStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 23\n        }\n      }, message)));\n    }\n  }]);\n\n  return LoaderScreen;\n}(BaseComponent);\n\nLoaderScreen.displayName = 'LoaderScreen';\nLoaderScreen.propTypes = _objectSpread(_objectSpread({}, ActivityIndicator.propTypes), {}, {\n  loaderColor: PropTypes.string,\n  customLoader: PropTypes.element,\n  backgroundColor: PropTypes.string,\n  message: PropTypes.string,\n  messageStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  overlay: PropTypes.bool\n});\nexport { LoaderScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: Colors.rgba(Colors.white, 0.85),\n    zIndex: 100\n  }),\n  message: _objectSpread(_objectSpread({}, Typography.text70), {}, {\n    marginTop: 18,\n    color: Colors.dark10\n  })\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/loaderScreen/index.js"],"names":["PropTypes","React","Colors","Typography","Constants","BaseComponent","View","Text","LoaderScreen","props","message","messageStyle","loaderColor","overlay","backgroundColor","customLoader","containerStyle","others","styles","overlayContainer","container","isIOS","dark60","primary","displayName","propTypes","ActivityIndicator","string","element","oneOfType","object","number","array","bool","StyleSheet","create","flex","absoluteFillObject","rgba","white","zIndex","text70","marginTop","color","dark10"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAAQC,MAAR,EAAgBC,UAAhB;AACA,SAAQC,SAAR;AACA,SAAQC,aAAR;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;;IAOqBC,Y;;;;;;;;;;;;;WAkCnB,kBAAS;AACP,wBASI,KAAKC,KATT;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UAEEC,YAFF,eAEEA,YAFF;AAAA,UAGEC,WAHF,eAGEA,WAHF;AAAA,UAIEC,OAJF,eAIEA,OAJF;AAAA,UAKEC,eALF,eAKEA,eALF;AAAA,UAMEC,YANF,eAMEA,YANF;AAAA,UAOEC,cAPF,eAOEA,cAPF;AAAA,UAQKC,MARL;;AAWA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACJ,OAAO,GAAG,CAACK,MAAM,CAACC,gBAAR,EAA0B;AAACL,UAAAA,eAAe,EAAfA;AAAD,SAA1B,CAAH,GAAkDI,MAAM,CAACE,SAAjE,EAA4EJ,cAA5E,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,MAAM,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,YAAY,IACX,oBAAC,iBAAD;AACE,QAAA,IAAI,EAAE,OADR;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,KAAK,EAAEH,WAAW,KAAKR,SAAS,CAACiB,KAAV,GAAkBnB,MAAM,CAACoB,MAAzB,GAAkCpB,MAAM,CAACqB,OAA9C;AAHpB,SAIMN,MAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EASGP,OAAO,IAAI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACQ,MAAM,CAACR,OAAR,EAAiBC,YAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8CD,OAA9C,CATd,CADF,CADF;AAeD;;;;EA7DuCL,a;;AAArBG,Y,CACZgB,W,GAAc,c;AADFhB,Y,CAGZiB,S,mCACFC,iBAAiB,CAACD,S;AAIrBb,EAAAA,WAAW,EAAEZ,SAAS,CAAC2B,M;AAIvBZ,EAAAA,YAAY,EAAEf,SAAS,CAAC4B,O;AAIxBd,EAAAA,eAAe,EAAEd,SAAS,CAAC2B,M;AAI3BjB,EAAAA,OAAO,EAAEV,SAAS,CAAC2B,M;AAInBhB,EAAAA,YAAY,EAAEX,SAAS,CAAC6B,SAAV,CAAoB,CAAC7B,SAAS,CAAC8B,MAAX,EAAmB9B,SAAS,CAAC+B,MAA7B,EAAqC/B,SAAS,CAACgC,KAA/C,CAApB,C;AAIdnB,EAAAA,OAAO,EAAEb,SAAS,CAACiC;;SA5BFzB,Y;AAgErB,IAAMU,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;AAC/Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BjB,EAAAA,gBAAgB,kCACXe,UAAU,CAACG,kBADA;AAEdvB,IAAAA,eAAe,EAAEZ,MAAM,CAACoC,IAAP,CAAYpC,MAAM,CAACqC,KAAnB,EAA0B,IAA1B,CAFH;AAGdC,IAAAA,MAAM,EAAE;AAHM,IAJe;AAS/B9B,EAAAA,OAAO,kCACFP,UAAU,CAACsC,MADT;AAELC,IAAAA,SAAS,EAAE,EAFN;AAGLC,IAAAA,KAAK,EAAEzC,MAAM,CAAC0C;AAHT;AATwB,CAAlB,CAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, ActivityIndicator} from 'react-native';\nimport {Colors, Typography} from '../../style';\nimport {Constants} from '../../helpers';\nimport {BaseComponent} from '../../commons';\nimport View from '../../components/view';\nimport Text from '../../components/text';\n\n/**\n * @description: Component that shows a full screen with an activity indicator\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/LoadingScreen.js\n * \n */\nexport default class LoaderScreen extends BaseComponent {\n  static displayName = 'LoaderScreen';\n\n  static propTypes = {\n    ...ActivityIndicator.propTypes,\n    /**\n     * Color of the loading indicator\n     */\n    loaderColor: PropTypes.string,\n    /**\n     * Custom loader\n     */\n    customLoader: PropTypes.element,\n    /**\n     * Color of the loader background (only when passing 'overlay')\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * loader message\n     */\n    message: PropTypes.string,\n    /**\n     * message style\n     */\n    messageStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * Show the screen as an absolute overlay\n     */\n    overlay: PropTypes.bool\n    /**\n     * Custom container style\n     */\n  };\n\n  render() {\n    const {\n      message,\n      messageStyle,\n      loaderColor,\n      overlay,\n      backgroundColor,\n      customLoader,\n      containerStyle,\n      ...others\n    } = this.props;\n\n    return (\n      <View style={[overlay ? [styles.overlayContainer, {backgroundColor}] : styles.container, containerStyle]}>\n        <View flex center>\n          {customLoader || (\n            <ActivityIndicator\n              size={'large'}\n              animating\n              color={loaderColor || (Constants.isIOS ? Colors.dark60 : Colors.primary)}\n              {...others}\n            />\n          )}\n          {message && <Text style={[styles.message, messageStyle]}>{message}</Text>}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlayContainer: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: Colors.rgba(Colors.white, 0.85),\n    zIndex: 100\n  },\n  message: {\n    ...Typography.text70,\n    marginTop: 18,\n    color: Colors.dark10\n  }\n});\n"]},"metadata":{},"sourceType":"module"}