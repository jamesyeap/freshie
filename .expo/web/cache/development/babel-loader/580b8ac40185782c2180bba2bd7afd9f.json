{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/tabBar/TabBarItem.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { LogService } from \"../../services\";\nimport { Constants } from \"../../helpers\";\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport Badge from \"../badge\";\nvar INDICATOR_HEIGHT = 2;\nvar INDICATOR_BG_COLOR = Colors.primary;\nvar HORIZONTAL_PADDING = Constants.isTablet ? Spacings.s7 : Spacings.s5;\n\nvar TabBarItem = function (_PureComponent) {\n  _inherits(TabBarItem, _PureComponent);\n\n  var _super = _createSuper(TabBarItem);\n\n  function TabBarItem(props) {\n    var _this;\n\n    _classCallCheck(this, TabBarItem);\n\n    _this = _super.call(this, props);\n\n    _this.onAnimateCompleted = function () {\n      _this.setState({\n        selected: _this.props.selected\n      });\n    };\n\n    _this.onLayout = function (event) {\n      _this.layout = event.nativeEvent.layout;\n    };\n\n    _this.state = {\n      indicatorOpacity: props.selected ? new Animated.Value(1) : new Animated.Value(0),\n      selected: props.selected\n    };\n\n    if (!_.isEmpty(props.badge)) {\n      LogService.deprecationWarn({\n        component: 'TabBarItem',\n        oldProp: 'badge',\n        newProp: 'badgeProps'\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(TabBarItem, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selected !== this.props.selected) {\n        this.animate(this.props.selected);\n      }\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(newValue) {\n      Animated.timing(this.state.indicatorOpacity, {\n        toValue: newValue ? 1 : 0,\n        easing: Easing.ease,\n        duration: 150,\n        useNativeDriver: true\n      }).start(this.onAnimateCompleted);\n    }\n  }, {\n    key: \"getFlattenStyle\",\n    value: function getFlattenStyle(style) {\n      return StyleSheet.flatten(style);\n    }\n  }, {\n    key: \"getStylePropValue\",\n    value: function getStylePropValue(flattenStyle, propName) {\n      var prop;\n\n      if (flattenStyle) {\n        var propObject = _.pick(flattenStyle, [propName]);\n\n        prop = propObject[propName];\n      }\n\n      return prop;\n    }\n  }, {\n    key: \"getColorFromStyle\",\n    value: function getColorFromStyle(style) {\n      var flattenStyle = this.getFlattenStyle(style);\n      return this.getStylePropValue(flattenStyle, 'color');\n    }\n  }, {\n    key: \"getLayout\",\n    value: function getLayout() {\n      return this.layout;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          indicatorOpacity = _this$state.indicatorOpacity,\n          selected = _this$state.selected;\n      var _this$props = this.props,\n          children = _this$props.children,\n          indicatorStyle = _this$props.indicatorStyle,\n          icon = _this$props.icon,\n          iconColor = _this$props.iconColor,\n          iconSelectedColor = _this$props.iconSelectedColor,\n          label = _this$props.label,\n          labelStyle = _this$props.labelStyle,\n          badgeProps = _this$props.badgeProps,\n          badge = _this$props.badge,\n          uppercase = _this$props.uppercase,\n          maxLines = _this$props.maxLines,\n          selectedLabelStyle = _this$props.selectedLabelStyle,\n          showDivider = _this$props.showDivider,\n          width = _this$props.width,\n          onPress = _this$props.onPress,\n          activeBackgroundColor = _this$props.activeBackgroundColor,\n          backgroundColor = _this$props.backgroundColor,\n          testID = _this$props.testID,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          style = _this$props.style;\n      var iconTint = iconColor || this.getColorFromStyle(labelStyle) || this.getColorFromStyle(styles.label);\n      var iconSelectedTint = iconSelectedColor || this.getColorFromStyle(selectedLabelStyle) || this.getColorFromStyle(styles.selectedLabel);\n      var badgeFinalProps = badgeProps || badge;\n\n      var badgeSize = _.get(badgeFinalProps, 'size', 'small');\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: onPress,\n        style: [width ? {\n          width: width\n        } : {\n          flex: 1\n        }, style],\n        testID: testID,\n        backgroundColor: backgroundColor,\n        activeBackgroundColor: activeBackgroundColor,\n        onLayout: this.onLayout,\n        accessibilityState: selected ? {\n          selected: true\n        } : undefined,\n        accessibilityRole: 'tab',\n        accessibilityLabel: accessibilityLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 12\n        }\n      }, React.createElement(View, {\n        row: true,\n        flex: true,\n        center: true,\n        style: [showDivider && styles.divider, styles.contentContainer],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }\n      }, icon && React.createElement(Image, {\n        style: !_.isEmpty(label) && styles.icon,\n        source: icon,\n        tintColor: selected ? iconSelectedTint : iconTint,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 20\n        }\n      }), !_.isEmpty(label) && React.createElement(Text, {\n        numberOfLines: maxLines,\n        uppercase: uppercase,\n        style: [labelStyle || styles.label, selected && (selectedLabelStyle || styles.selectedLabel)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 33\n        }\n      }, label), children, !_.isNil(badgeFinalProps) && React.createElement(Badge, _extends({\n        backgroundColor: Colors.red30\n      }, badgeFinalProps, {\n        size: badgeSize,\n        containerStyle: [styles.badge, badgeFinalProps.containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 41\n        }\n      }))), React.createElement(Animated.View, {\n        style: [{\n          opacity: indicatorOpacity\n        }, styles.indicator, indicatorStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return TabBarItem;\n}(PureComponent);\n\nTabBarItem.propTypes = {\n  icon: _pt.number,\n  iconColor: _pt.string,\n  iconSelectedColor: _pt.string,\n  label: _pt.string,\n  maxLines: _pt.number,\n  selected: _pt.bool,\n  showDivider: _pt.bool,\n  width: _pt.number,\n  backgroundColor: _pt.string,\n  ignore: _pt.bool,\n  onPress: _pt.func,\n  uppercase: _pt.bool,\n  activeBackgroundColor: _pt.string,\n  accessibilityLabel: _pt.string,\n  testID: _pt.string\n};\nTabBarItem.displayName = 'TabBar.Item';\nTabBarItem.defaultProps = {\n  maxLines: 1\n};\nexport default asBaseComponent(TabBarItem);\nvar styles = StyleSheet.create({\n  contentContainer: {\n    paddingHorizontal: HORIZONTAL_PADDING\n  },\n  label: _objectSpread({\n    color: Colors.primary\n  }, Typography.text80),\n  selectedLabel: _objectSpread(_objectSpread({\n    color: Colors.primary\n  }, Typography.text80), {}, {\n    fontWeight: 'bold'\n  }),\n  divider: {\n    borderRightWidth: 1,\n    borderRightColor: Colors.dark70,\n    marginVertical: 14\n  },\n  indicator: {\n    backgroundColor: INDICATOR_BG_COLOR,\n    height: INDICATOR_HEIGHT,\n    marginHorizontal: HORIZONTAL_PADDING\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  },\n  icon: {\n    marginRight: 6\n  }\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/tabBar/TabBarItem.js"],"names":["_pt","_","React","PureComponent","LogService","Constants","Colors","Typography","Spacings","asBaseComponent","View","TouchableOpacity","Text","Image","Badge","INDICATOR_HEIGHT","INDICATOR_BG_COLOR","primary","HORIZONTAL_PADDING","isTablet","s7","s5","TabBarItem","props","onAnimateCompleted","setState","selected","onLayout","event","layout","nativeEvent","state","indicatorOpacity","Animated","Value","isEmpty","badge","deprecationWarn","component","oldProp","newProp","prevProps","animate","newValue","timing","toValue","easing","Easing","ease","duration","useNativeDriver","start","style","StyleSheet","flatten","flattenStyle","propName","prop","propObject","pick","getFlattenStyle","getStylePropValue","children","indicatorStyle","icon","iconColor","iconSelectedColor","label","labelStyle","badgeProps","uppercase","maxLines","selectedLabelStyle","showDivider","width","onPress","activeBackgroundColor","backgroundColor","testID","accessibilityLabel","iconTint","getColorFromStyle","styles","iconSelectedTint","selectedLabel","badgeFinalProps","badgeSize","get","flex","undefined","divider","contentContainer","isNil","red30","containerStyle","opacity","indicator","propTypes","number","string","bool","ignore","func","displayName","defaultProps","create","paddingHorizontal","color","text80","fontWeight","borderRightWidth","borderRightColor","dark70","marginVertical","height","marginHorizontal","marginLeft","s1","marginRight"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, Animated, Easing } from 'react-native';\nimport { LogService } from \"../../services\";\nimport { Constants } from \"../../helpers\";\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport Badge from \"../badge\";\nconst INDICATOR_HEIGHT = 2;\nconst INDICATOR_BG_COLOR = Colors.primary;\nconst HORIZONTAL_PADDING = Constants.isTablet ? Spacings.s7 : Spacings.s5;\n\n/**\n * @description: TabBar.Item, inner component of TabBar for configuring the tabs\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n * @extends: TouchableOpacity\n * @extendsLink: https://facebook.github.io/react-native/docs/touchableopacity\n */\nclass TabBarItem extends PureComponent {\n  static propTypes = {\n    /**\n       * icon of the tab\n       */\n    icon: _pt.number,\n\n    /**\n       * icon tint color\n       */\n    iconColor: _pt.string,\n\n    /**\n       * icon selected tint color\n       */\n    iconSelectedColor: _pt.string,\n\n    /**\n       * label of the tab\n       */\n    label: _pt.string,\n\n    /**\n       * maximum number of lines the label can break\n       */\n    maxLines: _pt.number,\n\n    /**\n       * whether the tab is selected or not\n       */\n    selected: _pt.bool,\n\n    /**\n       * whether the tab will have a divider on its right\n       */\n    showDivider: _pt.bool,\n\n    /**\n       * A fixed width for the item\n       */\n    width: _pt.number,\n\n    /**\n       * tabBar's background color\n       */\n    backgroundColor: _pt.string,\n\n    /**\n       * ignore of the tab\n       */\n    ignore: _pt.bool,\n\n    /**\n       * callback for when pressing a tab\n       */\n    onPress: _pt.func,\n\n    /**\n       * whether to change the text to uppercase\n       */\n    uppercase: _pt.bool,\n\n    /**\n       * Apply background color on press for TouchableOpacity\n       */\n    activeBackgroundColor: _pt.string,\n    accessibilityLabel: _pt.string,\n    testID: _pt.string\n  };\n  static displayName = 'TabBar.Item';\n  static defaultProps = {\n    maxLines: 1\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      indicatorOpacity: props.selected ? new Animated.Value(1) : new Animated.Value(0),\n      selected: props.selected\n    };\n\n    if (!_.isEmpty(props.badge)) {\n      LogService.deprecationWarn({\n        component: 'TabBarItem',\n        oldProp: 'badge',\n        newProp: 'badgeProps'\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected !== this.props.selected) {\n      this.animate(this.props.selected);\n    }\n  }\n\n  animate(newValue) {\n    Animated.timing(this.state.indicatorOpacity, {\n      toValue: newValue ? 1 : 0,\n      easing: Easing.ease,\n      duration: 150,\n      useNativeDriver: true\n    }).start(this.onAnimateCompleted);\n  }\n\n  onAnimateCompleted = () => {\n    this.setState({\n      selected: this.props.selected\n    });\n  };\n\n  getFlattenStyle(style) {\n    return StyleSheet.flatten(style);\n  }\n\n  getStylePropValue(flattenStyle, propName) {\n    let prop;\n\n    if (flattenStyle) {\n      const propObject = _.pick(flattenStyle, [propName]);\n\n      prop = propObject[propName];\n    }\n\n    return prop;\n  }\n\n  getColorFromStyle(style) {\n    const flattenStyle = this.getFlattenStyle(style);\n    return this.getStylePropValue(flattenStyle, 'color');\n  }\n\n  getLayout() {\n    return this.layout;\n  }\n\n  onLayout = event => {\n    this.layout = event.nativeEvent.layout;\n  };\n\n  render() {\n    const {\n      indicatorOpacity,\n      selected\n    } = this.state;\n    const {\n      children,\n      indicatorStyle,\n      icon,\n      iconColor,\n      iconSelectedColor,\n      label,\n      labelStyle,\n      badgeProps,\n      badge,\n      uppercase,\n      maxLines,\n      selectedLabelStyle,\n      showDivider,\n      width,\n      onPress,\n      activeBackgroundColor,\n      backgroundColor,\n      testID,\n      accessibilityLabel,\n      style\n    } = this.props;\n    const iconTint = iconColor || this.getColorFromStyle(labelStyle) || this.getColorFromStyle(styles.label);\n    const iconSelectedTint = iconSelectedColor || this.getColorFromStyle(selectedLabelStyle) || this.getColorFromStyle(styles.selectedLabel);\n    const badgeFinalProps = badgeProps || badge;\n\n    const badgeSize = _.get(badgeFinalProps, 'size', 'small');\n\n    return <TouchableOpacity activeOpacity={1} onPress={onPress} style={[width ? {\n      width\n    } : {\n      flex: 1\n    }, style]} testID={testID} backgroundColor={backgroundColor} activeBackgroundColor={activeBackgroundColor} onLayout={this.onLayout} accessibilityState={selected ? {\n      selected: true\n    } : undefined} accessibilityRole={'tab'} accessibilityLabel={accessibilityLabel}>\n        <View row flex center style={[showDivider && styles.divider, styles.contentContainer]}>\n          {icon && <Image style={!_.isEmpty(label) && styles.icon} source={icon} tintColor={selected ? iconSelectedTint : iconTint} />}\n          {!_.isEmpty(label) && <Text numberOfLines={maxLines} uppercase={uppercase} style={[labelStyle || styles.label, selected && (selectedLabelStyle || styles.selectedLabel)]}>\n              {label}\n            </Text>}\n          {children}\n          {!_.isNil(badgeFinalProps) && <Badge backgroundColor={Colors.red30} {...badgeFinalProps} size={badgeSize} containerStyle={[styles.badge, badgeFinalProps.containerStyle]} />}\n        </View>\n        <Animated.View style={[{\n        opacity: indicatorOpacity\n      }, styles.indicator, indicatorStyle]} />\n      </TouchableOpacity>;\n  }\n\n}\n\nexport default asBaseComponent(TabBarItem);\nconst styles = StyleSheet.create({\n  contentContainer: {\n    paddingHorizontal: HORIZONTAL_PADDING\n  },\n  label: {\n    color: Colors.primary,\n    ...Typography.text80\n  },\n  selectedLabel: {\n    color: Colors.primary,\n    ...Typography.text80,\n    fontWeight: 'bold'\n  },\n  divider: {\n    borderRightWidth: 1,\n    borderRightColor: Colors.dark70,\n    marginVertical: 14 // NOTE: will not cut long text at the top and bottom in iOS if TabBar not high enough\n\n  },\n  indicator: {\n    backgroundColor: INDICATOR_BG_COLOR,\n    height: INDICATOR_HEIGHT,\n    marginHorizontal: HORIZONTAL_PADDING\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  },\n  icon: {\n    marginRight: 6\n  }\n});"]},"metadata":{},"sourceType":"module"}