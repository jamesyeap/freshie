{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/tabBar/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Constants } from \"../../helpers\";\nimport { Colors } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport ScrollBar from \"../scrollBar\";\nimport TabBarItem from \"./TabBarItem\";\nvar MIN_TABS_FOR_SCROLL = 1;\nvar DEFAULT_BACKGROUND_COLOR = Colors.white;\nvar DEFAULT_HEIGHT = 48;\n\nvar TabBar = function (_Component) {\n  _inherits(TabBar, _Component);\n\n  var _super = _createSuper(TabBar);\n\n  function TabBar(_props) {\n    var _this;\n\n    _classCallCheck(this, TabBar);\n\n    _this = _super.call(this, _props);\n\n    _this.shouldBeMarked = function (index) {\n      return _this.state.currentIndex === index && !_this.isIgnored(index) && _this.childrenCount > 1;\n    };\n\n    _this.onItemPress = function (index, props) {\n      _this.updateIndicator(index);\n\n      setTimeout(function () {\n        if (!props.ignore) {\n          _this.onChangeIndex(index);\n        }\n\n        _this.onTabSelected(index);\n\n        _.invoke(props, 'onPress');\n      }, 0);\n    };\n\n    _this.onScroll = function (event) {\n      var contentOffset = event.nativeEvent.contentOffset;\n      _this.contentOffset = contentOffset;\n    };\n\n    _this.onContentSizeChange = function (width) {\n      if (_this.scrollContentWidth !== width) {\n        _this.scrollContentWidth = width;\n        var minTabsForScroll = _this.props.minTabsForScroll;\n        var minChildrenCount = minTabsForScroll || MIN_TABS_FOR_SCROLL;\n\n        if (_this.hasOverflow() && _this.childrenCount > minChildrenCount) {\n          _this.setState({\n            scrollEnabled: true\n          });\n        }\n      }\n    };\n\n    _this.state = {\n      scrollEnabled: false,\n      currentIndex: _props.selectedIndex || 0\n    };\n    _this.contentOffset = {\n      x: 0,\n      y: 0\n    };\n    _this.scrollBar = React.createRef();\n    _this.itemsRefs = [];\n    return _this;\n  }\n\n  _createClass(TabBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var prevChildrenCount = React.Children.count(prevProps.children);\n\n      if (this.childrenCount !== prevChildrenCount) {\n        this.updateIndicator(0);\n      }\n\n      var isIndexManuallyChanged = this.props.selectedIndex !== prevState.currentIndex && prevProps.selectedIndex !== this.props.selectedIndex;\n\n      if (isIndexManuallyChanged) {\n        this.updateIndicator(this.props.selectedIndex);\n      }\n    }\n  }, {\n    key: \"childrenCount\",\n    get: function get() {\n      return React.Children.count(this.props.children);\n    }\n  }, {\n    key: \"scrollContainerWidth\",\n    get: function get() {\n      return this.props.containerWidth || Constants.screenWidth;\n    }\n  }, {\n    key: \"isIgnored\",\n    value: function isIgnored(index) {\n      var child = React.Children.toArray(this.props.children)[index];\n      return _.get(child, 'props.ignore');\n    }\n  }, {\n    key: \"hasOverflow\",\n    value: function hasOverflow() {\n      return this.scrollContentWidth && this.scrollContentWidth > this.scrollContainerWidth;\n    }\n  }, {\n    key: \"updateIndicator\",\n    value: function updateIndicator(index) {\n      var _this2 = this;\n\n      if (index !== undefined && !this.isIgnored(index)) {\n        this.setState({\n          currentIndex: index\n        }, function () {\n          _this2.scrollToSelected();\n        });\n      }\n    }\n  }, {\n    key: \"scrollToSelected\",\n    value: function scrollToSelected() {\n      var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var childRef = this.itemsRefs[this.state.currentIndex];\n      var childLayout = childRef.getLayout();\n\n      if (childLayout && this.hasOverflow()) {\n        if (childLayout.x + childLayout.width - this.contentOffset.x > this.scrollContainerWidth) {\n          var _this$scrollBar, _this$scrollBar$curre;\n\n          (_this$scrollBar = this.scrollBar) == null ? void 0 : (_this$scrollBar$curre = _this$scrollBar.current) == null ? void 0 : _this$scrollBar$curre.scrollTo == null ? void 0 : _this$scrollBar$curre.scrollTo({\n            x: childLayout.x - this.scrollContainerWidth + childLayout.width,\n            y: 0,\n            animated: animated\n          });\n        } else if (childLayout.x - this.contentOffset.x < 0) {\n          var _this$scrollBar2, _this$scrollBar2$curr;\n\n          (_this$scrollBar2 = this.scrollBar) == null ? void 0 : (_this$scrollBar2$curr = _this$scrollBar2.current) == null ? void 0 : _this$scrollBar2$curr.scrollTo == null ? void 0 : _this$scrollBar2$curr.scrollTo({\n            x: childLayout.x,\n            y: 0,\n            animated: animated\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onChangeIndex\",\n    value: function onChangeIndex(index) {\n      _.invoke(this.props, 'onChangeIndex', index);\n    }\n  }, {\n    key: \"onTabSelected\",\n    value: function onTabSelected(index) {\n      _.invoke(this.props, 'onTabSelected', index);\n    }\n  }, {\n    key: \"renderTabBar\",\n    value: function renderTabBar() {\n      var _this$props = this.props,\n          height = _this$props.height,\n          _this$props$backgroun = _this$props.backgroundColor,\n          backgroundColor = _this$props$backgroun === void 0 ? DEFAULT_BACKGROUND_COLOR : _this$props$backgroun,\n          containerView = _this$props.containerView,\n          containerProps = _this$props.containerProps,\n          gradientMargins = _this$props.gradientMargins;\n      var scrollEnabled = this.state.scrollEnabled;\n      var containerHeight = height || DEFAULT_HEIGHT;\n      return React.createElement(ScrollBar, {\n        ref: this.scrollBar,\n        contentContainerStyle: styles.scrollBarContainer,\n        scrollEnabled: scrollEnabled,\n        scrollEventThrottle: 16,\n        onScroll: this.onScroll,\n        onContentSizeChange: this.onContentSizeChange,\n        height: containerHeight,\n        gradientColor: backgroundColor,\n        containerView: containerView,\n        containerProps: containerProps,\n        gradientMargins: gradientMargins,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 12\n        }\n      }, React.createElement(View, {\n        row: true,\n        style: [styles.tabBar, {\n          height: containerHeight,\n          backgroundColor: backgroundColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }\n      }, this.renderChildren()));\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      this.itemsRefs = [];\n      var _this$props2 = this.props,\n          indicatorStyle = _this$props2.indicatorStyle,\n          darkTheme = _this$props2.darkTheme;\n      var children = React.Children.map(this.props.children, function (child, index) {\n        var accessLabel = (child == null ? void 0 : child.props.accessibilityLabel) || child.props.label || '';\n        return React.cloneElement(child, {\n          indicatorStyle: indicatorStyle,\n          darkTheme: darkTheme,\n          selected: _this3.shouldBeMarked(index),\n          onPress: function onPress() {\n            _this3.onItemPress(index, child.props);\n          },\n          ref: function ref(r) {\n            _this3.itemsRefs[index] = r;\n          },\n          accessibilityLabel: accessLabel + \" \" + (index + 1) + \" out of \" + _this3.childrenCount\n        });\n      });\n      return children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          enableShadow = _this$props3.enableShadow,\n          style = _this$props3.style,\n          _this$props3$backgrou = _this$props3.backgroundColor,\n          backgroundColor = _this$props3$backgrou === void 0 ? DEFAULT_BACKGROUND_COLOR : _this$props3$backgrou;\n      return React.createElement(View, {\n        useSafeArea: true,\n        style: [styles.container, enableShadow && styles.containerShadow, style, {\n          height: undefined,\n          width: this.scrollContainerWidth,\n          backgroundColor: backgroundColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 7\n        }\n      }, this.renderTabBar());\n    }\n  }]);\n\n  return TabBar;\n}(Component);\n\nTabBar.propTypes = {\n  enableShadow: _pt.bool,\n  minTabsForScroll: _pt.number,\n  selectedIndex: _pt.number,\n  onChangeIndex: _pt.func,\n  onTabSelected: _pt.func,\n  height: _pt.number,\n  containerWidth: _pt.number,\n  backgroundColor: _pt.string,\n  darkTheme: _pt.bool,\n  children: _pt.node,\n  testID: _pt.string\n};\nTabBar.displayName = 'TabBar';\nTabBar.defaultProps = {\n  selectedIndex: 0\n};\nTabBar.Item = TabBarItem;\nexport default asBaseComponent(TabBar);\nvar styles = StyleSheet.create({\n  container: {\n    zIndex: 100\n  },\n  containerShadow: _objectSpread({}, Platform.select({\n    ios: {\n      shadowColor: Colors.dark10,\n      shadowOpacity: 0.05,\n      shadowRadius: 2,\n      shadowOffset: {\n        height: 6,\n        width: 0\n      }\n    },\n    android: {\n      elevation: 5,\n      backgroundColor: Colors.white\n    }\n  })),\n  tabBar: {\n    flex: 1\n  },\n  shadowImage: {\n    width: '100%'\n  },\n  scrollBarContainer: {\n    minWidth: '100%'\n  }\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/tabBar/index.js"],"names":["_pt","_","React","Component","Constants","Colors","asBaseComponent","View","ScrollBar","TabBarItem","MIN_TABS_FOR_SCROLL","DEFAULT_BACKGROUND_COLOR","white","DEFAULT_HEIGHT","TabBar","props","shouldBeMarked","index","state","currentIndex","isIgnored","childrenCount","onItemPress","updateIndicator","setTimeout","ignore","onChangeIndex","onTabSelected","invoke","onScroll","event","contentOffset","nativeEvent","onContentSizeChange","width","scrollContentWidth","minTabsForScroll","minChildrenCount","hasOverflow","setState","scrollEnabled","selectedIndex","x","y","scrollBar","createRef","itemsRefs","prevProps","prevState","prevChildrenCount","Children","count","children","isIndexManuallyChanged","containerWidth","screenWidth","child","toArray","get","scrollContainerWidth","undefined","scrollToSelected","animated","childRef","childLayout","getLayout","current","scrollTo","height","backgroundColor","containerView","containerProps","gradientMargins","containerHeight","styles","scrollBarContainer","tabBar","renderChildren","indicatorStyle","darkTheme","map","accessLabel","accessibilityLabel","label","cloneElement","selected","onPress","ref","r","enableShadow","style","container","containerShadow","renderTabBar","propTypes","bool","number","func","string","node","testID","displayName","defaultProps","Item","StyleSheet","create","zIndex","Platform","select","ios","shadowColor","dark10","shadowOpacity","shadowRadius","shadowOffset","android","elevation","flex","shadowImage","minWidth"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport { Colors } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport ScrollBar from \"../scrollBar\";\nimport TabBarItem from \"./TabBarItem\";\nconst MIN_TABS_FOR_SCROLL = 1;\nconst DEFAULT_BACKGROUND_COLOR = Colors.white;\nconst DEFAULT_HEIGHT = 48;\n\n/**\n * @description: TabBar Component\n * @modifiers: alignment, flex, padding, margin, background, typography, color (list of supported modifiers)\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n * @extends: ScrollBar\n * @extendsLink:https://github.com/wix/react-native-ui-lib/blob/master/src/components/scrollBar/index.js\n * @notes: This is screen width component.\n */\nclass TabBar extends Component {\n  static propTypes = {\n    /**\n       * Show Tab Bar bottom shadow\n       */\n    enableShadow: _pt.bool,\n\n    /**\n       * The minimum number of tabs to render in scroll mode\n       */\n    minTabsForScroll: _pt.number,\n\n    /**\n       * current selected tab index\n       */\n    selectedIndex: _pt.number,\n\n    /**\n       * callback for when index has change (will not be called on ignored items)\n       */\n    onChangeIndex: _pt.func,\n\n    /**\n       * callback for when tab selected\n       */\n    onTabSelected: _pt.func,\n\n    /**\n       * Tab Bar height\n       */\n    height: _pt.number,\n\n    /**\n       * Pass when container width is different than the screen width\n       */\n    containerWidth: _pt.number,\n\n    /**\n       * The background color\n       */\n    backgroundColor: _pt.string,\n\n    /**\n       * set darkTheme style\n       */\n    darkTheme: _pt.bool,\n    children: _pt.node,\n    testID: _pt.string\n  };\n  static displayName = 'TabBar';\n  static defaultProps = {\n    selectedIndex: 0\n  };\n  static Item = TabBarItem;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      scrollEnabled: false,\n      currentIndex: props.selectedIndex || 0\n    };\n    this.contentOffset = {\n      x: 0,\n      y: 0\n    };\n    this.scrollBar = React.createRef();\n    this.itemsRefs = [];\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevChildrenCount = React.Children.count(prevProps.children);\n\n    if (this.childrenCount !== prevChildrenCount) {\n      this.updateIndicator(0);\n    } // TODO: since we're implementing an uncontrolled component here, we should verify the selectedIndex has changed\n    // between this.props and nextProps (basically the meaning of selectedIndex should be initialIndex)\n\n\n    const isIndexManuallyChanged = this.props.selectedIndex !== prevState.currentIndex && prevProps.selectedIndex !== this.props.selectedIndex;\n\n    if (isIndexManuallyChanged) {\n      this.updateIndicator(this.props.selectedIndex);\n    }\n  } // generateStyles() {\n  //   this.styles = createStyles(this.props);\n  // }\n\n\n  get childrenCount() {\n    return React.Children.count(this.props.children);\n  }\n\n  get scrollContainerWidth() {\n    return this.props.containerWidth || Constants.screenWidth;\n  }\n\n  isIgnored(index) {\n    const child = React.Children.toArray(this.props.children)[index];\n    return _.get(child, 'props.ignore');\n  }\n\n  hasOverflow() {\n    return this.scrollContentWidth && this.scrollContentWidth > this.scrollContainerWidth;\n  }\n\n  shouldBeMarked = index => {\n    return this.state.currentIndex === index && !this.isIgnored(index) && this.childrenCount > 1;\n  };\n\n  updateIndicator(index) {\n    if (index !== undefined && !this.isIgnored(index)) {\n      this.setState({\n        currentIndex: index\n      }, () => {\n        this.scrollToSelected();\n      });\n    }\n  }\n\n  scrollToSelected(animated = true) {\n    const childRef = this.itemsRefs[this.state.currentIndex];\n    const childLayout = childRef.getLayout();\n\n    if (childLayout && this.hasOverflow()) {\n      if (childLayout.x + childLayout.width - this.contentOffset.x > this.scrollContainerWidth) {\n        this.scrollBar?.current?.scrollTo?.({\n          x: childLayout.x - this.scrollContainerWidth + childLayout.width,\n          y: 0,\n          animated\n        });\n      } else if (childLayout.x - this.contentOffset.x < 0) {\n        this.scrollBar?.current?.scrollTo?.({\n          x: childLayout.x,\n          y: 0,\n          animated\n        });\n      }\n    }\n  }\n\n  onChangeIndex(index) {\n    _.invoke(this.props, 'onChangeIndex', index);\n  }\n\n  onTabSelected(index) {\n    _.invoke(this.props, 'onTabSelected', index);\n  }\n\n  onItemPress = (index, props) => {\n    this.updateIndicator(index);\n    setTimeout(() => {\n      if (!props.ignore) {\n        this.onChangeIndex(index);\n      }\n\n      this.onTabSelected(index);\n\n      _.invoke(props, 'onPress');\n    }, 0);\n  };\n  onScroll = event => {\n    const {\n      contentOffset\n    } = event.nativeEvent;\n    this.contentOffset = contentOffset;\n  };\n  onContentSizeChange = width => {\n    if (this.scrollContentWidth !== width) {\n      this.scrollContentWidth = width;\n      const {\n        minTabsForScroll\n      } = this.props;\n      const minChildrenCount = minTabsForScroll || MIN_TABS_FOR_SCROLL;\n\n      if (this.hasOverflow() && this.childrenCount > minChildrenCount) {\n        this.setState({\n          scrollEnabled: true\n        });\n      }\n    }\n  };\n\n  renderTabBar() {\n    const {\n      height,\n      backgroundColor = DEFAULT_BACKGROUND_COLOR,\n      containerView,\n      containerProps,\n      gradientMargins\n    } = this.props;\n    const {\n      scrollEnabled\n    } = this.state;\n    const containerHeight = height || DEFAULT_HEIGHT;\n    return <ScrollBar // @ts-ignore\n    ref={this.scrollBar} contentContainerStyle={styles.scrollBarContainer} scrollEnabled={scrollEnabled} scrollEventThrottle={16} onScroll={this.onScroll} onContentSizeChange={this.onContentSizeChange} height={containerHeight} gradientColor={backgroundColor} containerView={containerView} containerProps={containerProps} gradientMargins={gradientMargins}>\n        <View row style={[styles.tabBar, {\n        height: containerHeight,\n        backgroundColor\n      }]}>\n          {this.renderChildren()}\n        </View>\n      </ScrollBar>;\n  }\n\n  renderChildren() {\n    this.itemsRefs = [];\n    const {\n      indicatorStyle,\n      darkTheme\n    } = this.props;\n    const children = React.Children.map(this.props.children, (child, index) => {\n      // @ts-ignore\n      const accessLabel = child?.props.accessibilityLabel || child.props.label || ''; //TODO: review it again, all types here should be correct. As from React.Children.map it gets definitely child: React.ReactNode, and React.cloneElement does not accept it.\n      // But seems it's work in a real life, so maybe it is just trouble with types compatibility\n      //@ts-ignore\n\n      return React.cloneElement(child, {\n        indicatorStyle,\n        darkTheme,\n        selected: this.shouldBeMarked(index),\n        onPress: () => {\n          // @ts-ignore\n          this.onItemPress(index, child.props);\n        },\n        ref: r => {\n          this.itemsRefs[index] = r;\n        },\n        accessibilityLabel: `${accessLabel} ${index + 1} out of ${this.childrenCount}`\n      });\n    });\n    return children;\n  }\n\n  render() {\n    const {\n      enableShadow,\n      style,\n      backgroundColor = DEFAULT_BACKGROUND_COLOR\n    } = this.props;\n    return (// @ts-ignore\n      <View useSafeArea style={[styles.container, enableShadow && styles.containerShadow, style, {\n        height: undefined,\n        width: this.scrollContainerWidth,\n        backgroundColor\n      }]}>\n        {this.renderTabBar()}\n      </View>\n    );\n  }\n\n}\n\nexport default asBaseComponent(TabBar);\nconst styles = StyleSheet.create({\n  container: {\n    zIndex: 100\n  },\n  containerShadow: { ...Platform.select({\n      ios: {\n        shadowColor: Colors.dark10,\n        shadowOpacity: 0.05,\n        shadowRadius: 2,\n        shadowOffset: {\n          height: 6,\n          width: 0\n        }\n      },\n      android: {\n        elevation: 5,\n        backgroundColor: Colors.white\n      }\n    })\n  },\n  tabBar: {\n    flex: 1\n  },\n  shadowImage: {\n    width: '100%'\n  },\n  scrollBarContainer: {\n    minWidth: '100%'\n  }\n});"]},"metadata":{},"sourceType":"module"}