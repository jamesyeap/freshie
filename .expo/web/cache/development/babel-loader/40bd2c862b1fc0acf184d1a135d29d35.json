{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/KeyboardAccessoryView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport KeyboardTrackingView from \"../KeyboardTracking/KeyboardTrackingView\";\nimport CustomKeyboardView from \"./CustomKeyboardView\";\nimport KeyboardUtils from \"./utils/KeyboardUtils\";\nvar IsIOS = Platform.OS === 'ios';\nvar IsAndroid = Platform.OS === 'android';\nvar IOS_SCROLL_BEHAVIORS = IsIOS ? {\n  NONE: NativeModules.KeyboardTrackingViewTempManager.KeyboardTrackingScrollBehaviorNone,\n  SCROLL_TO_BOTTOM_INVERTED_ONLY: NativeModules.KeyboardTrackingViewTempManager.KeyboardTrackingScrollBehaviorScrollToBottomInvertedOnly,\n  FIXED_OFFSET: NativeModules.KeyboardTrackingViewTempManager.KeyboardTrackingScrollBehaviorFixedOffset\n} : {};\n\nvar KeyboardAccessoryView = function (_Component) {\n  _inherits(KeyboardAccessoryView, _Component);\n\n  var _super = _createSuper(KeyboardAccessoryView);\n\n  function KeyboardAccessoryView(props) {\n    var _this;\n\n    _classCallCheck(this, KeyboardAccessoryView);\n\n    _this = _super.call(this, props);\n    _this.onContainerComponentHeightChanged = _this.onContainerComponentHeightChanged.bind(_assertThisInitialized(_this));\n    _this.processInitialProps = _this.processInitialProps.bind(_assertThisInitialized(_this));\n    _this.registerForKeyboardResignedEvent = _this.registerForKeyboardResignedEvent.bind(_assertThisInitialized(_this));\n    _this.registerAndroidBackHandler = _this.registerAndroidBackHandler.bind(_assertThisInitialized(_this));\n    _this.onAndroidBackPressed = _this.onAndroidBackPressed.bind(_assertThisInitialized(_this));\n\n    _this.registerForKeyboardResignedEvent();\n\n    _this.registerAndroidBackHandler();\n\n    return _this;\n  }\n\n  _createClass(KeyboardAccessoryView, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.customInputControllerEventsSubscriber) {\n        this.customInputControllerEventsSubscriber.remove();\n      }\n\n      if (IsAndroid) {\n        BackHandler.removeEventListener('hardwareBackPress', this.onAndroidBackPressed);\n      }\n    }\n  }, {\n    key: \"onContainerComponentHeightChanged\",\n    value: function onContainerComponentHeightChanged(event) {\n      var onHeightChanged = this.props.onHeightChanged;\n\n      if (onHeightChanged) {\n        onHeightChanged(event.nativeEvent.layout.height);\n      }\n    }\n  }, {\n    key: \"onAndroidBackPressed\",\n    value: function onAndroidBackPressed() {\n      var kbComponent = this.props.kbComponent;\n\n      if (kbComponent) {\n        KeyboardUtils.dismiss();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getIOSTrackingScrollBehavior\",\n    value: function getIOSTrackingScrollBehavior() {\n      var iOSScrollBehavior = this.props.iOSScrollBehavior;\n      var scrollBehavior = iOSScrollBehavior;\n\n      if (IsIOS && scrollBehavior === -1) {\n        scrollBehavior = KeyboardAccessoryView.iosScrollBehaviors.FIXED_OFFSET;\n      }\n\n      return scrollBehavior;\n    }\n  }, {\n    key: \"getNativeProps\",\n    value: function getNativeProps() {\n      return _regeneratorRuntime.async(function getNativeProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.trackingViewRef) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.trackingViewRef.getNativeProps());\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 4:\n              return _context.abrupt(\"return\", {});\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"registerForKeyboardResignedEvent\",\n    value: function registerForKeyboardResignedEvent() {\n      var onKeyboardResigned = this.props.onKeyboardResigned;\n      var eventEmitter = null;\n\n      if (IsIOS) {\n        if (NativeModules.CustomInputControllerTemp) {\n          eventEmitter = new NativeEventEmitter(NativeModules.CustomInputControllerTemp);\n        }\n      } else {\n        eventEmitter = DeviceEventEmitter;\n      }\n\n      if (eventEmitter !== null) {\n        this.customInputControllerEventsSubscriber = eventEmitter.addListener('kbdResigned', function () {\n          if (onKeyboardResigned) {\n            onKeyboardResigned();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"registerAndroidBackHandler\",\n    value: function registerAndroidBackHandler() {\n      if (IsAndroid) {\n        BackHandler.addEventListener('hardwareBackPress', this.onAndroidBackPressed);\n      }\n    }\n  }, {\n    key: \"processInitialProps\",\n    value: function processInitialProps() {\n      var kbInitialProps = this.props.kbInitialProps;\n\n      if (IsIOS && kbInitialProps && kbInitialProps.backgroundColor) {\n        var processedProps = _extends({}, kbInitialProps);\n\n        processedProps.backgroundColor = processColor(processedProps.backgroundColor);\n        return processedProps;\n      }\n\n      return kbInitialProps;\n    }\n  }, {\n    key: \"scrollToStart\",\n    value: function scrollToStart() {\n      if (this.trackingViewRef) {\n        this.trackingViewRef.scrollToStart();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          revealKeyboardInteractive = _this$props.revealKeyboardInteractive,\n          manageScrollView = _this$props.manageScrollView,\n          requiresSameParentToManageScrollView = _this$props.requiresSameParentToManageScrollView,\n          addBottomView = _this$props.addBottomView,\n          allowHitsOutsideBounds = _this$props.allowHitsOutsideBounds,\n          renderContent = _this$props.renderContent,\n          kbInputRef = _this$props.kbInputRef,\n          kbComponent = _this$props.kbComponent,\n          onItemSelected = _this$props.onItemSelected,\n          onRequestShowKeyboard = _this$props.onRequestShowKeyboard,\n          useSafeArea = _this$props.useSafeArea;\n      return React.createElement(KeyboardTrackingView, {\n        ref: function ref(r) {\n          return _this2.trackingViewRef = r;\n        },\n        style: styles.trackingToolbarContainer,\n        onLayout: this.onContainerComponentHeightChanged,\n        scrollBehavior: this.getIOSTrackingScrollBehavior(),\n        revealKeyboardInteractive: revealKeyboardInteractive,\n        manageScrollView: manageScrollView,\n        requiresSameParentToManageScrollView: requiresSameParentToManageScrollView,\n        addBottomView: addBottomView,\n        allowHitsOutsideBounds: allowHitsOutsideBounds,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 7\n        }\n      }, renderContent && renderContent(), React.createElement(CustomKeyboardView, {\n        inputRef: kbInputRef,\n        component: kbComponent,\n        initialProps: this.processInitialProps(),\n        onItemSelected: onItemSelected,\n        onRequestShowKeyboard: onRequestShowKeyboard,\n        useSafeArea: useSafeArea,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return KeyboardAccessoryView;\n}(Component);\n\nKeyboardAccessoryView.propTypes = {\n  renderContent: PropTypes.func,\n  onHeightChanged: PropTypes.func,\n  kbInputRef: PropTypes.object,\n  kbComponent: PropTypes.string,\n  kbInitialProps: PropTypes.object,\n  onItemSelected: PropTypes.func,\n  onRequestShowKeyboard: PropTypes.func,\n  onKeyboardResigned: PropTypes.func,\n  iOSScrollBehavior: PropTypes.number,\n  revealKeyboardInteractive: PropTypes.bool,\n  manageScrollView: PropTypes.bool,\n  requiresSameParentToManageScrollView: PropTypes.bool,\n  addBottomView: PropTypes.bool,\n  allowHitsOutsideBounds: PropTypes.bool,\n  useSafeArea: PropTypes.bool\n};\nKeyboardAccessoryView.iosScrollBehaviors = IOS_SCROLL_BEHAVIORS;\nKeyboardAccessoryView.defaultProps = {\n  iOSScrollBehavior: -1,\n  revealKeyboardInteractive: false,\n  manageScrollView: true,\n  requiresSameParentToManageScrollView: false,\n  addBottomView: false,\n  allowHitsOutsideBounds: false\n};\nvar styles = StyleSheet.create({\n  trackingToolbarContainer: _objectSpread({}, Platform.select({\n    ios: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n      top: undefined\n    })\n  }))\n});\nexport default KeyboardAccessoryView;","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/KeyboardAccessoryView.js"],"names":["React","Component","PropTypes","KeyboardTrackingView","CustomKeyboardView","KeyboardUtils","IsIOS","Platform","OS","IsAndroid","IOS_SCROLL_BEHAVIORS","NONE","NativeModules","KeyboardTrackingViewTempManager","KeyboardTrackingScrollBehaviorNone","SCROLL_TO_BOTTOM_INVERTED_ONLY","KeyboardTrackingScrollBehaviorScrollToBottomInvertedOnly","FIXED_OFFSET","KeyboardTrackingScrollBehaviorFixedOffset","KeyboardAccessoryView","props","onContainerComponentHeightChanged","bind","processInitialProps","registerForKeyboardResignedEvent","registerAndroidBackHandler","onAndroidBackPressed","customInputControllerEventsSubscriber","remove","BackHandler","removeEventListener","event","onHeightChanged","nativeEvent","layout","height","kbComponent","dismiss","iOSScrollBehavior","scrollBehavior","iosScrollBehaviors","trackingViewRef","getNativeProps","onKeyboardResigned","eventEmitter","CustomInputControllerTemp","NativeEventEmitter","DeviceEventEmitter","addListener","addEventListener","kbInitialProps","backgroundColor","processedProps","processColor","scrollToStart","revealKeyboardInteractive","manageScrollView","requiresSameParentToManageScrollView","addBottomView","allowHitsOutsideBounds","renderContent","kbInputRef","onItemSelected","onRequestShowKeyboard","useSafeArea","r","styles","trackingToolbarContainer","getIOSTrackingScrollBehavior","propTypes","func","object","string","number","bool","defaultProps","StyleSheet","create","select","ios","absoluteFillObject","top","undefined"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  Platform,\n  NativeModules,\n  NativeEventEmitter,\n  DeviceEventEmitter,\n  processColor,\n  BackHandler\n} from 'react-native';\nimport KeyboardTrackingView from '../KeyboardTracking/KeyboardTrackingView';\nimport CustomKeyboardView from './CustomKeyboardView';\nimport KeyboardUtils from './utils/KeyboardUtils';\n\nconst IsIOS = Platform.OS === 'ios';\nconst IsAndroid = Platform.OS === 'android';\n\nconst IOS_SCROLL_BEHAVIORS = IsIOS\n  ? {\n    NONE: NativeModules.KeyboardTrackingViewTempManager.KeyboardTrackingScrollBehaviorNone,\n    SCROLL_TO_BOTTOM_INVERTED_ONLY:\n        NativeModules.KeyboardTrackingViewTempManager.KeyboardTrackingScrollBehaviorScrollToBottomInvertedOnly,\n    FIXED_OFFSET: NativeModules.KeyboardTrackingViewTempManager.KeyboardTrackingScrollBehaviorFixedOffset\n  }\n  : {};\n\n/**\n * @description: View that allows replacing the default keyboard with other components\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardInput/KeyboardInputViewScreen.js\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/KeyboardAccessoryView/KeyboardAccessoryView.gif?raw=true\n */\nclass KeyboardAccessoryView extends Component {\n  static propTypes = {\n    /**\n     * Content to be rendered above the keyboard\n     */\n    renderContent: PropTypes.func,\n    /**\n     * A callback for when the height is changed\n     */\n    onHeightChanged: PropTypes.func,\n    /**\n     * iOS only.\n     * The reference to the actual text input (or the keyboard may not reset when instructed to, etc.).\n     * This is required.\n     */\n    kbInputRef: PropTypes.object,\n    /**\n     * The keyboard ID (the componentID sent to KeyboardRegistry)\n     */\n    kbComponent: PropTypes.string,\n    /**\n     * The props that will be sent to the KeyboardComponent\n     */\n    kbInitialProps: PropTypes.object,\n    /**\n     * Callback that will be called when an item on the keyboard has been pressed.\n     */\n    onItemSelected: PropTypes.func,\n    /**\n     * Callback that will be called if KeyboardRegistry.requestShowKeyboard is called.\n     */\n    onRequestShowKeyboard: PropTypes.func,\n    /**\n     * Callback that will be called once the keyboard has been closed\n     */\n    onKeyboardResigned: PropTypes.func,\n    /**\n     * iOS only.\n     * The scrolling behavior, use KeyboardAccessoryView.iosScrollBehaviors.X where X is:\n     * NONE, SCROLL_TO_BOTTOM_INVERTED_ONLY or FIXED_OFFSET\n     *\n     * default: FIXED_OFFSET\n     */\n    iOSScrollBehavior: PropTypes.number,\n    /**\n     * iOS only.\n     * Show the keyboard on a negative scroll\n     *\n     * default: false\n     */\n    revealKeyboardInteractive: PropTypes.bool,\n    /**\n     * iOS only.\n     * Set to false to turn off inset management and manage it yourself\n     *\n     * default: true\n     */\n    manageScrollView: PropTypes.bool,\n    /**\n     * iOS only.\n     * Set to true manageScrollView is set to true and still does not work,\n     * it means that the ScrollView found is the wrong one and you'll have\n     * to have the KeyboardAccessoryView and the ScrollView as siblings\n     * and set this to true\n     *\n     * default: false\n     */\n    requiresSameParentToManageScrollView: PropTypes.bool,\n    /**\n     * iOS only.\n     * Add a (white) SafeArea view beneath the KeyboardAccessoryView\n     *\n     * default: false\n     */\n    addBottomView: PropTypes.bool,\n    /**\n     * iOS only.\n     * Allow hitting sub-views that are placed beyond the view bounds\n     *\n     * default: false\n     */\n    allowHitsOutsideBounds: PropTypes.bool,\n\n    /**\n     * iOS only.\n     * Whether or not to handle SafeArea\n     * default: true\n     */\n    useSafeArea: PropTypes.bool\n  };\n\n  static iosScrollBehaviors = IOS_SCROLL_BEHAVIORS;\n\n  static defaultProps = {\n    iOSScrollBehavior: -1,\n    revealKeyboardInteractive: false,\n    manageScrollView: true,\n    requiresSameParentToManageScrollView: false,\n    addBottomView: false,\n    allowHitsOutsideBounds: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.onContainerComponentHeightChanged = this.onContainerComponentHeightChanged.bind(this);\n    this.processInitialProps = this.processInitialProps.bind(this);\n    this.registerForKeyboardResignedEvent = this.registerForKeyboardResignedEvent.bind(this);\n    this.registerAndroidBackHandler = this.registerAndroidBackHandler.bind(this);\n    this.onAndroidBackPressed = this.onAndroidBackPressed.bind(this);\n\n    this.registerForKeyboardResignedEvent();\n    this.registerAndroidBackHandler();\n  }\n\n  componentWillUnmount() {\n    if (this.customInputControllerEventsSubscriber) {\n      this.customInputControllerEventsSubscriber.remove();\n    }\n    if (IsAndroid) {\n      BackHandler.removeEventListener('hardwareBackPress', this.onAndroidBackPressed);\n    }\n  }\n\n  onContainerComponentHeightChanged(event) {\n    const {onHeightChanged} = this.props;\n\n    if (onHeightChanged) {\n      onHeightChanged(event.nativeEvent.layout.height);\n    }\n  }\n\n  onAndroidBackPressed() {\n    const {kbComponent} = this.props;\n\n    if (kbComponent) {\n      KeyboardUtils.dismiss();\n      return true;\n    }\n    return false;\n  }\n\n  getIOSTrackingScrollBehavior() {\n    const {iOSScrollBehavior} = this.props;\n\n    let scrollBehavior = iOSScrollBehavior;\n    if (IsIOS && scrollBehavior === -1) {\n      scrollBehavior = KeyboardAccessoryView.iosScrollBehaviors.FIXED_OFFSET;\n    }\n    return scrollBehavior;\n  }\n\n  async getNativeProps() {\n    if (this.trackingViewRef) {\n      return await this.trackingViewRef.getNativeProps();\n    }\n    return {};\n  }\n\n  registerForKeyboardResignedEvent() {\n    const {onKeyboardResigned} = this.props;\n    let eventEmitter = null;\n    if (IsIOS) {\n      if (NativeModules.CustomInputControllerTemp) {\n        eventEmitter = new NativeEventEmitter(NativeModules.CustomInputControllerTemp);\n      }\n    } else {\n      eventEmitter = DeviceEventEmitter;\n    }\n\n    if (eventEmitter !== null) {\n      this.customInputControllerEventsSubscriber = eventEmitter.addListener('kbdResigned', () => {\n        if (onKeyboardResigned) {\n          onKeyboardResigned();\n        }\n      });\n    }\n  }\n\n  registerAndroidBackHandler() {\n    if (IsAndroid) {\n      BackHandler.addEventListener('hardwareBackPress', this.onAndroidBackPressed);\n    }\n  }\n\n  processInitialProps() {\n    const {kbInitialProps} = this.props;\n\n    if (IsIOS && kbInitialProps && kbInitialProps.backgroundColor) {\n      const processedProps = Object.assign({}, kbInitialProps);\n      processedProps.backgroundColor = processColor(processedProps.backgroundColor);\n      return processedProps;\n    }\n\n    return kbInitialProps;\n  }\n\n  scrollToStart() {\n    if (this.trackingViewRef) {\n      this.trackingViewRef.scrollToStart();\n    }\n  }\n\n  render() {\n    const {\n      revealKeyboardInteractive,\n      manageScrollView,\n      requiresSameParentToManageScrollView,\n      addBottomView,\n      allowHitsOutsideBounds,\n      renderContent,\n      kbInputRef,\n      kbComponent,\n      onItemSelected,\n      onRequestShowKeyboard,\n      useSafeArea\n    } = this.props;\n\n    return (\n      <KeyboardTrackingView\n        ref={r => (this.trackingViewRef = r)}\n        style={styles.trackingToolbarContainer}\n        onLayout={this.onContainerComponentHeightChanged}\n        scrollBehavior={this.getIOSTrackingScrollBehavior()}\n        revealKeyboardInteractive={revealKeyboardInteractive}\n        manageScrollView={manageScrollView}\n        requiresSameParentToManageScrollView={requiresSameParentToManageScrollView}\n        addBottomView={addBottomView}\n        allowHitsOutsideBounds={allowHitsOutsideBounds}\n      >\n        {renderContent && renderContent()}\n        <CustomKeyboardView\n          inputRef={kbInputRef}\n          component={kbComponent}\n          initialProps={this.processInitialProps()}\n          onItemSelected={onItemSelected}\n          onRequestShowKeyboard={onRequestShowKeyboard}\n          useSafeArea={useSafeArea}\n        />\n      </KeyboardTrackingView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  trackingToolbarContainer: {\n    ...Platform.select({\n      ios: {\n        ...StyleSheet.absoluteFillObject,\n        top: undefined\n      }\n    })\n  }\n});\n\nexport default KeyboardAccessoryView;\n"]},"metadata":{},"sourceType":"module"}