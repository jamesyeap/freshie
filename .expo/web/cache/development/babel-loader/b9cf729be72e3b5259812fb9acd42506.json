{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/panningViews/panListenerView.js\";\nvar _excluded = [\"children\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport asPanViewConsumer from \"./asPanViewConsumer\";\nimport PanningProvider from \"./panningProvider\";\nimport View from \"../view\";\nvar DEFAULT_DIRECTIONS = [PanningProvider.Directions.UP, PanningProvider.Directions.DOWN, PanningProvider.Directions.LEFT, PanningProvider.Directions.RIGHT];\nvar DEFAULT_PAN_SENSITIVITY = 5;\nvar DEFAULT_SWIPE_VELOCITY = 1.8;\n\nvar PanListenerView = function (_PureComponent) {\n  _inherits(PanListenerView, _PureComponent);\n\n  var _super = _createSuper(PanListenerView);\n\n  function PanListenerView(props) {\n    var _this;\n\n    _classCallCheck(this, PanListenerView);\n\n    _this = _super.call(this, props);\n\n    _this.yes = function () {\n      return true;\n    };\n\n    _this.no = function () {\n      return false;\n    };\n\n    _this.shouldPan = function (_e, gestureState) {\n      var dy = gestureState.dy,\n          dx = gestureState.dx;\n      var _this$props = _this.props,\n          directions = _this$props.directions,\n          _this$props$panSensit = _this$props.panSensitivity,\n          panSensitivity = _this$props$panSensit === void 0 ? DEFAULT_PAN_SENSITIVITY : _this$props$panSensit;\n      return Boolean(directions && (directions.includes(PanningProvider.Directions.UP) && dy < -panSensitivity || directions.includes(PanningProvider.Directions.DOWN) && dy > panSensitivity || directions.includes(PanningProvider.Directions.LEFT) && dx < -panSensitivity || directions.includes(PanningProvider.Directions.RIGHT) && dx > panSensitivity));\n    };\n\n    _this.handlePanStart = function () {\n      _.invoke(_this.props, 'onPanStart');\n\n      _.invoke(_this.props.context, 'onPanStart');\n    };\n\n    _this.getSwipeDirection = function (_ref) {\n      var vx = _ref.vx,\n          vy = _ref.vy;\n      var _this$props$swipeVelo = _this.props.swipeVelocitySensitivity,\n          swipeVelocitySensitivity = _this$props$swipeVelo === void 0 ? DEFAULT_SWIPE_VELOCITY : _this$props$swipeVelo;\n      return _this.getDirectionsOverSensitivity(vx, vy, swipeVelocitySensitivity);\n    };\n\n    _this.getDragDirection = function (_ref2) {\n      var dx = _ref2.dx,\n          dy = _ref2.dy;\n      return _this.getDirectionsOverSensitivity(dx, dy, 0);\n    };\n\n    _this.getDirectionsOverSensitivity = function (x, y, sensitivity) {\n      var _this$props$direction = _this.props.directions,\n          directions = _this$props$direction === void 0 ? DEFAULT_DIRECTIONS : _this$props$direction;\n      var selectedDirections = {};\n      var selectedAmounts = {};\n\n      if (directions.includes(PanningProvider.Directions.LEFT) && x < -sensitivity) {\n        selectedDirections.x = PanningProvider.Directions.LEFT;\n        selectedAmounts.x = x;\n      } else if (directions.includes(PanningProvider.Directions.RIGHT) && x > sensitivity) {\n        selectedDirections.x = PanningProvider.Directions.RIGHT;\n        selectedAmounts.x = x;\n      }\n\n      if (directions.includes(PanningProvider.Directions.UP) && y < -sensitivity) {\n        selectedDirections.y = PanningProvider.Directions.UP;\n        selectedAmounts.y = y;\n      } else if (directions.includes(PanningProvider.Directions.DOWN) && y > sensitivity) {\n        selectedDirections.y = PanningProvider.Directions.DOWN;\n        selectedAmounts.y = y;\n      }\n\n      return {\n        selectedDirections: selectedDirections,\n        selectedAmounts: selectedAmounts\n      };\n    };\n\n    _this.panResultHasValue = function (panResult) {\n      return Boolean(panResult && (panResult.selectedDirections.x || panResult.selectedDirections.y));\n    };\n\n    _this.handlePanMove = function (_e, gestureState) {\n      var _this$props2 = _this.props,\n          onSwipe = _this$props2.onSwipe,\n          onDrag = _this$props2.onDrag,\n          context = _this$props2.context;\n      var hasSwipe = !_.isUndefined(onSwipe);\n      var hasDrag = !_.isUndefined(onDrag);\n      var hasContext = !_.isUndefined(context);\n      var panResult;\n\n      if (hasSwipe || hasContext) {\n        panResult = _this.getSwipeDirection(gestureState);\n      }\n\n      if (_this.panResultHasValue(panResult)) {\n        var data = {\n          directions: panResult.selectedDirections,\n          velocities: panResult.selectedAmounts\n        };\n\n        _.invoke(_this.props, 'onSwipe', data);\n\n        _.invoke(context, 'onSwipe', data);\n      } else if (hasDrag || hasContext) {\n        panResult = _this.getDragDirection(gestureState);\n\n        if (_this.panResultHasValue(panResult)) {\n          var _data = {\n            directions: panResult.selectedDirections,\n            deltas: panResult.selectedAmounts\n          };\n\n          _.invoke(_this.props, 'onDrag', _data);\n\n          _.invoke(context, 'onDrag', _data);\n        }\n      }\n    };\n\n    _this.handlePanRelease = function () {\n      _.invoke(_this.props, 'onPanRelease');\n\n      _.invoke(_this.props.context, 'onPanRelease');\n    };\n\n    _this.handlePanTerminate = function () {\n      _.invoke(_this.props, 'onPanTerminated');\n\n      _.invoke(_this.props.context, 'onPanTerminated');\n    };\n\n    var isClickable = props.isClickable;\n    _this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: isClickable ? _this.shouldPan : _this.yes,\n      onMoveShouldSetPanResponder: _this.shouldPan,\n      onStartShouldSetPanResponderCapture: _this.no,\n      onMoveShouldSetPanResponderCapture: _this.no,\n      onPanResponderGrant: _this.handlePanStart,\n      onPanResponderMove: _this.handlePanMove,\n      onPanResponderRelease: _this.handlePanRelease,\n      onPanResponderTerminate: _this.handlePanTerminate\n    });\n    return _this;\n  }\n\n  _createClass(PanListenerView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          others = _objectWithoutProperties(_this$props3, _excluded);\n\n      return React.createElement(View, _extends({}, others, this.panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 12\n        }\n      }), children);\n    }\n  }]);\n\n  return PanListenerView;\n}(PureComponent);\n\nPanListenerView.propTypes = {\n  onDrag: _pt.func,\n  onSwipe: _pt.func,\n  onPanStart: _pt.func,\n  onPanRelease: _pt.func,\n  onPanTerminated: _pt.func,\n  directions: _pt.oneOfType([_pt.array, _pt.array]),\n  panSensitivity: _pt.number,\n  swipeVelocitySensitivity: _pt.number,\n  isClickable: _pt.bool,\n  context: _pt.shape({\n    onDrag: _pt.func,\n    onSwipe: _pt.func,\n    onPanStart: _pt.func,\n    onPanRelease: _pt.func,\n    onPanTerminated: _pt.func\n  })\n};\nPanListenerView.displayName = 'PanListenerView';\nPanListenerView.defaultProps = {\n  directions: DEFAULT_DIRECTIONS,\n  panSensitivity: DEFAULT_PAN_SENSITIVITY,\n  swipeVelocitySensitivity: DEFAULT_SWIPE_VELOCITY\n};\nexport default asPanViewConsumer(PanListenerView);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/panningViews/panListenerView.js"],"names":["_pt","_","React","PureComponent","asPanViewConsumer","PanningProvider","View","DEFAULT_DIRECTIONS","Directions","UP","DOWN","LEFT","RIGHT","DEFAULT_PAN_SENSITIVITY","DEFAULT_SWIPE_VELOCITY","PanListenerView","props","yes","no","shouldPan","_e","gestureState","dy","dx","directions","panSensitivity","Boolean","includes","handlePanStart","invoke","context","getSwipeDirection","vx","vy","swipeVelocitySensitivity","getDirectionsOverSensitivity","getDragDirection","x","y","sensitivity","selectedDirections","selectedAmounts","panResultHasValue","panResult","handlePanMove","onSwipe","onDrag","hasSwipe","isUndefined","hasDrag","hasContext","data","velocities","deltas","handlePanRelease","handlePanTerminate","isClickable","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponderCapture","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","children","others","panHandlers","propTypes","func","onPanStart","onPanRelease","onPanTerminated","oneOfType","array","number","bool","shape","displayName","defaultProps"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { PanResponder } from 'react-native';\nimport asPanViewConsumer from \"./asPanViewConsumer\";\nimport PanningProvider from \"./panningProvider\";\nimport View from \"../view\";\nconst DEFAULT_DIRECTIONS = [PanningProvider.Directions.UP, PanningProvider.Directions.DOWN, PanningProvider.Directions.LEFT, PanningProvider.Directions.RIGHT];\nconst DEFAULT_PAN_SENSITIVITY = 5;\nconst DEFAULT_SWIPE_VELOCITY = 1.8;\n/**\n * @description: PanListenerView component created to making listening to swipe and drag events easier\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanListenerScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanListenerView/PanListenerView.gif?raw=true\n */\n\nclass PanListenerView extends PureComponent {\n  static propTypes = {\n    /**\n         * This is were you will get notified when a drag occurs\n         * onDrag = ({directions, deltas}) => {...}\n         * directions - array of directions\n         * deltas - array of deltas (same length and order as directions)\n         * Both arrays will have {x, y} - if no x or y drag has occurred this value will be undefined\n         */\n    onDrag: _pt.func,\n\n    /**\n         * This is were you will get notified when a swipe occurs\n         * onSwipe = ({directions, velocities}) => {...}\n         * directions - array of directions\n         * velocities - array of velocities (same length and order as directions)\n         * Both arrays will have {x, y} - if no x or y swipe has occurred this value will be undefined\n         */\n    onSwipe: _pt.func,\n\n    /**\n         * This is were you will get notified when the pan starts\n         */\n    onPanStart: _pt.func,\n\n    /**\n         * This is were you will get notified when the pan ends\n         * The user has released all touches while this view is the responder.\n         * This typically means a gesture has succeeded\n         */\n    onPanRelease: _pt.func,\n\n    /**\n         * This is were you will get notified when the pan ends\n         * Another component has become the responder,\n         * so this gesture should be cancelled\n         */\n    onPanTerminated: _pt.func,\n\n    /**\n         * The directions of the allowed pan (default allows all directions)\n         * Types: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)\n         */\n    directions: _pt.oneOfType([_pt.array, _pt.array]),\n\n    /**\n         * The sensitivity beyond which a pan is no longer considered a single click (default is 5)\n         */\n    panSensitivity: _pt.number,\n\n    /**\n         * The sensitivity beyond which a pan is no longer considered a drag, but a swipe (default is 1.8)\n         * Note: a pan would have to occur (i.e. the panSensitivity has already been surpassed)\n         */\n    swipeVelocitySensitivity: _pt.number,\n\n    /**\n         * Is there a view that is clickable (has onPress etc.) in the PanListenerView.\n         * This can affect the panability of this component.\n         */\n    isClickable: _pt.bool,\n    context: _pt.shape({\n      /**\n           * This is were you will get notified when a drag occurs\n           * onDrag = ({directions, deltas}) => {...}\n           * directions - array of directions\n           * deltas - array of deltas (same length and order as directions)\n           * Both arrays will have {x, y} - if no x or y drag has occurred this value will be undefined\n           */\n      onDrag: _pt.func,\n\n      /**\n           * This is were you will get notified when a swipe occurs\n           * onSwipe = ({directions, velocities}) => {...}\n           * directions - array of directions\n           * velocities - array of velocities (same length and order as directions)\n           * Both arrays will have {x, y} - if no x or y swipe has occurred this value will be undefined\n           */\n      onSwipe: _pt.func,\n\n      /**\n           * This is were you will get notified when the pan starts\n           */\n      onPanStart: _pt.func,\n\n      /**\n           * This is were you will get notified when the pan ends\n           * The user has released all touches while this view is the responder.\n           * This typically means a gesture has succeeded\n           */\n      onPanRelease: _pt.func,\n\n      /**\n           * This is were you will get notified when the pan ends\n           * Another component has become the responder,\n           * so this gesture should be cancelled\n           */\n      onPanTerminated: _pt.func\n    })\n  };\n  static displayName = 'PanListenerView';\n  static defaultProps = {\n    directions: DEFAULT_DIRECTIONS,\n    panSensitivity: DEFAULT_PAN_SENSITIVITY,\n    swipeVelocitySensitivity: DEFAULT_SWIPE_VELOCITY\n  };\n\n  constructor(props) {\n    super(props);\n    const {\n      isClickable\n    } = props;\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: isClickable ? this.shouldPan : this.yes,\n      onMoveShouldSetPanResponder: this.shouldPan,\n      onStartShouldSetPanResponderCapture: this.no,\n      onMoveShouldSetPanResponderCapture: this.no,\n      onPanResponderGrant: this.handlePanStart,\n      onPanResponderMove: this.handlePanMove,\n      onPanResponderRelease: this.handlePanRelease,\n      onPanResponderTerminate: this.handlePanTerminate\n    });\n  }\n\n  yes = () => {\n    return true;\n  };\n  no = () => {\n    return false;\n  };\n  shouldPan = (_e, gestureState) => {\n    // return true if user is swiping, return false if it's a single click\n    const {\n      dy,\n      dx\n    } = gestureState;\n    const {\n      directions,\n      panSensitivity = DEFAULT_PAN_SENSITIVITY\n    } = this.props;\n    return Boolean(directions && (directions.includes(PanningProvider.Directions.UP) && dy < -panSensitivity || directions.includes(PanningProvider.Directions.DOWN) && dy > panSensitivity || directions.includes(PanningProvider.Directions.LEFT) && dx < -panSensitivity || directions.includes(PanningProvider.Directions.RIGHT) && dx > panSensitivity));\n  };\n  handlePanStart = () => {\n    _.invoke(this.props, 'onPanStart');\n\n    _.invoke(this.props.context, 'onPanStart');\n  };\n  getSwipeDirection = ({\n    vx,\n    vy\n  }) => {\n    const {\n      swipeVelocitySensitivity = DEFAULT_SWIPE_VELOCITY\n    } = this.props;\n    return this.getDirectionsOverSensitivity(vx, vy, swipeVelocitySensitivity);\n  };\n  getDragDirection = ({\n    dx,\n    dy\n  }) => {\n    return this.getDirectionsOverSensitivity(dx, dy, 0);\n  };\n  getDirectionsOverSensitivity = (x, y, sensitivity) => {\n    const {\n      directions = DEFAULT_DIRECTIONS\n    } = this.props;\n    const selectedDirections = {};\n    const selectedAmounts = {};\n\n    if (directions.includes(PanningProvider.Directions.LEFT) && x < -sensitivity) {\n      selectedDirections.x = PanningProvider.Directions.LEFT;\n      selectedAmounts.x = x;\n    } else if (directions.includes(PanningProvider.Directions.RIGHT) && x > sensitivity) {\n      selectedDirections.x = PanningProvider.Directions.RIGHT;\n      selectedAmounts.x = x;\n    }\n\n    if (directions.includes(PanningProvider.Directions.UP) && y < -sensitivity) {\n      selectedDirections.y = PanningProvider.Directions.UP;\n      selectedAmounts.y = y;\n    } else if (directions.includes(PanningProvider.Directions.DOWN) && y > sensitivity) {\n      selectedDirections.y = PanningProvider.Directions.DOWN;\n      selectedAmounts.y = y;\n    }\n\n    return {\n      selectedDirections,\n      selectedAmounts\n    };\n  };\n  panResultHasValue = panResult => {\n    return Boolean(panResult && (panResult.selectedDirections.x || panResult.selectedDirections.y));\n  };\n  handlePanMove = (_e, gestureState) => {\n    const {\n      onSwipe,\n      onDrag,\n      context\n    } = this.props;\n    const hasSwipe = !_.isUndefined(onSwipe);\n    const hasDrag = !_.isUndefined(onDrag);\n    const hasContext = !_.isUndefined(context);\n    let panResult;\n\n    if (hasSwipe || hasContext) {\n      panResult = this.getSwipeDirection(gestureState);\n    }\n\n    if (this.panResultHasValue(panResult)) {\n      // @ts-ignore\n      const data = {\n        directions: panResult.selectedDirections,\n        velocities: panResult.selectedAmounts\n      };\n\n      _.invoke(this.props, 'onSwipe', data);\n\n      _.invoke(context, 'onSwipe', data);\n    } else if (hasDrag || hasContext) {\n      panResult = this.getDragDirection(gestureState);\n\n      if (this.panResultHasValue(panResult)) {\n        const data = {\n          directions: panResult.selectedDirections,\n          deltas: panResult.selectedAmounts\n        };\n\n        _.invoke(this.props, 'onDrag', data);\n\n        _.invoke(context, 'onDrag', data);\n      }\n    }\n  };\n  handlePanRelease = () => {\n    _.invoke(this.props, 'onPanRelease');\n\n    _.invoke(this.props.context, 'onPanRelease');\n  };\n  handlePanTerminate = () => {\n    _.invoke(this.props, 'onPanTerminated');\n\n    _.invoke(this.props.context, 'onPanTerminated');\n  };\n\n  render() {\n    const {\n      children,\n      ...others\n    } = this.props;\n    return <View {...others} {...this.panResponder.panHandlers}>\n        {children}\n      </View>;\n  }\n\n}\n\nexport default asPanViewConsumer(PanListenerView);"]},"metadata":{},"sourceType":"module"}