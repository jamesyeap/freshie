{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"blurView\", \"enableModalBlur\", \"visible\"];\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/modal/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNModal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { BlurViewPackage } from \"../../optionalDependencies\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TopBar, { ModalTopBarProps } from \"./TopBar\";\nimport View from \"../../components/view\";\nvar BlurView = BlurViewPackage == null ? void 0 : BlurViewPackage.BlurView;\nexport { ModalTopBarProps };\n\nvar Modal = function (_Component) {\n  _inherits(Modal, _Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _super.call(this, props);\n\n    if (props.enableModalBlur && !BlurView) {\n      console.error(\"RNUILib Modal's \\\"enableModalBlur\\\" prop requires installing \\\"@react-native-community/blur\\\" dependency\");\n    }\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"renderTouchableOverlay\",\n    value: function renderTouchableOverlay() {\n      var _this$props = this.props,\n          testID = _this$props.testID,\n          overlayBackgroundColor = _this$props.overlayBackgroundColor,\n          onBackgroundPress = _this$props.onBackgroundPress,\n          _this$props$accessibi = _this$props.accessibilityLabel,\n          accessibilityLabel = _this$props$accessibi === void 0 ? 'Dismiss' : _this$props$accessibi;\n\n      if (_.isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n        var isScreenReaderEnabled = Constants.accessibility.isScreenReaderEnabled;\n        var accessibilityProps = isScreenReaderEnabled ? {\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          accessibilityRole: 'button'\n        } : undefined;\n        return React.createElement(View, {\n          useSafeArea: isScreenReaderEnabled,\n          style: !isScreenReaderEnabled && [styles.touchableOverlay, {\n            backgroundColor: overlayBackgroundColor\n          }],\n          testID: testID,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 9\n          }\n        }, React.createElement(TouchableWithoutFeedback, _extends({}, accessibilityProps, {\n          onPress: onBackgroundPress,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }\n        }), React.createElement(View, {\n          style: isScreenReaderEnabled ? styles.accessibleOverlayView : styles.overlayView,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }\n        })));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          blurView = _this$props2.blurView,\n          enableModalBlur = _this$props2.enableModalBlur,\n          visible = _this$props2.visible,\n          others = _objectWithoutProperties(_this$props2, _excluded);\n\n      var defaultContainer = enableModalBlur && Constants.isIOS && BlurView ? BlurView : View;\n      var Container = blurView ? blurView : defaultContainer;\n      return React.createElement(RNModal, _extends({\n        visible: Boolean(visible)\n      }, others, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 12\n        }\n      }), React.createElement(Container, {\n        style: {\n          flex: 1\n        },\n        blurType: \"light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, this.renderTouchableOverlay(), this.props.children));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.propTypes = {\n  enableModalBlur: _pt.bool,\n  blurView: _pt.element,\n  onBackgroundPress: _pt.func,\n  overlayBackgroundColor: _pt.string,\n  testID: _pt.string,\n  accessibilityLabel: _pt.string\n};\nModal.displayName = 'Modal';\nvar styles = StyleSheet.create({\n  touchableOverlay: _objectSpread({}, StyleSheet.absoluteFillObject),\n  overlayView: {\n    flex: 1\n  },\n  accessibleOverlayView: {\n    height: 50,\n    width: '100%'\n  }\n});\nModal.TopBar = TopBar;\nexport default asBaseComponent(Modal);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/modal/index.js"],"names":["_pt","_","React","Component","BlurViewPackage","Constants","asBaseComponent","TopBar","ModalTopBarProps","View","BlurView","Modal","props","enableModalBlur","console","error","testID","overlayBackgroundColor","onBackgroundPress","accessibilityLabel","isFunction","isScreenReaderEnabled","accessibility","accessibilityProps","accessible","accessibilityRole","undefined","styles","touchableOverlay","backgroundColor","accessibleOverlayView","overlayView","blurView","visible","others","defaultContainer","isIOS","Container","Boolean","flex","renderTouchableOverlay","children","propTypes","bool","element","func","string","displayName","StyleSheet","create","absoluteFillObject","height","width"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { StyleSheet, Modal as RNModal, TouchableWithoutFeedback } from 'react-native';\nimport { BlurViewPackage } from \"../../optionalDependencies\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TopBar, { ModalTopBarProps } from \"./TopBar\";\nimport View from \"../../components/view\";\nconst BlurView = BlurViewPackage?.BlurView;\nexport { ModalTopBarProps };\n\n/**\n * @description: Component that present content on top of the invoking screen\n * @extends: Modal\n * @extendsLink: https://facebook.github.io/react-native/docs/modal.html\n * @gif: https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx\n */\nclass Modal extends Component {\n  static propTypes = {\n    /**\n         * Blurs the modal background when transparent (iOS only)\n         */\n    enableModalBlur: _pt.bool,\n\n    /**\n         * A custom view to use as a BlueView instead of the default one\n         */\n    blurView: _pt.element,\n\n    /**\n         * allow dismissing a modal when clicking on its background\n         */\n    onBackgroundPress: _pt.func,\n\n    /**\n         * the background color of the overlay\n         */\n    overlayBackgroundColor: _pt.string,\n\n    /**\n         * The modal's end-to-end test identifier\n         */\n    testID: _pt.string,\n\n    /**\n         * Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\n         * label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n         */\n    accessibilityLabel: _pt.string\n  };\n  static displayName = 'Modal';\n\n  constructor(props) {\n    super(props);\n\n    if (props.enableModalBlur && !BlurView) {\n      console.error(`RNUILib Modal's \"enableModalBlur\" prop requires installing \"@react-native-community/blur\" dependency`);\n    }\n  }\n\n  renderTouchableOverlay() {\n    const {\n      testID,\n      overlayBackgroundColor,\n      onBackgroundPress,\n      accessibilityLabel = 'Dismiss'\n    } = this.props;\n\n    if (_.isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n      const isScreenReaderEnabled = Constants.accessibility.isScreenReaderEnabled;\n      const accessibilityProps = isScreenReaderEnabled ? {\n        accessible: true,\n        accessibilityLabel,\n        accessibilityRole: 'button'\n      } : undefined;\n      return (// @ts-ignore\n        <View useSafeArea={isScreenReaderEnabled} style={!isScreenReaderEnabled && [styles.touchableOverlay, {\n          backgroundColor: overlayBackgroundColor\n        }]} testID={testID}>\n          {\n            /*\n             // @ts-ignore */\n          }\n          <TouchableWithoutFeedback {...accessibilityProps} onPress={onBackgroundPress}>\n            <View style={isScreenReaderEnabled ? styles.accessibleOverlayView : styles.overlayView} />\n          </TouchableWithoutFeedback>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    const {\n      blurView,\n      enableModalBlur,\n      visible,\n      ...others\n    } = this.props;\n    const defaultContainer = enableModalBlur && Constants.isIOS && BlurView ? BlurView : View;\n    const Container = blurView ? blurView : defaultContainer;\n    return <RNModal visible={Boolean(visible)} {...others}>\n        <Container style={{\n        flex: 1\n      }} blurType=\"light\">\n          {this.renderTouchableOverlay()}\n          {this.props.children}\n        </Container>\n      </RNModal>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  touchableOverlay: { ...StyleSheet.absoluteFillObject\n  },\n  overlayView: {\n    flex: 1\n  },\n  accessibleOverlayView: {\n    height: 50,\n    width: '100%'\n  }\n});\nModal.TopBar = TopBar;\nexport default asBaseComponent(Modal);"]},"metadata":{},"sourceType":"module"}