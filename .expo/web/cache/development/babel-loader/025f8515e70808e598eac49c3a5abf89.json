{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"activeOpacity\", \"backgroundColor\", \"containerStyle\", \"hitSlop\", \"onPress\", \"testId\", \"testID\"];\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/badge/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { View as AnimatableView } from 'react-native-animatable';\nimport { extractAccessibilityProps, extractAnimationProps } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { BorderRadiuses, Colors, Spacings, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\nimport View from \"../view\";\nvar LABEL_FORMATTER_VALUES = [1, 2, 3, 4];\nexport var BADGE_SIZES;\n\n(function (BADGE_SIZES) {\n  BADGE_SIZES[BADGE_SIZES[\"pimpleSmall\"] = 6] = \"pimpleSmall\";\n  BADGE_SIZES[BADGE_SIZES[\"pimpleBig\"] = 10] = \"pimpleBig\";\n  BADGE_SIZES[BADGE_SIZES[\"pimpleHuge\"] = 14] = \"pimpleHuge\";\n  BADGE_SIZES[BADGE_SIZES[\"small\"] = 16] = \"small\";\n  BADGE_SIZES[BADGE_SIZES[\"default\"] = 20] = \"default\";\n  BADGE_SIZES[BADGE_SIZES[\"large\"] = 24] = \"large\";\n})(BADGE_SIZES || (BADGE_SIZES = {}));\n\nvar Badge = function (_PureComponent) {\n  _inherits(Badge, _PureComponent);\n\n  var _super = _createSuper(Badge);\n\n  function Badge(props) {\n    var _this;\n\n    _classCallCheck(this, Badge);\n\n    _this = _super.call(this, props);\n    _this.styles = createStyles(props);\n\n    if (props.testId) {\n      console.warn('Badge prop \\'testId\\' is deprecated. Please use RN \\'testID\\' prop instead.');\n    }\n\n    return _this;\n  }\n\n  _createClass(Badge, [{\n    key: \"size\",\n    get: function get() {\n      return this.props.size || 'default';\n    }\n  }, {\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var _this$props = this.props,\n          onPress = _this$props.onPress,\n          icon = _this$props.icon,\n          label = _this$props.label;\n      return _objectSpread(_objectSpread({\n        accessibilityLabel: icon ? 'badge' : label ? label + \" new items\" : undefined\n      }, extractAccessibilityProps(this.props)), {}, {\n        accessible: !_.isUndefined(label),\n        accessibilityRole: onPress ? 'button' : icon ? 'image' : 'text'\n      });\n    }\n  }, {\n    key: \"isSmallBadge\",\n    value: function isSmallBadge() {\n      return this.size === 'small';\n    }\n  }, {\n    key: \"getBadgeSizeStyle\",\n    value: function getBadgeSizeStyle() {\n      var _this$props2 = this.props,\n          borderWidth = _this$props2.borderWidth,\n          icon = _this$props2.icon,\n          customElement = _this$props2.customElement;\n      var label = this.getFormattedLabel();\n      var badgeHeight = _.isNumber(this.size) ? this.size : BADGE_SIZES[this.size];\n      var style = {\n        paddingHorizontal: this.isSmallBadge() ? 4 : 6,\n        height: badgeHeight,\n        minWidth: badgeHeight\n      };\n\n      if (icon && label) {\n        style.paddingRight = 6;\n        style.paddingLeft = 4;\n        style.height = Spacings.s5;\n\n        if (borderWidth) {\n          style.height += borderWidth * 2;\n        }\n\n        return style;\n      }\n\n      if (customElement) {\n        return style;\n      }\n\n      var isPimple = label === undefined;\n\n      if (isPimple || icon) {\n        style.paddingHorizontal = 0;\n        style.minWidth = undefined;\n        style.width = style.height;\n\n        if (borderWidth) {\n          style.height += borderWidth * 2;\n          style.width += borderWidth * 2;\n        }\n\n        return style;\n      }\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n        style.minWidth += borderWidth * 2;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"getFormattedLabel\",\n    value: function getFormattedLabel() {\n      var _this$props3 = this.props,\n          labelFormatterLimit = _this$props3.labelFormatterLimit,\n          label = _this$props3.label;\n\n      if (_.isNaN(label)) {\n        return label;\n      }\n\n      if (LABEL_FORMATTER_VALUES.includes(labelFormatterLimit)) {\n        var maxLabelNumber = Math.pow(10, labelFormatterLimit) - 1;\n        var formattedLabel = label;\n\n        if (formattedLabel > maxLabelNumber) {\n          formattedLabel = maxLabelNumber + \"+\";\n        }\n\n        return formattedLabel;\n      } else {\n        return label;\n      }\n    }\n  }, {\n    key: \"getBorderStyling\",\n    value: function getBorderStyling() {\n      var _this$props4 = this.props,\n          borderWidth = _this$props4.borderWidth,\n          borderColor = _this$props4.borderColor,\n          borderRadius = _this$props4.borderRadius;\n      var style = {};\n\n      if (borderWidth) {\n        style.borderWidth = borderWidth;\n        style.borderColor = borderColor;\n      }\n\n      if (borderRadius) {\n        style.borderRadius = borderRadius;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      var _this$props5 = this.props,\n          labelStyle = _this$props5.labelStyle,\n          label = _this$props5.label;\n\n      if (label) {\n        return React.createElement(Text, {\n          style: [this.styles.label, this.isSmallBadge() && this.styles.labelSmall, labelStyle],\n          allowFontScaling: false,\n          numberOfLines: 1,\n          testID: \"badge\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 14\n          }\n        }, this.getFormattedLabel());\n      }\n    }\n  }, {\n    key: \"renderCustomElement\",\n    value: function renderCustomElement() {\n      var customElement = this.props.customElement;\n      return customElement;\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      var _this$props6 = this.props,\n          icon = _this$props6.icon,\n          iconStyle = _this$props6.iconStyle,\n          iconProps = _this$props6.iconProps,\n          borderColor = _this$props6.borderColor,\n          label = _this$props6.label;\n      var flex = label ? 0 : 1;\n      return icon && React.createElement(Image, _extends({\n        source: icon,\n        resizeMode: \"contain\",\n        borderColor: borderColor\n      }, iconProps, {\n        style: _objectSpread({\n          flex: flex\n        }, iconStyle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 20\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          activeOpacity = _this$props7.activeOpacity,\n          backgroundColor = _this$props7.backgroundColor,\n          containerStyle = _this$props7.containerStyle,\n          hitSlop = _this$props7.hitSlop,\n          onPress = _this$props7.onPress,\n          testId = _this$props7.testId,\n          testID = _this$props7.testID,\n          others = _objectWithoutProperties(_this$props7, _excluded);\n\n      var backgroundStyle = backgroundColor && {\n        backgroundColor: backgroundColor\n      };\n      var sizeStyle = this.getBadgeSizeStyle();\n      var borderStyle = this.getBorderStyling();\n      var animationProps = extractAnimationProps();\n      var Container = !_.isEmpty(animationProps) ? AnimatableView : onPress ? TouchableOpacity : View;\n\n      if (!_.isEmpty(animationProps)) {\n        console.warn('Badge component will soon stop supporting animationProps.' + 'Please wrap your Badge component with your own animation component, such as Animatable.View');\n      }\n\n      return React.createElement(View, _extends({\n        style: containerStyle\n      }, others, {\n        backgroundColor: undefined,\n        borderWidth: undefined\n      }, this.getAccessibilityProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 7\n        }\n      }), React.createElement(Container, _extends({\n        testID: testID || testId,\n        pointerEvents: 'none',\n        style: [sizeStyle, this.styles.badge, borderStyle, backgroundStyle],\n        onPress: onPress,\n        activeOpacity: activeOpacity,\n        hitSlop: hitSlop\n      }, animationProps, {\n        row: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 9\n        }\n      }), this.renderCustomElement(), this.renderIcon(), this.renderLabel()));\n    }\n  }]);\n\n  return Badge;\n}(PureComponent);\n\nBadge.propTypes = {\n  label: _pt.string,\n  backgroundColor: _pt.string,\n  size: _pt.oneOfType([_pt.any, _pt.number]),\n  onPress: _pt.func,\n  borderWidth: _pt.number,\n  borderRadius: _pt.number,\n  iconStyle: _pt.object,\n  iconProps: _pt.object,\n  customElement: _pt.element,\n  testId: _pt.string\n};\nBadge.displayName = 'Badge';\n\nfunction createStyles(props) {\n  var styles = StyleSheet.create({\n    badge: {\n      alignSelf: 'flex-start',\n      borderRadius: BorderRadiuses.br100,\n      backgroundColor: !props.icon || props.customElement ? Colors.primary : undefined,\n      alignItems: 'center',\n      justifyContent: 'center',\n      overflow: 'hidden'\n    },\n    label: _objectSpread(_objectSpread({}, Typography.text90), {}, {\n      color: Colors.white,\n      backgroundColor: 'transparent'\n    }),\n    labelSmall: _objectSpread(_objectSpread({}, Typography.text100), {}, {\n      lineHeight: undefined\n    })\n  });\n  return styles;\n}\n\nexport { Badge };\nexport default asBaseComponent(Badge);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/badge/index.js"],"names":["_pt","_","React","PureComponent","View","AnimatableView","extractAccessibilityProps","extractAnimationProps","asBaseComponent","BorderRadiuses","Colors","Spacings","Typography","TouchableOpacity","Image","LABEL_FORMATTER_VALUES","BADGE_SIZES","Badge","props","styles","createStyles","testId","console","warn","size","onPress","icon","label","accessibilityLabel","undefined","accessible","isUndefined","accessibilityRole","borderWidth","customElement","getFormattedLabel","badgeHeight","isNumber","style","paddingHorizontal","isSmallBadge","height","minWidth","paddingRight","paddingLeft","s5","isPimple","width","labelFormatterLimit","isNaN","includes","maxLabelNumber","formattedLabel","borderColor","borderRadius","labelStyle","labelSmall","iconStyle","iconProps","flex","activeOpacity","backgroundColor","containerStyle","hitSlop","testID","others","backgroundStyle","sizeStyle","getBadgeSizeStyle","borderStyle","getBorderStyling","animationProps","Container","isEmpty","getAccessibilityProps","badge","renderCustomElement","renderIcon","renderLabel","propTypes","string","oneOfType","any","number","func","object","element","displayName","StyleSheet","create","alignSelf","br100","primary","alignItems","justifyContent","overflow","text90","color","white","text100","lineHeight"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, Text } from 'react-native';\nimport { View as AnimatableView } from 'react-native-animatable';\nimport { extractAccessibilityProps, extractAnimationProps } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { BorderRadiuses, Colors, Spacings, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\nimport View from \"../view\";\nconst LABEL_FORMATTER_VALUES = [1, 2, 3, 4]; // TODO: depreciate enum badge sizes, use only number for size\n\nexport let BADGE_SIZES;\n\n(function (BADGE_SIZES) {\n  BADGE_SIZES[BADGE_SIZES[\"pimpleSmall\"] = 6] = \"pimpleSmall\";\n  BADGE_SIZES[BADGE_SIZES[\"pimpleBig\"] = 10] = \"pimpleBig\";\n  BADGE_SIZES[BADGE_SIZES[\"pimpleHuge\"] = 14] = \"pimpleHuge\";\n  BADGE_SIZES[BADGE_SIZES[\"small\"] = 16] = \"small\";\n  BADGE_SIZES[BADGE_SIZES[\"default\"] = 20] = \"default\";\n  BADGE_SIZES[BADGE_SIZES[\"large\"] = 24] = \"large\";\n})(BADGE_SIZES || (BADGE_SIZES = {}));\n\n/**\n * @description: Round colored badge, typically used to show a number\n * @extends: Animatable.View\n * @extendsLink: https://github.com/oblador/react-native-animatable\n * @image: https://user-images.githubusercontent.com/33805983/34480753-df7a868a-efb6-11e7-9072-80f5c110a4f3.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BadgesScreen.tsx\n */\nclass Badge extends PureComponent {\n  static propTypes = {\n    /**\n         * Text to show inside the badge.\n         * Not passing a label (undefined) will present a pimple badge.\n         */\n    label: _pt.string,\n\n    /**\n         * Color of the badge background\n         */\n    backgroundColor: _pt.string,\n\n    /**\n         * the badge size (default, small)\n         */\n    size: _pt.oneOfType([_pt.any, _pt.number]),\n\n    /**\n         * Press handler\n         */\n    onPress: _pt.func,\n\n    /**\n         * width of border around the badge\n         */\n    borderWidth: _pt.number,\n\n    /**\n         * radius of border around the badge\n         */\n    borderRadius: _pt.number,\n\n    /**\n         * Additional styling to badge icon\n         */\n    iconStyle: _pt.object,\n\n    /**\n         * Additional props passed to icon\n         */\n    iconProps: _pt.object,\n\n    /**\n         * Custom element to render instead of an icon\n         */\n    customElement: _pt.element,\n\n    /**\n         * Use to identify the badge in tests\n         */\n    testId: _pt.string\n  };\n  static displayName = 'Badge';\n\n  constructor(props) {\n    super(props);\n    this.styles = createStyles(props);\n\n    if (props.testId) {\n      console.warn('Badge prop \\'testId\\' is deprecated. Please use RN \\'testID\\' prop instead.');\n    }\n  }\n\n  get size() {\n    return this.props.size || 'default';\n  }\n\n  getAccessibilityProps() {\n    const {\n      onPress,\n      icon,\n      label\n    } = this.props;\n    return {\n      accessibilityLabel: icon ? 'badge' : label ? `${label} new items` : undefined,\n      ...extractAccessibilityProps(this.props),\n      accessible: !_.isUndefined(label),\n      accessibilityRole: onPress ? 'button' : icon ? 'image' : 'text'\n    };\n  }\n\n  isSmallBadge() {\n    return this.size === 'small';\n  }\n\n  getBadgeSizeStyle() {\n    const {\n      borderWidth,\n      icon,\n      customElement\n    } = this.props;\n    const label = this.getFormattedLabel();\n    const badgeHeight = _.isNumber(this.size) ? this.size : BADGE_SIZES[this.size];\n    const style = {\n      paddingHorizontal: this.isSmallBadge() ? 4 : 6,\n      height: badgeHeight,\n      minWidth: badgeHeight\n    };\n\n    if (icon && label) {\n      style.paddingRight = 6;\n      style.paddingLeft = 4;\n      style.height = Spacings.s5;\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n      }\n\n      return style;\n    }\n\n    if (customElement) {\n      return style;\n    }\n\n    const isPimple = label === undefined;\n\n    if (isPimple || icon) {\n      style.paddingHorizontal = 0;\n      style.minWidth = undefined;\n      style.width = style.height;\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n        style.width += borderWidth * 2;\n      }\n\n      return style;\n    }\n\n    if (borderWidth) {\n      style.height += borderWidth * 2;\n      style.minWidth += borderWidth * 2;\n    }\n\n    return style;\n  }\n\n  getFormattedLabel() {\n    const {\n      labelFormatterLimit,\n      label\n    } = this.props;\n\n    if (_.isNaN(label)) {\n      return label;\n    }\n\n    if (LABEL_FORMATTER_VALUES.includes(labelFormatterLimit)) {\n      const maxLabelNumber = 10 ** labelFormatterLimit - 1;\n      let formattedLabel = label;\n\n      if (formattedLabel > maxLabelNumber) {\n        formattedLabel = `${maxLabelNumber}+`;\n      }\n\n      return formattedLabel;\n    } else {\n      return label;\n    }\n  }\n\n  getBorderStyling() {\n    const {\n      borderWidth,\n      borderColor,\n      borderRadius\n    } = this.props;\n    const style = {};\n\n    if (borderWidth) {\n      style.borderWidth = borderWidth;\n      style.borderColor = borderColor;\n    }\n\n    if (borderRadius) {\n      style.borderRadius = borderRadius;\n    }\n\n    return style;\n  }\n\n  renderLabel() {\n    const {\n      labelStyle,\n      label\n    } = this.props;\n\n    if (label) {\n      return <Text style={[this.styles.label, this.isSmallBadge() && this.styles.labelSmall, labelStyle]} allowFontScaling={false} numberOfLines={1} testID=\"badge\">\n          {this.getFormattedLabel()}\n        </Text>;\n    }\n  }\n\n  renderCustomElement() {\n    const {\n      customElement\n    } = this.props;\n    return customElement;\n  }\n\n  renderIcon() {\n    const {\n      icon,\n      iconStyle,\n      iconProps,\n      borderColor,\n      label\n    } = this.props;\n    const flex = label ? 0 : 1;\n    return icon && <Image source={icon} resizeMode=\"contain\" //@ts-ignore\n    borderColor={borderColor} {...iconProps} style={{\n      flex,\n      ...iconStyle\n    }} />;\n  }\n\n  render() {\n    // TODO: remove testId after deprecation\n    const {\n      activeOpacity,\n      backgroundColor,\n      containerStyle,\n      hitSlop,\n      onPress,\n      testId,\n      testID,\n      ...others\n    } = this.props;\n    const backgroundStyle = backgroundColor && {\n      backgroundColor\n    };\n    const sizeStyle = this.getBadgeSizeStyle();\n    const borderStyle = this.getBorderStyling();\n    const animationProps = extractAnimationProps();\n    const Container = !_.isEmpty(animationProps) ? AnimatableView : onPress ? TouchableOpacity : View;\n\n    if (!_.isEmpty(animationProps)) {\n      console.warn('Badge component will soon stop supporting animationProps.' + 'Please wrap your Badge component with your own animation component, such as Animatable.View');\n    }\n\n    return (// The extra View wrapper is to break badge's flex-ness\n      // @ts-ignore\n      <View style={containerStyle} {...others} backgroundColor={undefined} // @ts-expect-error\n      borderWidth={undefined} {...this.getAccessibilityProps()}>\n        <Container testID={testID || testId} pointerEvents={'none'} style={[sizeStyle, this.styles.badge, borderStyle, backgroundStyle]} onPress={onPress} activeOpacity={activeOpacity} hitSlop={hitSlop} {...animationProps} row>\n          {this.renderCustomElement()}\n          {this.renderIcon()}\n          {this.renderLabel()}\n        </Container>\n      </View>\n    );\n  }\n\n}\n\nfunction createStyles(props) {\n  const styles = StyleSheet.create({\n    badge: {\n      alignSelf: 'flex-start',\n      borderRadius: BorderRadiuses.br100,\n      backgroundColor: !props.icon || props.customElement ? Colors.primary : undefined,\n      alignItems: 'center',\n      justifyContent: 'center',\n      overflow: 'hidden'\n    },\n    label: { ...Typography.text90,\n      color: Colors.white,\n      backgroundColor: 'transparent'\n    },\n    labelSmall: { ...Typography.text100,\n      lineHeight: undefined\n    }\n  });\n  return styles;\n}\n\nexport { Badge }; // For tests\n\nexport default asBaseComponent(Badge);"]},"metadata":{},"sourceType":"module"}