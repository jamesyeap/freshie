{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"validate\", \"validateOnBlur\", \"validateOnChange\", \"validateOnStart\", \"onChangeValidity\"];\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport _ from 'lodash';\nimport * as Presenter from \"./Presenter\";\nimport { useDidUpdate } from \"../../hooks\";\nexport default function useFieldState(_ref) {\n  var validate = _ref.validate,\n      validateOnBlur = _ref.validateOnBlur,\n      validateOnChange = _ref.validateOnChange,\n      validateOnStart = _ref.validateOnStart,\n      onChangeValidity = _ref.onChangeValidity,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(props.value),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFocused = _useState4[0],\n      setIsFocused = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isValid = _useState6[0],\n      setIsValid = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      failingValidatorIndex = _useState8[0],\n      setFailingValidatorIndex = _useState8[1];\n\n  useEffect(function () {\n    if (validateOnStart) {\n      validateField();\n    }\n  }, []);\n  useDidUpdate(function () {\n    onChangeValidity == null ? void 0 : onChangeValidity(isValid);\n  }, [isValid]);\n  var validateField = useCallback(function () {\n    var valueToValidate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : value;\n\n    var _Presenter$validate = Presenter.validate(valueToValidate, validate),\n        _Presenter$validate2 = _slicedToArray(_Presenter$validate, 2),\n        _isValid = _Presenter$validate2[0],\n        _failingValidatorIndex = _Presenter$validate2[1];\n\n    setIsValid(_isValid);\n    setFailingValidatorIndex(_failingValidatorIndex);\n  }, [value, validate]);\n  var onFocus = useCallback(function () {\n    setIsFocused(true);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _.invoke.apply(_, [props, 'onFocus'].concat(args));\n  }, [props.onFocus]);\n  var onBlur = useCallback(function () {\n    setIsFocused(false);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _.invoke.apply(_, [props, 'onBlur'].concat(args));\n\n    if (validateOnBlur) {\n      validateField();\n    }\n  }, [props.onBlur, validateOnBlur, validateField]);\n  var onChangeText = useCallback(function (text) {\n    setValue(text);\n\n    _.invoke(props, 'onChangeText', text);\n\n    if (validateOnChange) {\n      validateField(text);\n    }\n  }, [props.onChangeText, validateOnChange, validateField]);\n  var fieldState = useMemo(function () {\n    return {\n      value: value,\n      hasValue: !_.isEmpty(value),\n      isValid: isValid,\n      isFocused: isFocused,\n      failingValidatorIndex: failingValidatorIndex\n    };\n  }, [value, isFocused, isValid, failingValidatorIndex]);\n  return {\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChangeText: onChangeText,\n    fieldState: fieldState\n  };\n}","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TextField/useFieldState.js"],"names":["React","useCallback","useState","useEffect","useMemo","_","Presenter","useDidUpdate","useFieldState","validate","validateOnBlur","validateOnChange","validateOnStart","onChangeValidity","props","value","setValue","isFocused","setIsFocused","isValid","setIsValid","undefined","failingValidatorIndex","setFailingValidatorIndex","validateField","valueToValidate","_isValid","_failingValidatorIndex","onFocus","args","invoke","onBlur","onChangeText","text","fieldState","hasValue","isEmpty"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,KAAKC,SAAZ;AACA,SAASC,YAAT;AACA,eAAe,SAASC,aAAT,OAOZ;AAAA,MANDC,QAMC,QANDA,QAMC;AAAA,MALDC,cAKC,QALDA,cAKC;AAAA,MAJDC,gBAIC,QAJDA,gBAIC;AAAA,MAHDC,eAGC,QAHDA,eAGC;AAAA,MAFDC,gBAEC,QAFDA,gBAEC;AAAA,MADEC,KACF;;AACD,kBAA0BZ,QAAQ,CAACY,KAAK,CAACC,KAAP,CAAlC;AAAA;AAAA,MAAOA,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAkCd,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOe,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA8BhB,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOiB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA0DlB,QAAQ,CAACmB,SAAD,CAAlE;AAAA;AAAA,MAAOC,qBAAP;AAAA,MAA8BC,wBAA9B;;AACApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,eAAJ,EAAqB;AACnBY,MAAAA,aAAa;AACd;AACF,GAJQ,EAIN,EAJM,CAAT;AAKAjB,EAAAA,YAAY,CAAC,YAAM;AACjBM,IAAAA,gBAAgB,QAAhB,YAAAA,gBAAgB,CAAGM,OAAH,CAAhB;AACD,GAFW,EAET,CAACA,OAAD,CAFS,CAAZ;AAGA,MAAMK,aAAa,GAAGvB,WAAW,CAAC,YAA6B;AAAA,QAA5BwB,eAA4B,uEAAVV,KAAU;;AAC7D,8BAA2CT,SAAS,CAACG,QAAV,CAAmBgB,eAAnB,EAAoChB,QAApC,CAA3C;AAAA;AAAA,QAAOiB,QAAP;AAAA,QAAiBC,sBAAjB;;AACAP,IAAAA,UAAU,CAACM,QAAD,CAAV;AACAH,IAAAA,wBAAwB,CAACI,sBAAD,CAAxB;AACD,GAJgC,EAI9B,CAACZ,KAAD,EAAQN,QAAR,CAJ8B,CAAjC;AAKA,MAAMmB,OAAO,GAAG3B,WAAW,CAAC,YAAa;AACvCiB,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AADuC,sCAATW,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAGvCxB,IAAAA,CAAC,CAACyB,MAAF,OAAAzB,CAAC,GAAQS,KAAR,EAAe,SAAf,SAA6Be,IAA7B,EAAD;AACD,GAJ0B,EAIxB,CAACf,KAAK,CAACc,OAAP,CAJwB,CAA3B;AAKA,MAAMG,MAAM,GAAG9B,WAAW,CAAC,YAAa;AACtCiB,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AADsC,uCAATW,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAGtCxB,IAAAA,CAAC,CAACyB,MAAF,OAAAzB,CAAC,GAAQS,KAAR,EAAe,QAAf,SAA4Be,IAA5B,EAAD;;AAEA,QAAInB,cAAJ,EAAoB;AAClBc,MAAAA,aAAa;AACd;AACF,GARyB,EAQvB,CAACV,KAAK,CAACiB,MAAP,EAAerB,cAAf,EAA+Bc,aAA/B,CARuB,CAA1B;AASA,MAAMQ,YAAY,GAAG/B,WAAW,CAAC,UAAAgC,IAAI,EAAI;AACvCjB,IAAAA,QAAQ,CAACiB,IAAD,CAAR;;AAEA5B,IAAAA,CAAC,CAACyB,MAAF,CAAShB,KAAT,EAAgB,cAAhB,EAAgCmB,IAAhC;;AAEA,QAAItB,gBAAJ,EAAsB;AACpBa,MAAAA,aAAa,CAACS,IAAD,CAAb;AACD;AACF,GAR+B,EAQ7B,CAACnB,KAAK,CAACkB,YAAP,EAAqBrB,gBAArB,EAAuCa,aAAvC,CAR6B,CAAhC;AASA,MAAMU,UAAU,GAAG9B,OAAO,CAAC,YAAM;AAC/B,WAAO;AACLW,MAAAA,KAAK,EAALA,KADK;AAELoB,MAAAA,QAAQ,EAAE,CAAC9B,CAAC,CAAC+B,OAAF,CAAUrB,KAAV,CAFN;AAGLI,MAAAA,OAAO,EAAPA,OAHK;AAILF,MAAAA,SAAS,EAATA,SAJK;AAKLK,MAAAA,qBAAqB,EAArBA;AALK,KAAP;AAOD,GARyB,EAQvB,CAACP,KAAD,EAAQE,SAAR,EAAmBE,OAAnB,EAA4BG,qBAA5B,CARuB,CAA1B;AASA,SAAO;AACLM,IAAAA,OAAO,EAAPA,OADK;AAELG,IAAAA,MAAM,EAANA,MAFK;AAGLC,IAAAA,YAAY,EAAZA,YAHK;AAILE,IAAAA,UAAU,EAAVA;AAJK,GAAP;AAMD","sourcesContent":["import React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport _ from 'lodash';\nimport * as Presenter from \"./Presenter\";\nimport { useDidUpdate } from \"../../hooks\";\nexport default function useFieldState({\n  validate,\n  validateOnBlur,\n  validateOnChange,\n  validateOnStart,\n  onChangeValidity,\n  ...props\n}) {\n  const [value, setValue] = useState(props.value);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isValid, setIsValid] = useState(true);\n  const [failingValidatorIndex, setFailingValidatorIndex] = useState(undefined);\n  useEffect(() => {\n    if (validateOnStart) {\n      validateField();\n    }\n  }, []);\n  useDidUpdate(() => {\n    onChangeValidity?.(isValid);\n  }, [isValid]);\n  const validateField = useCallback((valueToValidate = value) => {\n    const [_isValid, _failingValidatorIndex] = Presenter.validate(valueToValidate, validate);\n    setIsValid(_isValid);\n    setFailingValidatorIndex(_failingValidatorIndex);\n  }, [value, validate]);\n  const onFocus = useCallback((...args) => {\n    setIsFocused(true);\n\n    _.invoke(props, 'onFocus', ...args);\n  }, [props.onFocus]);\n  const onBlur = useCallback((...args) => {\n    setIsFocused(false);\n\n    _.invoke(props, 'onBlur', ...args);\n\n    if (validateOnBlur) {\n      validateField();\n    }\n  }, [props.onBlur, validateOnBlur, validateField]);\n  const onChangeText = useCallback(text => {\n    setValue(text);\n\n    _.invoke(props, 'onChangeText', text);\n\n    if (validateOnChange) {\n      validateField(text);\n    }\n  }, [props.onChangeText, validateOnChange, validateField]);\n  const fieldState = useMemo(() => {\n    return {\n      value,\n      hasValue: !_.isEmpty(value),\n      isValid,\n      isFocused,\n      failingValidatorIndex\n    };\n  }, [value, isFocused, isValid, failingValidatorIndex]);\n  return {\n    onFocus,\n    onBlur,\n    onChangeText,\n    fieldState\n  };\n}"]},"metadata":{},"sourceType":"module"}