{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TabController/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Reanimated from 'react-native-reanimated';\nimport { State } from 'react-native-gesture-handler';\nimport { Constants } from \"../../helpers\";\nimport TabBarContext from \"./TabBarContext\";\nimport TabBar from \"./TabBar\";\nimport TabBarItem from \"./TabBarItem\";\nimport TabPage from \"./TabPage\";\nimport PageCarousel from \"./PageCarousel\";\nimport { LogService } from \"../../services\";\nvar cond = Reanimated.cond,\n    Code = Reanimated.Code,\n    and = Reanimated.and,\n    eq = Reanimated.eq,\n    set = Reanimated.set,\n    Value = Reanimated.Value,\n    block = Reanimated.block,\n    round = Reanimated.round,\n    onChange = Reanimated.onChange,\n    call = Reanimated.call;\n\nvar TabController = function (_Component) {\n  _inherits(TabController, _Component);\n\n  var _super = _createSuper(TabController);\n\n  function TabController(props) {\n    var _this;\n\n    _classCallCheck(this, TabController);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedIndex: _this.props.selectedIndex,\n      itemStates: []\n    };\n    _this._targetPage = new Value(-1);\n    _this._currentPage = new Value(_this.props.selectedIndex);\n    _this._carouselOffset = new Value(_this.props.selectedIndex * Math.round(Constants.screenWidth));\n\n    _this.getProviderContextValue = function () {\n      var _this$state = _this.state,\n          itemStates = _this$state.itemStates,\n          selectedIndex = _this$state.selectedIndex;\n      var _this$props = _this.props,\n          onChangeIndex = _this$props.onChangeIndex,\n          asCarousel = _this$props.asCarousel;\n      return {\n        selectedIndex: selectedIndex,\n        currentPage: _this._currentPage,\n        carouselOffset: _this._carouselOffset,\n        itemStates: itemStates,\n        registerTabItems: _this.registerTabItems,\n        onChangeIndex: onChangeIndex,\n        asCarousel: asCarousel\n      };\n    };\n\n    _this.registerTabItems = function (tabItemsCount, ignoredItems) {\n      var itemStates = _.times(tabItemsCount, function () {\n        return new Value(-1);\n      });\n\n      _this.setState({\n        itemStates: itemStates,\n        ignoredItems: ignoredItems\n      });\n    };\n\n    _this.onPageChange = function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          index = _ref2[0];\n\n      _.invoke(_this.props, 'onChangeIndex', index);\n    };\n\n    _this.renderCodeBlock = function () {\n      var _this$state2 = _this.state,\n          itemStates = _this$state2.itemStates,\n          ignoredItems = _this$state2.ignoredItems;\n      return block([].concat(_toConsumableArray(_this.getCarouselPageChangeCode()), _toConsumableArray(_.map(itemStates, function (state, index) {\n        return [cond(and(eq(state, State.BEGAN), !_.includes(ignoredItems, index)), set(_this._targetPage, index)), cond(and(eq(_this._targetPage, index), eq(state, State.END), !_.includes(ignoredItems, index)), [set(_this._currentPage, index), set(_this._targetPage, -1)])];\n      })), [onChange(_this._currentPage, call([_this._currentPage], _this.onPageChange))]));\n    };\n\n    LogService.warn(\"The 'TabController' component in not in the experimental \\nphase anymore and can be imported directly. Instead of \\nusing 'Incubator.TabController' just use 'TabController'\");\n    return _this;\n  }\n\n  _createClass(TabController, [{\n    key: \"getCarouselPageChangeCode\",\n    value: function getCarouselPageChangeCode() {\n      var _this2 = this;\n\n      var asCarousel = this.props.asCarousel;\n      var itemStates = this.state.itemStates;\n\n      if (asCarousel) {\n        var screenWidth = Constants.isAndroid ? Math.round(Constants.screenWidth) : Constants.screenWidth;\n        return _.times(itemStates.length, function (index) {\n          return cond(eq(Constants.isAndroid ? round(_this2._carouselOffset) : _this2._carouselOffset, index * screenWidth), [set(_this2._currentPage, index)]);\n        });\n      }\n\n      return [];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var itemStates = this.state.itemStates;\n      return React.createElement(TabBarContext.Provider, {\n        value: this.getProviderContextValue(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 7\n        }\n      }, this.props.children, !_.isEmpty(itemStates) && React.createElement(Code, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 36\n        }\n      }, this.renderCodeBlock));\n    }\n  }]);\n\n  return TabController;\n}(Component);\n\nTabController.displayName = 'IGNORE';\nTabController.contextType = TabBarContext;\nTabController.propTypes = {\n  selectedIndex: PropTypes.number,\n  onChangeIndex: PropTypes.func,\n  asCarousel: PropTypes.bool\n};\nTabController.defaultProps = {\n  selectedIndex: 0,\n  activeOpacity: 0.2\n};\nTabController.TabBar = TabBar;\nTabController.TabBarItem = TabBarItem;\nTabController.TabPage = TabPage;\nTabController.PageCarousel = PageCarousel;\nexport default TabController;","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TabController/index.js"],"names":["React","Component","PropTypes","_","Reanimated","State","Constants","TabBarContext","TabBar","TabBarItem","TabPage","PageCarousel","LogService","cond","Code","and","eq","set","Value","block","round","onChange","call","TabController","props","state","selectedIndex","itemStates","_targetPage","_currentPage","_carouselOffset","Math","screenWidth","getProviderContextValue","onChangeIndex","asCarousel","currentPage","carouselOffset","registerTabItems","tabItemsCount","ignoredItems","times","setState","onPageChange","index","invoke","renderCodeBlock","getCarouselPageChangeCode","map","BEGAN","includes","END","warn","isAndroid","length","children","isEmpty","displayName","contextType","propTypes","number","func","bool","defaultProps","activeOpacity"],"mappings":"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","sourcesContent":["// TODO: support carousel mode\n// TODO: support auto scroll to selected index\n// TODO: support commented props\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Reanimated from 'react-native-reanimated';\nimport {State} from 'react-native-gesture-handler';\nimport {Constants} from '../../helpers';\nimport TabBarContext from './TabBarContext';\nimport TabBar from './TabBar';\nimport TabBarItem from './TabBarItem';\nimport TabPage from './TabPage';\nimport PageCarousel from './PageCarousel';\nimport {LogService} from '../../services';\n\nconst {cond, Code, and, eq, set, Value, block, round, onChange, call} = Reanimated;\n\n/**\n * @description: A performant solution for a tab controller with lazy load mechanism\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n * @notes: This component is based on react-native-gesture-handler\n * @important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n * @importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation\n */\nclass TabController extends Component {\n  static displayName = 'IGNORE';\n  static contextType = TabBarContext;\n\n  static propTypes = {\n    /**\n     * TODO: change to initial index\n     * current selected tab index\n     */\n    selectedIndex: PropTypes.number,\n    /**\n     * callback for when index has change (will not be called on ignored items)\n     */\n    onChangeIndex: PropTypes.func,\n    // /**\n    //  * callback for when tab selected\n    //  */\n    // onTabSelected: PropTypes.func,\n    /**\n     * When using TabController.PageCarousel this should be turned on\n     */\n    asCarousel: PropTypes.bool\n  };\n\n  static defaultProps = {\n    selectedIndex: 0,\n    activeOpacity: 0.2\n  };\n\n  constructor(props) {\n    super(props);\n\n    LogService.warn(`The 'TabController' component in not in the experimental \nphase anymore and can be imported directly. Instead of \nusing 'Incubator.TabController' just use 'TabController'`);\n  }\n\n  state = {\n    selectedIndex: this.props.selectedIndex,\n    itemStates: []\n  };\n\n  _targetPage = new Value(-1);\n  _currentPage = new Value(this.props.selectedIndex);\n  _carouselOffset = new Value(this.props.selectedIndex * Math.round(Constants.screenWidth));\n\n  getProviderContextValue = () => {\n    const {itemStates, selectedIndex} = this.state;\n    const {onChangeIndex, asCarousel} = this.props;\n    return {\n      selectedIndex,\n      currentPage: this._currentPage,\n      carouselOffset: this._carouselOffset,\n      itemStates,\n      registerTabItems: this.registerTabItems,\n      onChangeIndex,\n      asCarousel\n    };\n  };\n\n  registerTabItems = (tabItemsCount, ignoredItems) => {\n    const itemStates = _.times(tabItemsCount, () => new Value(-1));\n    this.setState({itemStates, ignoredItems});\n  };\n\n  onPageChange = ([index]) => {\n    _.invoke(this.props, 'onChangeIndex', index);\n  };\n\n  getCarouselPageChangeCode() {\n    const {asCarousel} = this.props;\n    const {itemStates} = this.state;\n\n    if (asCarousel) {\n      // Rounding on Android, cause it cause issues when comparing values\n      const screenWidth = Constants.isAndroid ? Math.round(Constants.screenWidth) : Constants.screenWidth;\n\n      return _.times(itemStates.length, index => {\n        return cond(eq(Constants.isAndroid ? round(this._carouselOffset) : this._carouselOffset, index * screenWidth), [\n          set(this._currentPage, index)\n        ]);\n      });\n    }\n\n    return [];\n  }\n\n  renderCodeBlock = () => {\n    const {itemStates, ignoredItems} = this.state;\n    return block([\n      // Carousel Page change\n      ...this.getCarouselPageChangeCode(),\n      // TabBar Page change\n      ..._.map(itemStates, (state, index) => {\n        return [\n          cond(and(eq(state, State.BEGAN), !_.includes(ignoredItems, index)), set(this._targetPage, index)),\n          cond(and(eq(this._targetPage, index), eq(state, State.END), !_.includes(ignoredItems, index)), [\n            set(this._currentPage, index),\n            set(this._targetPage, -1)\n          ])\n        ];\n      }),\n      onChange(this._currentPage, call([this._currentPage], this.onPageChange))\n    ]);\n  };\n\n  render() {\n    const {itemStates} = this.state;\n\n    return (\n      <TabBarContext.Provider value={this.getProviderContextValue()}>\n        {this.props.children}\n        {!_.isEmpty(itemStates) && <Code>{this.renderCodeBlock}</Code>}\n      </TabBarContext.Provider>\n    );\n  }\n}\n\nTabController.TabBar = TabBar;\nTabController.TabBarItem = TabBarItem;\nTabController.TabPage = TabPage;\nTabController.PageCarousel = PageCarousel;\nexport default TabController;\n"]},"metadata":{},"sourceType":"module"}