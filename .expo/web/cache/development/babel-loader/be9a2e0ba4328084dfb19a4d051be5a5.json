{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/commons/SelectableComponent.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport _ from 'lodash';\nimport baseComponent from \"./baseComponent\";\nimport { Colors, BorderRadiuses } from \"../style\";\nimport Assets from \"../assets\";\nvar INDICATOR_TYPES = {\n  CIRCLE: 'circle',\n  CLEAN: 'clean'\n};\nvar BaseComponent = baseComponent(false);\n\nvar SelectableComponent = function (_BaseComponent) {\n  _inherits(SelectableComponent, _BaseComponent);\n\n  var _super = _createSuper(SelectableComponent);\n\n  function SelectableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, SelectableComponent);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selected: props.selected\n    };\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SelectableComponent, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(newProps) {\n      if (newProps.selected !== this.state.selected) {\n        this.setState({\n          selected: newProps.selected\n        });\n      }\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"getIndicatorContainerStyle\",\n    value: function getIndicatorContainerStyle() {\n      var _this$props = this.props,\n          selectableIndicatorType = _this$props.selectableIndicatorType,\n          selectableIndicatorColor = _this$props.selectableIndicatorColor;\n      var selected = this.state.selected;\n      var style = [this.styles.container];\n\n      if (selectableIndicatorType === INDICATOR_TYPES.CIRCLE) {\n        style.push(this.styles.circleContainer);\n        style.push(selected && {\n          backgroundColor: selectableIndicatorColor\n        });\n      }\n\n      return style;\n    }\n  }, {\n    key: \"getIndicatorIconStyle\",\n    value: function getIndicatorIconStyle() {\n      var _this$props2 = this.props,\n          selectableIndicatorType = _this$props2.selectableIndicatorType,\n          selectableIndicatorColor = _this$props2.selectableIndicatorColor;\n      var style = [this.styles.checkIcon];\n\n      if (selectableIndicatorType === INDICATOR_TYPES.CIRCLE) {\n        style.push(this.styles.checkIconInCircle);\n      } else {\n        style.push({\n          tintColor: selectableIndicatorColor\n        });\n      }\n\n      return style;\n    }\n  }, {\n    key: \"renderSelectableIndicator\",\n    value: function renderSelectableIndicator() {\n      var selectable = this.props.selectable;\n      var selected = this.state.selected;\n\n      if (selectable) {\n        return React.createElement(View, {\n          style: this.getIndicatorContainerStyle(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }\n        }, selected && React.createElement(Image, {\n          style: this.getIndicatorIconStyle(),\n          source: Assets.icons.check,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 24\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"onSelect\",\n    value: function onSelect() {\n      this.setState({\n        selected: !this.state.selected\n      });\n\n      _.invoke(this.props, 'onPress');\n    }\n  }]);\n\n  return SelectableComponent;\n}(BaseComponent);\n\nSelectableComponent.propTypes = {\n  selectable: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectableIndicatorSize: PropTypes.number,\n  selectableIndicatorType: PropTypes.oneOf([INDICATOR_TYPES.CIRCLE, INDICATOR_TYPES.CLEAN]),\n  selectableIndicatorColor: PropTypes.string\n};\nSelectableComponent.defaultProps = {\n  selectableIndicatorSize: 36,\n  selectableIndicatorType: INDICATOR_TYPES.CIRCLE,\n  selectableIndicatorColor: Colors.blue30\n};\nSelectableComponent.indicatorTypes = INDICATOR_TYPES;\nexport { SelectableComponent as default };\n\nfunction createStyles(_ref) {\n  var selectableIndicatorSize = _ref.selectableIndicatorSize;\n  return StyleSheet.create({\n    container: {\n      width: selectableIndicatorSize,\n      height: selectableIndicatorSize,\n      justifyContent: 'center',\n      borderRadius: BorderRadiuses.br100\n    },\n    circleContainer: {\n      borderWidth: 1,\n      borderColor: Colors.blue30\n    },\n    checkIcon: {\n      alignSelf: 'center',\n      resizeMode: 'contain'\n    },\n    checkIconInCircle: {\n      width: selectableIndicatorSize / 2,\n      tintColor: Colors.white\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/commons/SelectableComponent.js"],"names":["React","PropTypes","_","baseComponent","Colors","BorderRadiuses","Assets","INDICATOR_TYPES","CIRCLE","CLEAN","BaseComponent","SelectableComponent","props","state","selected","onSelect","bind","newProps","setState","styles","createStyles","selectableIndicatorType","selectableIndicatorColor","style","container","push","circleContainer","backgroundColor","checkIcon","checkIconInCircle","tintColor","selectable","getIndicatorContainerStyle","getIndicatorIconStyle","icons","check","invoke","propTypes","bool","selectableIndicatorSize","number","oneOf","string","defaultProps","blue30","indicatorTypes","StyleSheet","create","width","height","justifyContent","borderRadius","br100","borderWidth","borderColor","alignSelf","resizeMode","white"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {View, StyleSheet, Image} from 'react-native';\nimport _ from 'lodash';\nimport baseComponent from './baseComponent';\nimport {Colors, BorderRadiuses} from '../style';\nimport Assets from '../assets';\n\nconst INDICATOR_TYPES = {\n  CIRCLE: 'circle',\n  CLEAN: 'clean'\n};\n\nconst BaseComponent = baseComponent(false);\n\n// todo: add nice animation\nexport default class SelectableComponent extends BaseComponent {\n  static propTypes = {\n    /**\n     * should this component treat as selectable\n     */\n    selectable: PropTypes.bool,\n    /**\n     * selected state of the component\n     */\n    selected: PropTypes.bool,\n    /**\n     * selectable indicator size\n     */\n    selectableIndicatorSize: PropTypes.number,\n    /**\n     * selectable indicator look (circle, clean)\n     */\n    selectableIndicatorType: PropTypes.oneOf([INDICATOR_TYPES.CIRCLE, INDICATOR_TYPES.CLEAN]),\n    /**\n     * color of selectable indicator\n     */\n    selectableIndicatorColor: PropTypes.string\n  };\n\n  static defaultProps = {\n    selectableIndicatorSize: 36,\n    selectableIndicatorType: INDICATOR_TYPES.CIRCLE,\n    selectableIndicatorColor: Colors.blue30\n  };\n\n  static indicatorTypes = INDICATOR_TYPES;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: props.selected\n    };\n\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    if (newProps.selected !== this.state.selected) {\n      this.setState({\n        selected: newProps.selected\n      });\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  getIndicatorContainerStyle() {\n    const {selectableIndicatorType, selectableIndicatorColor} = this.props;\n    const {selected} = this.state;\n    const style = [this.styles.container];\n    if (selectableIndicatorType === INDICATOR_TYPES.CIRCLE) {\n      style.push(this.styles.circleContainer);\n      style.push(selected && {backgroundColor: selectableIndicatorColor});\n    }\n\n    return style;\n  }\n\n  getIndicatorIconStyle() {\n    const {selectableIndicatorType, selectableIndicatorColor} = this.props;\n    const style = [this.styles.checkIcon];\n    if (selectableIndicatorType === INDICATOR_TYPES.CIRCLE) {\n      style.push(this.styles.checkIconInCircle);\n    } else {\n      style.push({tintColor: selectableIndicatorColor});\n    }\n\n    return style;\n  }\n\n  renderSelectableIndicator() {\n    const {selectable} = this.props;\n    const {selected} = this.state;\n    if (selectable) {\n      return (\n        <View style={this.getIndicatorContainerStyle()}>\n          {selected && <Image style={this.getIndicatorIconStyle()} source={Assets.icons.check}/>}\n        </View>\n      );\n    }\n  }\n\n  onSelect() {\n    this.setState({\n      selected: !this.state.selected\n    });\n    _.invoke(this.props, 'onPress');\n  }\n}\n\nfunction createStyles({selectableIndicatorSize}) {\n  return StyleSheet.create({\n    container: {\n      width: selectableIndicatorSize,\n      height: selectableIndicatorSize,\n      justifyContent: 'center',\n      borderRadius: BorderRadiuses.br100\n    },\n    circleContainer: {\n      borderWidth: 1,\n      borderColor: Colors.blue30\n    },\n    checkIcon: {\n      alignSelf: 'center',\n      resizeMode: 'contain'\n    },\n    checkIconInCircle: {\n      width: selectableIndicatorSize / 2,\n      tintColor: Colors.white\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}