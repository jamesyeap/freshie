{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TextField/ValidationMessage.js\";\n\nimport _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { getRelevantValidationMessage } from \"./Presenter\";\n\nvar ValidationMessage = function ValidationMessage(_ref) {\n  var validationMessage = _ref.validationMessage,\n      enableErrors = _ref.enableErrors,\n      validationMessageStyle = _ref.validationMessageStyle,\n      retainSpace = _ref.retainSpace;\n  var context = useContext(FieldContext);\n\n  if (!enableErrors || !retainSpace && context.isValid) {\n    return null;\n  }\n\n  var relevantValidationMessage = getRelevantValidationMessage(validationMessage, context.failingValidatorIndex);\n  return React.createElement(Text, {\n    red30: true,\n    style: [styles.validationMessage, validationMessageStyle],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  }, context.isValid ? '' : relevantValidationMessage);\n};\n\nValidationMessage.propTypes = {\n  enableErrors: _pt.bool,\n  validationMessage: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  retainSpace: _pt.bool\n};\nvar styles = StyleSheet.create({\n  validationMessage: {\n    minHeight: 20\n  }\n});\nValidationMessage.displayName = 'Incubator.TextField';\nexport default ValidationMessage;","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TextField/ValidationMessage.js"],"names":["_pt","React","useContext","Text","FieldContext","getRelevantValidationMessage","ValidationMessage","validationMessage","enableErrors","validationMessageStyle","retainSpace","context","isValid","relevantValidationMessage","failingValidatorIndex","styles","propTypes","bool","oneOfType","string","arrayOf","StyleSheet","create","minHeight","displayName"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,OAAOC,IAAP;AACA,OAAOC,YAAP;AACA,SAASC,4BAAT;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAKpB;AAAA,MAJJC,iBAII,QAJJA,iBAII;AAAA,MAHJC,YAGI,QAHJA,YAGI;AAAA,MAFJC,sBAEI,QAFJA,sBAEI;AAAA,MADJC,WACI,QADJA,WACI;AACJ,MAAMC,OAAO,GAAGT,UAAU,CAACE,YAAD,CAA1B;;AAEA,MAAI,CAACI,YAAD,IAAiB,CAACE,WAAD,IAAgBC,OAAO,CAACC,OAA7C,EAAsD;AACpD,WAAO,IAAP;AACD;;AAED,MAAMC,yBAAyB,GAAGR,4BAA4B,CAACE,iBAAD,EAAoBI,OAAO,CAACG,qBAA5B,CAA9D;AACA,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,KAAK,EAAE,CAACC,MAAM,CAACR,iBAAR,EAA2BE,sBAA3B,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFE,OAAO,CAACC,OAAR,GAAkB,EAAlB,GAAuBC,yBADrB,CAAP;AAGD,CAhBD;;AAkBAP,iBAAiB,CAACU,SAAlB,GAA8B;AAI5BR,EAAAA,YAAY,EAAER,GAAG,CAACiB,IAJU;AAS5BV,EAAAA,iBAAiB,EAAEP,GAAG,CAACkB,SAAJ,CAAc,CAAClB,GAAG,CAACmB,MAAL,EAAanB,GAAG,CAACoB,OAAJ,CAAYpB,GAAG,CAACmB,MAAhB,CAAb,CAAd,CATS;AAU5BT,EAAAA,WAAW,EAAEV,GAAG,CAACiB;AAVW,CAA9B;AAYA,IAAMF,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/Bf,EAAAA,iBAAiB,EAAE;AACjBgB,IAAAA,SAAS,EAAE;AADM;AADY,CAAlB,CAAf;AAKAjB,iBAAiB,CAACkB,WAAlB,GAAgC,qBAAhC;AACA,eAAelB,iBAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { getRelevantValidationMessage } from \"./Presenter\";\n\nconst ValidationMessage = ({\n  validationMessage,\n  enableErrors,\n  validationMessageStyle,\n  retainSpace\n}) => {\n  const context = useContext(FieldContext);\n\n  if (!enableErrors || !retainSpace && context.isValid) {\n    return null;\n  }\n\n  const relevantValidationMessage = getRelevantValidationMessage(validationMessage, context.failingValidatorIndex);\n  return <Text red30 style={[styles.validationMessage, validationMessageStyle]}>\n      {context.isValid ? '' : relevantValidationMessage}\n    </Text>;\n};\n\nValidationMessage.propTypes = {\n  /**\n     * Should support showing validation error message\n     */\n  enableErrors: _pt.bool,\n\n  /**\n     * The validation message to display when field is invalid (depends on validate)\n     */\n  validationMessage: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  retainSpace: _pt.bool\n};\nconst styles = StyleSheet.create({\n  validationMessage: {\n    minHeight: 20\n  }\n});\nValidationMessage.displayName = 'Incubator.TextField';\nexport default ValidationMessage;"]},"metadata":{},"sourceType":"module"}