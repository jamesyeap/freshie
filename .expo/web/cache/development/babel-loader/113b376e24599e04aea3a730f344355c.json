{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js\";\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Reanimated, { EasingNode, Easing as _Easing } from 'react-native-reanimated';\nimport { Colors, BorderRadiuses, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Segment from \"./segment\";\nvar _interpolate = Reanimated.interpolate,\n    interpolateNode = Reanimated.interpolateNode;\nvar interpolate = interpolateNode || _interpolate;\nvar Easing = EasingNode || _Easing;\nvar BORDER_WIDTH = 1;\n\nvar SegmentedControl = function SegmentedControl(props) {\n  var onChangeIndex = props.onChangeIndex,\n      _props$initialIndex = props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      containerStyle = props.containerStyle,\n      segments = props.segments,\n      _props$activeColor = props.activeColor,\n      activeColor = _props$activeColor === void 0 ? Colors.primary : _props$activeColor,\n      _props$borderRadius = props.borderRadius,\n      borderRadius = _props$borderRadius === void 0 ? BorderRadiuses.br100 : _props$borderRadius,\n      _props$backgroundColo = props.backgroundColor,\n      backgroundColor = _props$backgroundColo === void 0 ? Colors.grey80 : _props$backgroundColo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Colors.white : _props$activeBackgrou,\n      _props$inactiveColor = props.inactiveColor,\n      inactiveColor = _props$inactiveColor === void 0 ? Colors.grey20 : _props$inactiveColor,\n      _props$outlineColor = props.outlineColor,\n      outlineColor = _props$outlineColor === void 0 ? activeColor : _props$outlineColor,\n      _props$outlineWidth = props.outlineWidth,\n      outlineWidth = _props$outlineWidth === void 0 ? BORDER_WIDTH : _props$outlineWidth;\n\n  var _useState = useState(-1),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedSegment = _useState2[0],\n      setSelectedSegment = _useState2[1];\n\n  var segmentsStyle = useRef([]);\n  var segmentsCounter = useRef(0);\n  var animatedValue = useRef(new Reanimated.Value(initialIndex));\n  var updateSelectedSegment = useCallback(function (index) {\n    Reanimated.timing(animatedValue.current, {\n      toValue: index,\n      duration: 300,\n      easing: Easing.bezier(0.33, 1, 0.68, 1)\n    }).start();\n    return setSelectedSegment(index);\n  }, []);\n  var onSegmentPress = useCallback(function (index) {\n    if (selectedSegment !== index) {\n      onChangeIndex == null ? void 0 : onChangeIndex(index);\n      updateSelectedSegment(index);\n    }\n  }, [onChangeIndex, selectedSegment, updateSelectedSegment]);\n  var onLayout = useCallback(function (index, event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        x = _event$nativeEvent$la.x,\n        width = _event$nativeEvent$la.width;\n    segmentsStyle.current[index] = {\n      x: x,\n      width: width\n    };\n    segmentsCounter.current++;\n    return segmentsCounter.current === (segments == null ? void 0 : segments.length) && setSelectedSegment(initialIndex);\n  }, [initialIndex, segments == null ? void 0 : segments.length]);\n  var animatedStyle = useMemo(function () {\n    if (segmentsCounter.current === (segments == null ? void 0 : segments.length)) {\n      var left = interpolate(animatedValue.current, {\n        inputRange: _.times(segmentsCounter.current),\n        outputRange: _.map(segmentsStyle.current, function (segment) {\n          return segment.x - BORDER_WIDTH;\n        })\n      });\n      var width = interpolate(animatedValue.current, {\n        inputRange: _.times(segmentsCounter.current),\n        outputRange: _.map(segmentsStyle.current, function (segment) {\n          return segment.width;\n        })\n      });\n      return {\n        width: width,\n        left: left\n      };\n    }\n\n    return undefined;\n  }, [segmentsCounter.current, segments == null ? void 0 : segments.length]);\n\n  var renderSegments = function renderSegments() {\n    return _.map(segments, function (_value, index) {\n      return React.createElement(Segment, _extends({\n        key: index,\n        onLayout: onLayout,\n        index: index,\n        onPress: onSegmentPress,\n        isSelected: selectedSegment === index,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor\n      }, segments == null ? void 0 : segments[index], {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 12\n        }\n      }));\n    });\n  };\n\n  return React.createElement(View, {\n    row: true,\n    center: true,\n    style: [styles.container, containerStyle, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 10\n    }\n  }, React.createElement(Reanimated.View, {\n    style: [styles.selectedSegment, animatedStyle, {\n      borderColor: outlineColor,\n      borderRadius: borderRadius,\n      backgroundColor: activeBackgroundColor,\n      borderWidth: outlineWidth\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), renderSegments());\n};\n\nSegmentedControl.propTypes = {\n  segments: _pt.array,\n  activeColor: _pt.string,\n  inactiveColor: _pt.string,\n  onChangeIndex: _pt.func,\n  initialIndex: _pt.number,\n  borderRadius: _pt.number,\n  backgroundColor: _pt.string,\n  activeBackgroundColor: _pt.string,\n  outlineColor: _pt.string,\n  outlineWidth: _pt.number,\n  iconOnRight: _pt.bool,\n  testID: _pt.string\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.grey80,\n    height: Spacings.s7,\n    borderColor: Colors.grey60\n  },\n  selectedSegment: {\n    height: Spacings.s7 - 2 * BORDER_WIDTH,\n    position: 'absolute',\n    backgroundColor: Colors.white\n  },\n  segment: {\n    paddingHorizontal: Spacings.s3\n  }\n});\nSegmentedControl.displayName = 'SegmentedControl';\nexport default asBaseComponent(SegmentedControl);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js"],"names":["_pt","_","React","useRef","useState","useCallback","useMemo","Reanimated","EasingNode","Easing","_Easing","Colors","BorderRadiuses","Spacings","asBaseComponent","View","Segment","_interpolate","interpolate","interpolateNode","BORDER_WIDTH","SegmentedControl","props","onChangeIndex","initialIndex","containerStyle","segments","activeColor","primary","borderRadius","br100","backgroundColor","grey80","activeBackgroundColor","white","inactiveColor","grey20","outlineColor","outlineWidth","selectedSegment","setSelectedSegment","segmentsStyle","segmentsCounter","animatedValue","Value","updateSelectedSegment","index","timing","current","toValue","duration","easing","bezier","start","onSegmentPress","onLayout","event","nativeEvent","layout","x","width","length","animatedStyle","left","inputRange","times","outputRange","map","segment","undefined","renderSegments","_value","styles","container","borderColor","borderWidth","propTypes","array","string","func","number","iconOnRight","bool","testID","StyleSheet","create","height","s7","grey60","position","paddingHorizontal","s3","displayName"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CC,OAA/C,QAA8D,OAA9D;;AAEA,OAAOC,UAAP,IAAqBC,UAArB,EAAiCC,MAAM,IAAIC,OAA3C,QAA0D,yBAA1D;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,QAAjC;AACA,SAASC,eAAT;AACA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,IACeC,YADf,GAGIV,UAHJ,CACEW,WADF;AAAA,IAEEC,eAFF,GAGIZ,UAHJ,CAEEY,eAFF;AAIA,IAAMD,WAAW,GAAGC,eAAe,IAAIF,YAAvC;AACA,IAAMR,MAAM,GAAGD,UAAU,IAAIE,OAA7B;AACA,IAAMU,YAAY,GAAG,CAArB;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AAChC,MACEC,aADF,GAYID,KAZJ,CACEC,aADF;AAAA,4BAYID,KAZJ,CAEEE,YAFF;AAAA,MAEEA,YAFF,oCAEiB,CAFjB;AAAA,MAGEC,cAHF,GAYIH,KAZJ,CAGEG,cAHF;AAAA,MAIEC,QAJF,GAYIJ,KAZJ,CAIEI,QAJF;AAAA,2BAYIJ,KAZJ,CAKEK,WALF;AAAA,MAKEA,WALF,mCAKgBhB,MAAM,CAACiB,OALvB;AAAA,4BAYIN,KAZJ,CAMEO,YANF;AAAA,MAMEA,YANF,oCAMiBjB,cAAc,CAACkB,KANhC;AAAA,8BAYIR,KAZJ,CAOES,eAPF;AAAA,MAOEA,eAPF,sCAOoBpB,MAAM,CAACqB,MAP3B;AAAA,8BAYIV,KAZJ,CAQEW,qBARF;AAAA,MAQEA,qBARF,sCAQ0BtB,MAAM,CAACuB,KARjC;AAAA,6BAYIZ,KAZJ,CASEa,aATF;AAAA,MASEA,aATF,qCASkBxB,MAAM,CAACyB,MATzB;AAAA,4BAYId,KAZJ,CAUEe,YAVF;AAAA,MAUEA,YAVF,oCAUiBV,WAVjB;AAAA,4BAYIL,KAZJ,CAWEgB,YAXF;AAAA,MAWEA,YAXF,oCAWiBlB,YAXjB;;AAaA,kBAA8ChB,QAAQ,CAAC,CAAC,CAAF,CAAtD;AAAA;AAAA,MAAOmC,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,MAAMC,aAAa,GAAGtC,MAAM,CAAC,EAAD,CAA5B;AACA,MAAMuC,eAAe,GAAGvC,MAAM,CAAC,CAAD,CAA9B;AACA,MAAMwC,aAAa,GAAGxC,MAAM,CAAC,IAAII,UAAU,CAACqC,KAAf,CAAqBpB,YAArB,CAAD,CAA5B;AACA,MAAMqB,qBAAqB,GAAGxC,WAAW,CAAC,UAAAyC,KAAK,EAAI;AACjDvC,IAAAA,UAAU,CAACwC,MAAX,CAAkBJ,aAAa,CAACK,OAAhC,EAAyC;AACvCC,MAAAA,OAAO,EAAEH,KAD8B;AAEvCI,MAAAA,QAAQ,EAAE,GAF6B;AAGvCC,MAAAA,MAAM,EAAE1C,MAAM,CAAC2C,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B;AAH+B,KAAzC,EAIGC,KAJH;AAKA,WAAOb,kBAAkB,CAACM,KAAD,CAAzB;AACD,GAPwC,EAOtC,EAPsC,CAAzC;AAQA,MAAMQ,cAAc,GAAGjD,WAAW,CAAC,UAAAyC,KAAK,EAAI;AAC1C,QAAIP,eAAe,KAAKO,KAAxB,EAA+B;AAC7BvB,MAAAA,aAAa,QAAb,YAAAA,aAAa,CAAGuB,KAAH,CAAb;AACAD,MAAAA,qBAAqB,CAACC,KAAD,CAArB;AACD;AACF,GALiC,EAK/B,CAACvB,aAAD,EAAgBgB,eAAhB,EAAiCM,qBAAjC,CAL+B,CAAlC;AAMA,MAAMU,QAAQ,GAAGlD,WAAW,CAAC,UAACyC,KAAD,EAAQU,KAAR,EAAkB;AAC7C,gCAGIA,KAAK,CAACC,WAAN,CAAkBC,MAHtB;AAAA,QACEC,CADF,yBACEA,CADF;AAAA,QAEEC,KAFF,yBAEEA,KAFF;AAIAnB,IAAAA,aAAa,CAACO,OAAd,CAAsBF,KAAtB,IAA+B;AAC7Ba,MAAAA,CAAC,EAADA,CAD6B;AAE7BC,MAAAA,KAAK,EAALA;AAF6B,KAA/B;AAIAlB,IAAAA,eAAe,CAACM,OAAhB;AACA,WAAON,eAAe,CAACM,OAAhB,MAA4BtB,QAA5B,oBAA4BA,QAAQ,CAAEmC,MAAtC,KAAgDrB,kBAAkB,CAAChB,YAAD,CAAzE;AACD,GAX2B,EAWzB,CAACA,YAAD,EAAeE,QAAf,oBAAeA,QAAQ,CAAEmC,MAAzB,CAXyB,CAA5B;AAYA,MAAMC,aAAa,GAAGxD,OAAO,CAAC,YAAM;AAClC,QAAIoC,eAAe,CAACM,OAAhB,MAA4BtB,QAA5B,oBAA4BA,QAAQ,CAAEmC,MAAtC,CAAJ,EAAkD;AAChD,UAAME,IAAI,GAAG7C,WAAW,CAACyB,aAAa,CAACK,OAAf,EAAwB;AAC9CgB,QAAAA,UAAU,EAAE/D,CAAC,CAACgE,KAAF,CAAQvB,eAAe,CAACM,OAAxB,CADkC;AAE9CkB,QAAAA,WAAW,EAAEjE,CAAC,CAACkE,GAAF,CAAM1B,aAAa,CAACO,OAApB,EAA6B,UAAAoB,OAAO;AAAA,iBAAIA,OAAO,CAACT,CAAR,GAAYvC,YAAhB;AAAA,SAApC;AAFiC,OAAxB,CAAxB;AAIA,UAAMwC,KAAK,GAAG1C,WAAW,CAACyB,aAAa,CAACK,OAAf,EAAwB;AAC/CgB,QAAAA,UAAU,EAAE/D,CAAC,CAACgE,KAAF,CAAQvB,eAAe,CAACM,OAAxB,CADmC;AAE/CkB,QAAAA,WAAW,EAAEjE,CAAC,CAACkE,GAAF,CAAM1B,aAAa,CAACO,OAApB,EAA6B,UAAAoB,OAAO;AAAA,iBAAIA,OAAO,CAACR,KAAZ;AAAA,SAApC;AAFkC,OAAxB,CAAzB;AAIA,aAAO;AACLA,QAAAA,KAAK,EAALA,KADK;AAELG,QAAAA,IAAI,EAAJA;AAFK,OAAP;AAID;;AAED,WAAOM,SAAP;AACD,GAjB4B,EAiB1B,CAAC3B,eAAe,CAACM,OAAjB,EAA0BtB,QAA1B,oBAA0BA,QAAQ,CAAEmC,MAApC,CAjB0B,CAA7B;;AAmBA,MAAMS,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAMrE,CAAC,CAACkE,GAAF,CAAMzC,QAAN,EAAgB,UAAC6C,MAAD,EAASzB,KAAT,EAAmB;AAC9D,aAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,KAAd;AAAqB,QAAA,QAAQ,EAAES,QAA/B;AAAyC,QAAA,KAAK,EAAET,KAAhD;AAAuD,QAAA,OAAO,EAAEQ,cAAhE;AAAgF,QAAA,UAAU,EAAEf,eAAe,KAAKO,KAAhH;AAAuH,QAAA,WAAW,EAAEnB,WAApI;AAAiJ,QAAA,aAAa,EAAEQ;AAAhK,SAAmLT,QAAnL,oBAAmLA,QAAQ,CAAGoB,KAAH,CAA3L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,KAF4B,CAAN;AAAA,GAAvB;;AAIA,SAAO,oBAAC,IAAD;AAAM,IAAA,GAAG,MAAT;AAAU,IAAA,MAAM,MAAhB;AAAiB,IAAA,KAAK,EAAE,CAAC0B,MAAM,CAACC,SAAR,EAAmBhD,cAAnB,EAAmC;AAChEI,MAAAA,YAAY,EAAZA,YADgE;AAEhEE,MAAAA,eAAe,EAAfA;AAFgE,KAAnC,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIH,oBAAC,UAAD,CAAY,IAAZ;AAAiB,IAAA,KAAK,EAAE,CAACyC,MAAM,CAACjC,eAAR,EAAyBuB,aAAzB,EAAwC;AAChEY,MAAAA,WAAW,EAAErC,YADmD;AAEhER,MAAAA,YAAY,EAAZA,YAFgE;AAGhEE,MAAAA,eAAe,EAAEE,qBAH+C;AAIhE0C,MAAAA,WAAW,EAAErC;AAJmD,KAAxC,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJG,EAUFgC,cAAc,EAVZ,CAAP;AAYD,CA/ED;;AAiFAjD,gBAAgB,CAACuD,SAAjB,GAA6B;AAI3BlD,EAAAA,QAAQ,EAAE1B,GAAG,CAAC6E,KAJa;AAS3BlD,EAAAA,WAAW,EAAE3B,GAAG,CAAC8E,MATU;AAc3B3C,EAAAA,aAAa,EAAEnC,GAAG,CAAC8E,MAdQ;AAmB3BvD,EAAAA,aAAa,EAAEvB,GAAG,CAAC+E,IAnBQ;AAwB3BvD,EAAAA,YAAY,EAAExB,GAAG,CAACgF,MAxBS;AA6B3BnD,EAAAA,YAAY,EAAE7B,GAAG,CAACgF,MA7BS;AAkC3BjD,EAAAA,eAAe,EAAE/B,GAAG,CAAC8E,MAlCM;AAuC3B7C,EAAAA,qBAAqB,EAAEjC,GAAG,CAAC8E,MAvCA;AA4C3BzC,EAAAA,YAAY,EAAErC,GAAG,CAAC8E,MA5CS;AAiD3BxC,EAAAA,YAAY,EAAEtC,GAAG,CAACgF,MAjDS;AAsD3BC,EAAAA,WAAW,EAAEjF,GAAG,CAACkF,IAtDU;AAuD3BC,EAAAA,MAAM,EAAEnF,GAAG,CAAC8E;AAvDe,CAA7B;AAyDA,IAAMN,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,SAAS,EAAE;AACT1C,IAAAA,eAAe,EAAEpB,MAAM,CAACqB,MADf;AAETsD,IAAAA,MAAM,EAAEzE,QAAQ,CAAC0E,EAFR;AAGTb,IAAAA,WAAW,EAAE/D,MAAM,CAAC6E;AAHX,GADoB;AAM/BjD,EAAAA,eAAe,EAAE;AACf+C,IAAAA,MAAM,EAAEzE,QAAQ,CAAC0E,EAAT,GAAc,IAAInE,YADX;AAEfqE,IAAAA,QAAQ,EAAE,UAFK;AAGf1D,IAAAA,eAAe,EAAEpB,MAAM,CAACuB;AAHT,GANc;AAW/BkC,EAAAA,OAAO,EAAE;AACPsB,IAAAA,iBAAiB,EAAE7E,QAAQ,CAAC8E;AADrB;AAXsB,CAAlB,CAAf;AAeAtE,gBAAgB,CAACuE,WAAjB,GAA+B,kBAA/B;AACA,eAAe9E,eAAe,CAACO,gBAAD,CAA9B","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Reanimated, { EasingNode, Easing as _Easing } from 'react-native-reanimated';\nimport { Colors, BorderRadiuses, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Segment from \"./segment\";\nconst {\n  interpolate: _interpolate,\n  interpolateNode\n} = Reanimated;\nconst interpolate = interpolateNode || _interpolate;\nconst Easing = EasingNode || _Easing;\nconst BORDER_WIDTH = 1;\n\n/**\n * @description: SegmentedControl component for toggling two values or more\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SegmentedControlScreen.tsx\n */\nconst SegmentedControl = props => {\n  const {\n    onChangeIndex,\n    initialIndex = 0,\n    containerStyle,\n    segments,\n    activeColor = Colors.primary,\n    borderRadius = BorderRadiuses.br100,\n    backgroundColor = Colors.grey80,\n    activeBackgroundColor = Colors.white,\n    inactiveColor = Colors.grey20,\n    outlineColor = activeColor,\n    outlineWidth = BORDER_WIDTH\n  } = props;\n  const [selectedSegment, setSelectedSegment] = useState(-1);\n  const segmentsStyle = useRef([]);\n  const segmentsCounter = useRef(0);\n  const animatedValue = useRef(new Reanimated.Value(initialIndex));\n  const updateSelectedSegment = useCallback(index => {\n    Reanimated.timing(animatedValue.current, {\n      toValue: index,\n      duration: 300,\n      easing: Easing.bezier(0.33, 1, 0.68, 1)\n    }).start();\n    return setSelectedSegment(index);\n  }, []);\n  const onSegmentPress = useCallback(index => {\n    if (selectedSegment !== index) {\n      onChangeIndex?.(index);\n      updateSelectedSegment(index);\n    }\n  }, [onChangeIndex, selectedSegment, updateSelectedSegment]);\n  const onLayout = useCallback((index, event) => {\n    const {\n      x,\n      width\n    } = event.nativeEvent.layout;\n    segmentsStyle.current[index] = {\n      x,\n      width\n    };\n    segmentsCounter.current++;\n    return segmentsCounter.current === segments?.length && setSelectedSegment(initialIndex);\n  }, [initialIndex, segments?.length]);\n  const animatedStyle = useMemo(() => {\n    if (segmentsCounter.current === segments?.length) {\n      const left = interpolate(animatedValue.current, {\n        inputRange: _.times(segmentsCounter.current),\n        outputRange: _.map(segmentsStyle.current, segment => segment.x - BORDER_WIDTH)\n      });\n      const width = interpolate(animatedValue.current, {\n        inputRange: _.times(segmentsCounter.current),\n        outputRange: _.map(segmentsStyle.current, segment => segment.width)\n      });\n      return {\n        width,\n        left\n      };\n    }\n\n    return undefined;\n  }, [segmentsCounter.current, segments?.length]);\n\n  const renderSegments = () => _.map(segments, (_value, index) => {\n    return <Segment key={index} onLayout={onLayout} index={index} onPress={onSegmentPress} isSelected={selectedSegment === index} activeColor={activeColor} inactiveColor={inactiveColor} {...segments?.[index]} />;\n  });\n\n  return <View row center style={[styles.container, containerStyle, {\n    borderRadius,\n    backgroundColor\n  }]}>\n      <Reanimated.View style={[styles.selectedSegment, animatedStyle, {\n      borderColor: outlineColor,\n      borderRadius,\n      backgroundColor: activeBackgroundColor,\n      borderWidth: outlineWidth\n    }]} />\n      {renderSegments()}\n    </View>;\n};\n\nSegmentedControl.propTypes = {\n  /**\n     * Array on segments.\n     */\n  segments: _pt.array,\n\n  /**\n     * The color of the active segment label.\n     */\n  activeColor: _pt.string,\n\n  /**\n     * The color of the inactive segments (label).\n     */\n  inactiveColor: _pt.string,\n\n  /**\n     * Callback for when index has change.\n     */\n  onChangeIndex: _pt.func,\n\n  /**\n     * Initial index to be active.\n     */\n  initialIndex: _pt.number,\n\n  /**\n     * The segmentedControl borderRadius\n     */\n  borderRadius: _pt.number,\n\n  /**\n     * The background color of the inactive segments\n     */\n  backgroundColor: _pt.string,\n\n  /**\n     * The background color of the active segment\n     */\n  activeBackgroundColor: _pt.string,\n\n  /**\n     * The color of the active segment outline\n     */\n  outlineColor: _pt.string,\n\n  /**\n     * The width of the active segment outline\n     */\n  outlineWidth: _pt.number,\n\n  /**\n     * Should the icon be on right of the label\n     */\n  iconOnRight: _pt.bool,\n  testID: _pt.string\n};\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.grey80,\n    height: Spacings.s7,\n    borderColor: Colors.grey60\n  },\n  selectedSegment: {\n    height: Spacings.s7 - 2 * BORDER_WIDTH,\n    position: 'absolute',\n    backgroundColor: Colors.white\n  },\n  segment: {\n    paddingHorizontal: Spacings.s3\n  }\n});\nSegmentedControl.displayName = 'SegmentedControl';\nexport default asBaseComponent(SegmentedControl);"]},"metadata":{},"sourceType":"module"}