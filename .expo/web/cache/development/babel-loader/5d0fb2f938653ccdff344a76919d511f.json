{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/colorPicker/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ColorPalette from \"./ColorPalette\";\nimport { SWATCH_MARGIN, SWATCH_SIZE } from \"./ColorSwatch\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport Assets from \"../../assets\";\nimport { Colors } from \"../../style\";\nimport View from \"../view\";\nimport Button from \"../button\";\nimport ColorPickerDialog from \"./ColorPickerDialog\";\nvar ACCESSIBILITY_LABELS = {\n  addButton: 'add custom color using hex code',\n  dismissButton: 'dismiss',\n  doneButton: 'done',\n  input: 'custom hex color code'\n};\n\nvar ColorPicker = function (_PureComponent) {\n  _inherits(ColorPicker, _PureComponent);\n\n  var _super = _createSuper(ColorPicker);\n\n  function ColorPicker() {\n    var _this;\n\n    _classCallCheck(this, ColorPicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      show: false\n    };\n\n    _this.showDialog = function () {\n      _this.setState({\n        show: true\n      });\n    };\n\n    _this.hideDialog = function () {\n      _this.setState({\n        show: false\n      });\n    };\n\n    _this.onValueChange = function (value, options) {\n      _.invoke(_this.props, 'onValueChange', value, options);\n    };\n\n    return _this;\n  }\n\n  _createClass(ColorPicker, [{\n    key: \"animatedIndex\",\n    get: function get() {\n      var _this$props = this.props,\n          animatedIndex = _this$props.animatedIndex,\n          colors = _this$props.colors;\n\n      if (animatedIndex === undefined) {\n        return colors.length - 1;\n      }\n\n      return animatedIndex;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          initialColor = _this$props2.initialColor,\n          colors = _this$props2.colors,\n          value = _this$props2.value,\n          testID = _this$props2.testID,\n          accessibilityLabels = _this$props2.accessibilityLabels;\n      var show = this.state.show;\n      return React.createElement(View, {\n        row: true,\n        testID: testID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 12\n        }\n      }, React.createElement(ColorPalette, {\n        value: value,\n        colors: colors,\n        style: styles.palette,\n        usePagination: false,\n        animatedIndex: this.animatedIndex,\n        onValueChange: this.onValueChange,\n        testID: testID + \"-palette\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.buttonContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        color: Colors.dark10,\n        outlineColor: Colors.dark10,\n        style: styles.button,\n        round: true,\n        outline: true,\n        iconSource: Assets.icons.plusSmall,\n        onPress: this.showDialog,\n        testID: testID + \"-button\",\n        accessibilityLabel: accessibilityLabels.addButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      })), React.createElement(ColorPickerDialog, _extends({}, this.props, {\n        key: initialColor,\n        visible: show,\n        onDismiss: this.hideDialog,\n        accessibilityLabels: {\n          dismissButton: accessibilityLabels.dismissButton,\n          doneButton: accessibilityLabels.doneButton,\n          input: accessibilityLabels.input\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return ColorPicker;\n}(PureComponent);\n\nColorPicker.propTypes = {\n  colors: _pt.arrayOf(_pt.string).isRequired,\n  value: _pt.string,\n  animatedIndex: _pt.number,\n  onValueChange: _pt.func,\n  accessibilityLabels: _pt.shape({\n    addButton: _pt.string,\n    dismissButton: _pt.string,\n    doneButton: _pt.string,\n    input: _pt.string\n  }),\n  testID: _pt.string\n};\nColorPicker.displayName = 'ColorPicker';\nColorPicker.defaultProps = {\n  accessibilityLabels: ACCESSIBILITY_LABELS\n};\nexport default asBaseComponent(ColorPicker);\nvar plusButtonContainerWidth = SWATCH_SIZE + 20 + 12;\nvar plusButtonContainerHeight = 92 - 2 * SWATCH_MARGIN;\nvar styles = StyleSheet.create({\n  palette: {\n    paddingLeft: plusButtonContainerWidth\n  },\n  buttonContainer: {\n    position: 'absolute',\n    left: 0,\n    width: plusButtonContainerWidth,\n    height: plusButtonContainerHeight,\n    marginTop: SWATCH_MARGIN,\n    marginBottom: SWATCH_MARGIN,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    paddingTop: 1,\n    backgroundColor: Colors.white\n  },\n  button: {\n    width: SWATCH_SIZE,\n    height: SWATCH_SIZE,\n    marginRight: 12\n  }\n});","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/colorPicker/index.js"],"names":["_pt","_","React","PureComponent","ColorPalette","SWATCH_MARGIN","SWATCH_SIZE","asBaseComponent","Assets","Colors","View","Button","ColorPickerDialog","ACCESSIBILITY_LABELS","addButton","dismissButton","doneButton","input","ColorPicker","state","show","showDialog","setState","hideDialog","onValueChange","value","options","invoke","props","animatedIndex","colors","undefined","length","initialColor","testID","accessibilityLabels","styles","palette","buttonContainer","dark10","button","icons","plusSmall","propTypes","arrayOf","string","isRequired","number","func","shape","displayName","defaultProps","plusButtonContainerWidth","plusButtonContainerHeight","StyleSheet","create","paddingLeft","position","left","width","height","marginTop","marginBottom","alignItems","justifyContent","paddingTop","backgroundColor","white","marginRight"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet } from 'react-native';\nimport ColorPalette from \"./ColorPalette\";\nimport { SWATCH_MARGIN, SWATCH_SIZE } from \"./ColorSwatch\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport Assets from \"../../assets\";\nimport { Colors } from \"../../style\";\nimport View from \"../view\";\nimport Button from \"../button\";\nimport ColorPickerDialog from \"./ColorPickerDialog\";\nconst ACCESSIBILITY_LABELS = {\n  addButton: 'add custom color using hex code',\n  dismissButton: 'dismiss',\n  doneButton: 'done',\n  input: 'custom hex color code'\n};\n/**\n * @description: A color picker component\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n * @notes: This is a screen width component\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPicker/ColorPicker.gif?raw=true\n */\n\nclass ColorPicker extends PureComponent {\n  static propTypes = {\n    /**\n       * Array of colors for the picker's color palette (hex values)\n       */\n    colors: _pt.arrayOf(_pt.string).isRequired,\n\n    /**\n       * The value of the selected swatch // TODO: rename prop 'selectedValue'\n       */\n    value: _pt.string,\n\n    /**\n       * The index of the item to animate at first render (default is last)\n       */\n    animatedIndex: _pt.number,\n\n    /**\n       * onValueChange callback for the picker's color palette change\n       */\n    onValueChange: _pt.func,\n\n    /**\n       * Accessibility labels as an object of strings, ex.\n       * {\n       *  addButton: 'add custom color using hex code',\n       *  dismissButton: 'dismiss',\n       *  doneButton: 'done',\n       *  input: 'custom hex color code'\n       * }\n       */\n    accessibilityLabels: _pt.shape({\n      addButton: _pt.string,\n      dismissButton: _pt.string,\n      doneButton: _pt.string,\n      input: _pt.string\n    }),\n    testID: _pt.string\n  };\n  static displayName = 'ColorPicker';\n  static defaultProps = {\n    accessibilityLabels: ACCESSIBILITY_LABELS\n  };\n  state = {\n    show: false\n  };\n\n  get animatedIndex() {\n    const {\n      animatedIndex,\n      colors\n    } = this.props;\n\n    if (animatedIndex === undefined) {\n      return colors.length - 1;\n    }\n\n    return animatedIndex;\n  }\n\n  showDialog = () => {\n    this.setState({\n      show: true\n    });\n  };\n  hideDialog = () => {\n    this.setState({\n      show: false\n    });\n  };\n\n  render() {\n    const {\n      initialColor,\n      colors,\n      value,\n      testID,\n      accessibilityLabels\n    } = this.props;\n    const {\n      show\n    } = this.state;\n    return <View row testID={testID}>\n        <ColorPalette value={value} colors={colors} style={styles.palette} usePagination={false} animatedIndex={this.animatedIndex} onValueChange={this.onValueChange} testID={`${testID}-palette`} />\n        <View style={styles.buttonContainer}>\n          <Button color={Colors.dark10} outlineColor={Colors.dark10} style={styles.button} round outline iconSource={Assets.icons.plusSmall} onPress={this.showDialog} testID={`${testID}-button`} accessibilityLabel={accessibilityLabels.addButton} />\n        </View>\n        <ColorPickerDialog {...this.props} key={initialColor} visible={show} onDismiss={this.hideDialog} accessibilityLabels={{\n        dismissButton: accessibilityLabels.dismissButton,\n        doneButton: accessibilityLabels.doneButton,\n        input: accessibilityLabels.input\n      }} />\n      </View>;\n  } // ColorPalette\n\n\n  onValueChange = (value, options) => {\n    _.invoke(this.props, 'onValueChange', value, options);\n  };\n}\n\nexport default asBaseComponent(ColorPicker);\nconst plusButtonContainerWidth = SWATCH_SIZE + 20 + 12;\nconst plusButtonContainerHeight = 92 - 2 * SWATCH_MARGIN;\nconst styles = StyleSheet.create({\n  palette: {\n    paddingLeft: plusButtonContainerWidth\n  },\n  buttonContainer: {\n    position: 'absolute',\n    left: 0,\n    width: plusButtonContainerWidth,\n    height: plusButtonContainerHeight,\n    marginTop: SWATCH_MARGIN,\n    marginBottom: SWATCH_MARGIN,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    paddingTop: 1,\n    backgroundColor: Colors.white\n  },\n  button: {\n    width: SWATCH_SIZE,\n    height: SWATCH_SIZE,\n    marginRight: 12\n  }\n});"]},"metadata":{},"sourceType":"module"}