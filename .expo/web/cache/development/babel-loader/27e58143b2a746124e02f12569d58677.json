{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/avatar/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport memoize from 'memoize-one';\nimport { Colors } from \"../../style\";\nimport { forwardRef, asBaseComponent } from \"../../commons/new\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nimport Badge, { BADGE_SIZES } from \"../badge\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport AnimatedImage from \"../animatedImage\";\nimport * as AvatarHelper from \"../../helpers/AvatarHelper\";\nvar deprecatedProps = [{\n  old: 'isOnline',\n  new: 'badgeProps.backgroundColor'\n}, {\n  old: 'status',\n  new: 'badgeProps.backgroundColor'\n}, {\n  old: 'imageSource',\n  new: 'source'\n}];\nexport var StatusModes;\n\n(function (StatusModes) {\n  StatusModes[\"ONLINE\"] = \"ONLINE\";\n  StatusModes[\"OFFLINE\"] = \"OFFLINE\";\n  StatusModes[\"AWAY\"] = \"AWAY\";\n  StatusModes[\"NONE\"] = \"NONE\";\n})(StatusModes || (StatusModes = {}));\n\nexport var BadgePosition;\n\n(function (BadgePosition) {\n  BadgePosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  BadgePosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  BadgePosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n  BadgePosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n})(BadgePosition || (BadgePosition = {}));\n\nvar DEFAULT_BADGE_SIZE = 'pimpleBig';\n\nvar Avatar = function (_PureComponent) {\n  _inherits(Avatar, _PureComponent);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar(props) {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    _this = _super.call(this, props);\n\n    _this.getBadgeBorderWidth = function () {\n      return _.get(_this.props, 'badgeProps.borderWidth', 0);\n    };\n\n    _this.getBadgeSize = function () {\n      var _this$props$badgeProp, _this$props, _this$props$badgeProp2;\n\n      var badgeSize = (_this$props$badgeProp = (_this$props = _this.props) == null ? void 0 : (_this$props$badgeProp2 = _this$props.badgeProps) == null ? void 0 : _this$props$badgeProp2.size) != null ? _this$props$badgeProp : DEFAULT_BADGE_SIZE;\n\n      if (_.isString(badgeSize)) {\n        return BADGE_SIZES[badgeSize] || BADGE_SIZES[DEFAULT_BADGE_SIZE];\n      }\n\n      return badgeSize;\n    };\n\n    _this.getBadgePosition = function () {\n      var _badgeAlignment;\n\n      var _this$props2 = _this.props,\n          size = _this$props2.size,\n          badgePosition = _this$props2.badgePosition;\n      var radius = size / 2;\n      var x = Math.sqrt(Math.pow(radius, 2) * 2);\n      var y = x - radius;\n      var shift = Math.sqrt(Math.pow(y, 2) / 2) - (_this.getBadgeSize() + _this.getBadgeBorderWidth() * 2) / 2;\n\n      var badgeLocation = _.split(_.toLower(badgePosition), '_', 2);\n\n      var badgeAlignment = (_badgeAlignment = {\n        position: 'absolute'\n      }, _defineProperty(_badgeAlignment, badgeLocation[0], shift), _defineProperty(_badgeAlignment, badgeLocation[1], shift), _badgeAlignment);\n      return badgeAlignment;\n    };\n\n    _this.getText = memoize(function (label, name) {\n      var text = label;\n\n      if (_.isNil(label) && !_.isNil(name)) {\n        text = AvatarHelper.getInitials(name);\n      }\n\n      return text;\n    });\n    _this.getBackgroundColor = memoize(function (text, avatarColors, hashFunction, defaultColor) {\n      return AvatarHelper.getBackgroundColor(text, avatarColors, hashFunction, defaultColor);\n    });\n    _this.styles = createStyles(props);\n    deprecatedProps.forEach(function (prop) {\n      if (props[prop.old]) {\n        console.warn(\"\\\"Avatar's \" + prop.old + \"\\\" property is deprecated, please use \\\"\" + prop.new + \"\\\"\");\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"getContainerStyle\",\n    value: function getContainerStyle() {\n      var size = this.props.size;\n      return {\n        width: size,\n        height: size,\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: size / 2\n      };\n    }\n  }, {\n    key: \"getInitialsContainer\",\n    value: function getInitialsContainer() {\n      var size = this.props.size;\n      return _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: size / 2\n      });\n    }\n  }, {\n    key: \"getRibbonStyle\",\n    value: function getRibbonStyle() {\n      var size = this.props.size;\n      return {\n        position: 'absolute',\n        top: '10%',\n        left: size / 1.7,\n        borderRadius: size / 2\n      };\n    }\n  }, {\n    key: \"getStatusBadgeColor\",\n    value: function getStatusBadgeColor(status) {\n      switch (status) {\n        case Avatar.modes.AWAY:\n          return Colors.yellow30;\n\n        case Avatar.modes.ONLINE:\n          return Colors.green30;\n\n        case Avatar.modes.OFFLINE:\n          return Colors.dark60;\n\n        case Avatar.modes.NONE:\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getBadgeColor\",\n    value: function getBadgeColor() {\n      var _this$props3 = this.props,\n          isOnline = _this$props3.isOnline,\n          status = _this$props3.status;\n      var statusColor = this.getStatusBadgeColor(status);\n      var onlineColor = isOnline ? Colors.green30 : undefined;\n      return _.get(this.props, 'badgeProps.backgroundColor') || statusColor || onlineColor;\n    }\n  }, {\n    key: \"renderBadge\",\n    value: function renderBadge() {\n      var _this$props4 = this.props,\n          testID = _this$props4.testID,\n          badgeProps = _this$props4.badgeProps;\n\n      if (badgeProps || this.getBadgeColor()) {\n        return React.createElement(Badge, _extends({\n          backgroundColor: this.getBadgeColor(),\n          size: this.getBadgeSize()\n        }, badgeProps, {\n          containerStyle: this.getBadgePosition(),\n          testID: testID + \".onlineBadge\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 14\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"renderRibbon\",\n    value: function renderRibbon() {\n      var _this$props5 = this.props,\n          ribbonLabel = _this$props5.ribbonLabel,\n          ribbonStyle = _this$props5.ribbonStyle,\n          ribbonLabelStyle = _this$props5.ribbonLabelStyle,\n          customRibbon = _this$props5.customRibbon;\n\n      if (ribbonLabel) {\n        return customRibbon ? React.createElement(View, {\n          style: this.getRibbonStyle(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }\n        }, customRibbon) : React.createElement(View, {\n          style: [this.getRibbonStyle(), this.styles.ribbon, ribbonStyle],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 89\n          }\n        }, React.createElement(Text, {\n          numberOfLines: 1,\n          text100: true,\n          white: true,\n          style: [ribbonLabelStyle],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 11\n          }\n        }, ribbonLabel));\n      }\n    }\n  }, {\n    key: \"renderImage\",\n    value: function renderImage() {\n      var _this$props6 = this.props,\n          animate = _this$props6.animate,\n          source = _this$props6.source,\n          imageSource = _this$props6.imageSource,\n          onImageLoadStart = _this$props6.onImageLoadStart,\n          onImageLoadEnd = _this$props6.onImageLoadEnd,\n          onImageLoadError = _this$props6.onImageLoadError,\n          testID = _this$props6.testID,\n          imageProps = _this$props6.imageProps,\n          imageStyle = _this$props6.imageStyle;\n      var hasImage = !_.isUndefined(imageSource) || !_.isUndefined(source);\n      var ImageContainer = animate ? AnimatedImage : Image;\n      var avatarImageSource = imageSource || source;\n\n      if (hasImage) {\n        return React.createElement(ImageContainer, _extends({\n          animate: animate,\n          style: [this.getContainerStyle(), StyleSheet.absoluteFillObject, imageStyle],\n          source: avatarImageSource,\n          onLoadStart: onImageLoadStart,\n          onLoadEnd: onImageLoadEnd,\n          onError: onImageLoadError,\n          testID: testID + \".image\",\n          containerStyle: this.getContainerStyle()\n        }, imageProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 14\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      var _this$props7 = this.props,\n          label = _this$props7.label,\n          name = _this$props7.name;\n      return this.getText(label, name);\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      var _this$props8 = this.props,\n          backgroundColor = _this$props8.backgroundColor,\n          useAutoColors = _this$props8.useAutoColors,\n          autoColorsConfig = _this$props8.autoColorsConfig,\n          name = _this$props8.name;\n\n      if (backgroundColor) {\n        return backgroundColor;\n      }\n\n      var _ref = autoColorsConfig || {},\n          _ref$avatarColors = _ref.avatarColors,\n          avatarColors = _ref$avatarColors === void 0 ? AvatarHelper.getAvatarColors() : _ref$avatarColors,\n          _ref$hashFunction = _ref.hashFunction,\n          hashFunction = _ref$hashFunction === void 0 ? AvatarHelper.hashStringToNumber : _ref$hashFunction,\n          _ref$defaultColor = _ref.defaultColor,\n          defaultColor = _ref$defaultColor === void 0 ? Colors.grey80 : _ref$defaultColor;\n\n      if (useAutoColors) {\n        return this.getBackgroundColor(name, avatarColors, hashFunction, defaultColor);\n      } else {\n        return defaultColor;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n          color = _this$props9.labelColor,\n          source = _this$props9.source,\n          imageSource = _this$props9.imageSource,\n          onPress = _this$props9.onPress,\n          containerStyle = _this$props9.containerStyle,\n          children = _this$props9.children,\n          size = _this$props9.size,\n          testID = _this$props9.testID,\n          forwardedRef = _this$props9.forwardedRef;\n      var Container = onPress ? TouchableOpacity : View;\n      var hasImage = !_.isUndefined(imageSource) || !_.isUndefined(source);\n      var fontSizeToImageSizeRatio = 0.32;\n      var fontSize = size * fontSizeToImageSizeRatio;\n      var text = this.text;\n      return React.createElement(Container, _extends({\n        style: [this.getContainerStyle(), containerStyle],\n        ref: forwardedRef,\n        testID: testID,\n        onPress: onPress,\n        accessible: !_.isUndefined(onPress),\n        accessibilityLabel: 'Avatar',\n        accessibilityRole: onPress ? 'button' : 'image'\n      }, extractAccessibilityProps(this.props), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 12\n        }\n      }), React.createElement(View, {\n        style: [this.getInitialsContainer(), {\n          backgroundColor: this.backgroundColor\n        }, hasImage && this.styles.initialsContainerWithInset],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 9\n        }\n      }, !_.isUndefined(text) && React.createElement(Text, {\n        numberOfLines: 1,\n        style: [{\n          fontSize: fontSize\n        }, this.styles.initials, {\n          color: color\n        }],\n        testID: testID + \".label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 36\n        }\n      }, text)), this.renderImage(), this.renderBadge(), this.renderRibbon(), children);\n    }\n  }]);\n\n  return Avatar;\n}(PureComponent);\n\nAvatar.propTypes = {\n  animate: _pt.bool,\n  backgroundColor: _pt.string,\n  badgePosition: _pt.oneOf([\"TOP_RIGHT\", \"TOP_LEFT\", \"BOTTOM_RIGHT\", \"BOTTOM_LEFT\"]),\n  name: _pt.string,\n  useAutoColors: _pt.bool,\n  autoColorsConfig: _pt.shape({\n    avatarColors: _pt.arrayOf(_pt.string),\n    hashFunction: _pt.func,\n    defaultColor: _pt.string\n  }),\n  label: _pt.string,\n  labelColor: _pt.string,\n  ribbonLabel: _pt.string,\n  customRibbon: _pt.element,\n  isOnline: _pt.bool,\n  status: _pt.oneOf([\"ONLINE\", \"OFFLINE\", \"AWAY\", \"NONE\"]),\n  size: _pt.number,\n  onPress: _pt.func,\n  testID: _pt.string\n};\nAvatar.displayName = 'Avatar';\nAvatar.modes = StatusModes;\nAvatar.badgePosition = BadgePosition;\nAvatar.defaultProps = {\n  animate: false,\n  size: 50,\n  labelColor: Colors.dark10,\n  badgePosition: BadgePosition.TOP_RIGHT\n};\n\nfunction createStyles(props) {\n  var labelColor = props.labelColor;\n  var styles = StyleSheet.create({\n    initialsContainerWithInset: {\n      top: 1,\n      right: 1,\n      bottom: 1,\n      left: 1\n    },\n    initials: {\n      color: labelColor,\n      backgroundColor: 'transparent',\n      lineHeight: undefined\n    },\n    ribbon: {\n      backgroundColor: Colors.primary,\n      paddingHorizontal: 6,\n      paddingVertical: 3\n    }\n  });\n  return styles;\n}\n\nexport { Avatar };\nexport default asBaseComponent(forwardRef(Avatar));","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/avatar/index.js"],"names":["_pt","_","React","PureComponent","memoize","Colors","forwardRef","asBaseComponent","extractAccessibilityProps","Badge","BADGE_SIZES","View","Text","Image","AnimatedImage","AvatarHelper","deprecatedProps","old","new","StatusModes","BadgePosition","DEFAULT_BADGE_SIZE","Avatar","props","getBadgeBorderWidth","get","getBadgeSize","badgeSize","badgeProps","size","isString","getBadgePosition","badgePosition","radius","x","Math","sqrt","y","shift","badgeLocation","split","toLower","badgeAlignment","position","getText","label","name","text","isNil","getInitials","getBackgroundColor","avatarColors","hashFunction","defaultColor","styles","createStyles","forEach","prop","console","warn","width","height","alignItems","justifyContent","borderRadius","StyleSheet","absoluteFillObject","top","left","status","modes","AWAY","yellow30","ONLINE","green30","OFFLINE","dark60","NONE","isOnline","statusColor","getStatusBadgeColor","onlineColor","undefined","testID","getBadgeColor","ribbonLabel","ribbonStyle","ribbonLabelStyle","customRibbon","getRibbonStyle","ribbon","animate","source","imageSource","onImageLoadStart","onImageLoadEnd","onImageLoadError","imageProps","imageStyle","hasImage","isUndefined","ImageContainer","avatarImageSource","getContainerStyle","backgroundColor","useAutoColors","autoColorsConfig","getAvatarColors","hashStringToNumber","grey80","color","labelColor","onPress","containerStyle","children","forwardedRef","Container","TouchableOpacity","fontSizeToImageSizeRatio","fontSize","getInitialsContainer","initialsContainerWithInset","initials","renderImage","renderBadge","renderRibbon","propTypes","bool","string","oneOf","shape","arrayOf","func","element","number","displayName","defaultProps","dark10","TOP_RIGHT","create","right","bottom","lineHeight","primary","paddingHorizontal","paddingVertical"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\nimport memoize from 'memoize-one';\nimport { Colors } from \"../../style\";\nimport { forwardRef, asBaseComponent } from \"../../commons/new\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\"; //@ts-ignore\n\nimport Badge, { BADGE_SIZES } from \"../badge\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport Image from \"../image\"; // @ts-ignore\n\nimport AnimatedImage from \"../animatedImage\";\nimport * as AvatarHelper from \"../../helpers/AvatarHelper\";\nconst deprecatedProps = [{\n  old: 'isOnline',\n  new: 'badgeProps.backgroundColor'\n}, {\n  old: 'status',\n  new: 'badgeProps.backgroundColor'\n}, {\n  old: 'imageSource',\n  new: 'source'\n}];\nexport let StatusModes;\n\n(function (StatusModes) {\n  StatusModes[\"ONLINE\"] = \"ONLINE\";\n  StatusModes[\"OFFLINE\"] = \"OFFLINE\";\n  StatusModes[\"AWAY\"] = \"AWAY\";\n  StatusModes[\"NONE\"] = \"NONE\";\n})(StatusModes || (StatusModes = {}));\n\nexport let BadgePosition;\n\n(function (BadgePosition) {\n  BadgePosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  BadgePosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  BadgePosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n  BadgePosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n})(BadgePosition || (BadgePosition = {}));\n\nconst DEFAULT_BADGE_SIZE = 'pimpleBig';\n\n//TODO: remove after ComponentPropTypes deprecation;\n\n/**\n * @description: Avatar component for displaying user profile images\n * @extends: TouchableOpacity\n * @extendsnotes: (when passing onPress)\n * @extendsLink: docs/TouchableOpacity\n * @image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_1.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_2.png?raw=true\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.tsx\n */\nclass Avatar extends PureComponent {\n  static propTypes = {\n    /**\n       * Adds fade in animation when Avatar image loads\n       */\n    animate: _pt.bool,\n\n    /**\n       * Background color for Avatar\n       */\n    backgroundColor: _pt.string,\n\n    /**\n       * Badge location on Avatar\n       */\n    badgePosition: _pt.oneOf([\"TOP_RIGHT\", \"TOP_LEFT\", \"BOTTOM_RIGHT\", \"BOTTOM_LEFT\"]),\n\n    /**\n       * The name of the avatar user.\n       * If no label is provided, the initials will be generated from the name.\n       * autoColorsConfig will use the name to create the background color of the Avatar.\n       */\n    name: _pt.string,\n\n    /**\n       * Hash the name (or label) to get a color, so each name will have a specific color.\n       * Default is false.\n       */\n    useAutoColors: _pt.bool,\n\n    /**\n       * Send this to use the name to infer a backgroundColor\n       */\n    autoColorsConfig: _pt.shape({\n      /**\n         * Avatar colors to be used when useAutoColors is true\n         */\n      avatarColors: _pt.arrayOf(_pt.string),\n\n      /**\n         * Replace the default hashing function (name -> number)\n         */\n      hashFunction: _pt.func,\n\n      /**\n         * Background color in cases where the getBackgroundColor returns undefined.\n         */\n      defaultColor: _pt.string\n    }),\n\n    /**\n       * Label that can represent initials\n       */\n    label: _pt.string,\n\n    /**\n       * The label color\n       */\n    labelColor: _pt.string,\n\n    /**\n       * ribbon label to display on the avatar\n       */\n    ribbonLabel: _pt.string,\n\n    /**\n       * Custom ribbon\n       */\n    customRibbon: _pt.element,\n\n    /**\n       * Determine if to show online badge\n       */\n    isOnline: _pt.bool,\n\n    /**\n       * AWAY, ONLINE, OFFLINE or NONE mode (if set to a value other then 'NONE' will override isOnline prop)\n       */\n    status: _pt.oneOf([\"ONLINE\", \"OFFLINE\", \"AWAY\", \"NONE\"]),\n\n    /**\n       * Custom size for the Avatar\n       */\n    size: _pt.number,\n\n    /**\n       * Press handler\n       */\n    onPress: _pt.func,\n\n    /**\n       * Used as a testing identifier\n       */\n    testID: _pt.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.styles = createStyles(props);\n    deprecatedProps.forEach(prop => {\n      //@ts-ignore\n      if (props[prop.old]) {\n        console.warn(`\"Avatar's ${prop.old}\" property is deprecated, please use \"${prop.new}\"`);\n      }\n    });\n  }\n\n  static displayName = 'Avatar';\n  static modes = StatusModes;\n  static badgePosition = BadgePosition;\n  static defaultProps = {\n    animate: false,\n    size: 50,\n    labelColor: Colors.dark10,\n    badgePosition: BadgePosition.TOP_RIGHT\n  };\n\n  getContainerStyle() {\n    const {\n      size\n    } = this.props;\n    return {\n      width: size,\n      height: size,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: size / 2\n    };\n  }\n\n  getInitialsContainer() {\n    const {\n      size\n    } = this.props;\n    return { ...StyleSheet.absoluteFillObject,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: size / 2\n    };\n  }\n\n  getRibbonStyle() {\n    const {\n      size\n    } = this.props;\n    return {\n      position: 'absolute',\n      top: '10%',\n      left: size / 1.7,\n      borderRadius: size / 2\n    };\n  }\n\n  getStatusBadgeColor(status) {\n    switch (status) {\n      case Avatar.modes.AWAY:\n        return Colors.yellow30;\n\n      case Avatar.modes.ONLINE:\n        return Colors.green30;\n\n      case Avatar.modes.OFFLINE:\n        return Colors.dark60;\n\n      case Avatar.modes.NONE:\n      default:\n        return null;\n    }\n  }\n\n  getBadgeBorderWidth = () => _.get(this.props, 'badgeProps.borderWidth', 0);\n\n  getBadgeColor() {\n    const {\n      isOnline,\n      status\n    } = this.props;\n    const statusColor = this.getStatusBadgeColor(status);\n    const onlineColor = isOnline ? Colors.green30 : undefined;\n    return _.get(this.props, 'badgeProps.backgroundColor') || statusColor || onlineColor;\n  }\n\n  getBadgeSize = () => {\n    const badgeSize = this.props?.badgeProps?.size ?? DEFAULT_BADGE_SIZE;\n\n    if (_.isString(badgeSize)) {\n      return BADGE_SIZES[badgeSize] || BADGE_SIZES[DEFAULT_BADGE_SIZE];\n    }\n\n    return badgeSize;\n  };\n  getBadgePosition = () => {\n    const {\n      size,\n      badgePosition\n    } = this.props;\n    const radius = size / 2;\n    const x = Math.sqrt(radius ** 2 * 2);\n    const y = x - radius;\n    const shift = Math.sqrt(y ** 2 / 2) - (this.getBadgeSize() + this.getBadgeBorderWidth() * 2) / 2;\n\n    const badgeLocation = _.split(_.toLower(badgePosition), '_', 2);\n\n    const badgeAlignment = {\n      position: 'absolute',\n      [badgeLocation[0]]: shift,\n      [badgeLocation[1]]: shift\n    };\n    return badgeAlignment;\n  };\n\n  renderBadge() {\n    const {\n      testID,\n      badgeProps\n    } = this.props;\n\n    if (badgeProps || this.getBadgeColor()) {\n      return <Badge backgroundColor={this.getBadgeColor()} size={this.getBadgeSize()} {...badgeProps} containerStyle={this.getBadgePosition()} testID={`${testID}.onlineBadge`} />;\n    }\n  }\n\n  renderRibbon() {\n    const {\n      ribbonLabel,\n      ribbonStyle,\n      ribbonLabelStyle,\n      customRibbon\n    } = this.props;\n\n    if (ribbonLabel) {\n      return customRibbon ? <View style={this.getRibbonStyle()}>{customRibbon}</View> : <View style={[this.getRibbonStyle(), this.styles.ribbon, ribbonStyle]}>\n          <Text numberOfLines={1} text100 white style={[ribbonLabelStyle]}>\n            {ribbonLabel}\n          </Text>\n        </View>;\n    }\n  }\n\n  renderImage() {\n    const {\n      animate,\n      source,\n      // @ts-ignore\n      imageSource,\n      onImageLoadStart,\n      onImageLoadEnd,\n      onImageLoadError,\n      testID,\n      imageProps,\n      imageStyle\n    } = this.props;\n    const hasImage = !_.isUndefined(imageSource) || !_.isUndefined(source);\n    const ImageContainer = animate ? AnimatedImage : Image;\n    const avatarImageSource = imageSource || source;\n\n    if (hasImage) {\n      return <ImageContainer animate={animate} style={[this.getContainerStyle(), StyleSheet.absoluteFillObject, imageStyle]} source={avatarImageSource} onLoadStart={onImageLoadStart} onLoadEnd={onImageLoadEnd} onError={onImageLoadError} testID={`${testID}.image`} containerStyle={this.getContainerStyle()} {...imageProps} />;\n    }\n  }\n\n  getText = memoize((label, name) => {\n    let text = label;\n\n    if (_.isNil(label) && !_.isNil(name)) {\n      text = AvatarHelper.getInitials(name);\n    }\n\n    return text;\n  });\n\n  get text() {\n    const {\n      label,\n      name\n    } = this.props;\n    return this.getText(label, name);\n  }\n\n  getBackgroundColor = memoize((text, avatarColors, hashFunction, defaultColor) => {\n    return AvatarHelper.getBackgroundColor(text, avatarColors, hashFunction, defaultColor);\n  });\n\n  get backgroundColor() {\n    const {\n      backgroundColor,\n      useAutoColors,\n      autoColorsConfig,\n      name\n    } = this.props;\n\n    if (backgroundColor) {\n      return backgroundColor;\n    }\n\n    const {\n      avatarColors = AvatarHelper.getAvatarColors(),\n      hashFunction = AvatarHelper.hashStringToNumber,\n      defaultColor = Colors.grey80\n    } = autoColorsConfig || {};\n\n    if (useAutoColors) {\n      return this.getBackgroundColor(name, avatarColors, hashFunction, defaultColor);\n    } else {\n      return defaultColor;\n    }\n  }\n\n  render() {\n    const {\n      labelColor: color,\n      source,\n      //@ts-ignore\n      imageSource,\n      onPress,\n      containerStyle,\n      children,\n      size,\n      testID,\n      //@ts-ignore\n      forwardedRef\n    } = this.props;\n    const Container = onPress ? TouchableOpacity : View;\n    const hasImage = !_.isUndefined(imageSource) || !_.isUndefined(source);\n    const fontSizeToImageSizeRatio = 0.32;\n    const fontSize = size * fontSizeToImageSizeRatio;\n    const text = this.text;\n    return <Container style={[this.getContainerStyle(), containerStyle]} ref={forwardedRef} testID={testID} onPress={onPress} accessible={!_.isUndefined(onPress)} accessibilityLabel={'Avatar'} accessibilityRole={onPress ? 'button' : 'image'} {...extractAccessibilityProps(this.props)}>\n        <View style={[this.getInitialsContainer(), {\n        backgroundColor: this.backgroundColor\n      }, hasImage && this.styles.initialsContainerWithInset]}>\n          {!_.isUndefined(text) && <Text numberOfLines={1} style={[{\n          fontSize\n        }, this.styles.initials, {\n          color\n        }]} testID={`${testID}.label`}>\n              {text}\n            </Text>}\n        </View>\n        {this.renderImage()}\n        {this.renderBadge()}\n        {this.renderRibbon()}\n        {children}\n      </Container>;\n  }\n\n}\n\nfunction createStyles(props) {\n  const {\n    labelColor\n  } = props;\n  const styles = StyleSheet.create({\n    initialsContainerWithInset: {\n      top: 1,\n      right: 1,\n      bottom: 1,\n      left: 1\n    },\n    initials: {\n      color: labelColor,\n      backgroundColor: 'transparent',\n      lineHeight: undefined\n    },\n    ribbon: {\n      backgroundColor: Colors.primary,\n      paddingHorizontal: 6,\n      paddingVertical: 3\n    }\n  });\n  return styles;\n}\n\nexport { Avatar }; // For tests\n\nexport default asBaseComponent(forwardRef(Avatar));"]},"metadata":{},"sourceType":"module"}