{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useMemoOne } from \"use-memo-one\";\nimport Animated from \"react-native-reanimated\";\nimport { horizontalPanGestureHandler, onGestureEvent, panGestureHandler, verticalPanGestureHandler } from \"./Gesture\";\nimport { vec } from \"./Vectors\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    diff = Animated.diff,\n    set = Animated.set,\n    useCode = Animated.useCode,\n    debug = Animated.debug,\n    block = Animated.block;\nexport var useGestureHandler = function useGestureHandler(nativeEvent) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useMemoOne(function () {\n    return onGestureEvent(nativeEvent);\n  }, deps);\n};\nexport var usePanGestureHandler = function usePanGestureHandler() {\n  var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return useMemoOne(function () {\n    return panGestureHandler();\n  }, deps);\n};\nexport var useVerticalPanGestureHandler = function useVerticalPanGestureHandler() {\n  var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return useMemoOne(function () {\n    return verticalPanGestureHandler();\n  }, deps);\n};\nexport var useHorizontalPanGestureHandler = function useHorizontalPanGestureHandler() {\n  var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return useMemoOne(function () {\n    return horizontalPanGestureHandler();\n  }, deps);\n};\nexport var useVector = function useVector(x, y) {\n  var deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return useMemoOne(function () {\n    return vec.createValue(x, y);\n  }, deps);\n};\nexport var useClock = function useClock(deps) {\n  return useMemoOne(function () {\n    return new Clock();\n  }, deps);\n};\nexport var useValue = function useValue(value) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useMemoOne(function () {\n    return new Value(value);\n  }, deps);\n};\nexport var useValues = function useValues(values) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useMemoOne(function () {\n    return values.map(function (v) {\n      return new Value(v);\n    });\n  }, deps);\n};\nexport var useNamedValues = function useNamedValues(values) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useMemoOne(function () {\n    var result = {};\n    Object.keys(values).forEach(function (key) {\n      result[key] = new Value(values[key]);\n    });\n    return result;\n  }, deps);\n};\nexport var useClocks = function useClocks(numberOfClocks) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useMemoOne(function () {\n    return new Array(numberOfClocks).fill(0).map(function () {\n      return new Clock();\n    });\n  }, deps);\n};\nexport var useDiff = function useDiff(node) {\n  var _useValues = useValues([0], [node]),\n      _useValues2 = _slicedToArray(_useValues, 1),\n      dDiff = _useValues2[0];\n\n  useCode(function () {\n    return set(dDiff, diff(node));\n  }, [dDiff, node]);\n  return dDiff;\n};\nexport var useDebug = function useDebug(values) {\n  var keys = Object.keys(values);\n  useCode(function () {\n    return block(keys.map(function (name) {\n      return debug(name, values[name]);\n    }));\n  }, [keys, values]);\n};","map":{"version":3,"sources":["Hooks.ts"],"names":["Clock","Value","diff","set","useCode","debug","block","Animated","useGestureHandler","deps","useMemoOne","onGestureEvent","usePanGestureHandler","panGestureHandler","useVerticalPanGestureHandler","verticalPanGestureHandler","useHorizontalPanGestureHandler","horizontalPanGestureHandler","useVector","vec","useClock","useValue","useValues","values","useNamedValues","result","Object","useClocks","useDiff","dDiff","useDebug","keys"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useMemoOne } from \"use-memo-one\";\nimport Animated from \"react-native-reanimated\";\nimport {\n  horizontalPanGestureHandler,\n  onGestureEvent,\n  panGestureHandler,\n  verticalPanGestureHandler,\n} from \"./Gesture\";\nimport { vec } from \"./Vectors\";\n\ntype Dependencies = readonly unknown[];\n\nconst { Clock, Value, diff, set, useCode, debug, block } = Animated;\n\nexport const useGestureHandler = (\n  nativeEvent: Parameters<typeof onGestureEvent>[0],\n  deps: Dependencies = []\n) => useMemoOne(() => onGestureEvent(nativeEvent), deps);\n\nexport const usePanGestureHandler = (deps: Dependencies = []) =>\n  useMemoOne(() => panGestureHandler(), deps);\n\nexport const useVerticalPanGestureHandler = (deps: Dependencies = []) =>\n  useMemoOne(() => verticalPanGestureHandler(), deps);\n\nexport const useHorizontalPanGestureHandler = (deps: Dependencies = []) =>\n  useMemoOne(() => horizontalPanGestureHandler(), deps);\n\ntype Atomic = string | number | boolean;\n\nexport const useVector = (x: number, y: number, deps: Dependencies = []) =>\n  useMemoOne(() => vec.createValue(x, y), deps);\n\nexport const useClock = (deps: Dependencies) =>\n  useMemoOne(() => new Clock(), deps);\n\nexport const useValue = <V extends Atomic>(value: V, deps: Dependencies = []) =>\n  useMemoOne(() => new Value(value), deps);\n\nexport const useValues = <V extends Atomic>(\n  values: V[],\n  deps: Dependencies = []\n): Animated.Value<V>[] =>\n  useMemoOne(() => values.map((v) => new Value(v)), deps);\n\nexport const useNamedValues = <V extends Atomic, K extends string>(\n  values: Record<K, V>,\n  deps: Dependencies = []\n): Record<K, Animated.Value<V>> =>\n  useMemoOne(() => {\n    const result: Record<string, Animated.Value<V>> = {};\n    Object.keys(values).forEach((key) => {\n      result[key as K] = new Value(values[key as K]);\n    });\n    return result;\n  }, deps);\n\nexport const useClocks = (\n  numberOfClocks: number,\n  deps: Dependencies = []\n): Animated.Clock[] =>\n  useMemoOne(\n    () => new Array(numberOfClocks).fill(0).map(() => new Clock()),\n    deps\n  );\n\nexport const useDiff = (node: Animated.Node<number>) => {\n  const [dDiff] = useValues<number>([0], [node]);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const useDebug = (values: { [key: string]: Animated.Node<number> }) => {\n  const keys = Object.keys(values);\n  useCode(() => block(keys.map((name) => debug(name, values[name]))), [\n    keys,\n    values,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}