{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport _ from 'lodash';\nimport Color from 'color';\nimport tinycolor from 'tinycolor2';\nimport { colorsPalette, themeColors } from \"./colorsPalette\";\nimport ColorName from \"./colorName\";\nexport var Colors = function () {\n  function Colors() {\n    var _this = this;\n\n    _classCallCheck(this, Colors);\n\n    this.schemes = {\n      light: {},\n      dark: {}\n    };\n    this.generateColorPalette = _.memoize(function (color) {\n      var hsl = Color(color).hsl();\n      var lightness = Math.round(hsl.color[2]);\n      var ls = [hsl.color[2]];\n      var l = lightness - 10;\n\n      while (l >= 20) {\n        ls.unshift(l);\n        l -= 10;\n      }\n\n      l = lightness + 10;\n\n      while (l < 100) {\n        ls.push(l);\n        l += 10;\n      }\n\n      var tints = [];\n\n      _.forEach(ls, function (e) {\n        var tint = generateColorTint(color, e);\n        tints.push(tint);\n      });\n\n      var sliced = tints.slice(0, 8);\n      var adjusted = adjustSaturation(sliced, color);\n      return adjusted || sliced;\n    });\n\n    var colors = _extends(colorsPalette, themeColors);\n\n    _extends(this, colors);\n\n    Appearance.addChangeListener(function (_ref) {\n      var colorScheme = _ref.colorScheme;\n\n      _extends(_this, _this.schemes[colorScheme != null ? colorScheme : 'light']);\n    });\n  }\n\n  _createClass(Colors, [{\n    key: \"loadColors\",\n    value: function loadColors(colors) {\n      var _this2 = this;\n\n      _.forEach(colors, function (value, key) {\n        _this2[key] = value;\n      });\n    }\n  }, {\n    key: \"loadSchemes\",\n    value: function loadSchemes(schemes) {\n      var lightSchemeKeys = Object.keys(schemes.light);\n      var darkSchemeKeys = Object.keys(schemes.dark);\n\n      var missingKeys = _.xor(lightSchemeKeys, darkSchemeKeys);\n\n      if (!_.isEmpty(missingKeys)) {\n        console.error(\"There is a mismatch in scheme keys: \" + missingKeys.join(', '));\n      }\n\n      this.schemes = schemes;\n      var colorScheme = Appearance.getColorScheme();\n\n      _extends(this, this.schemes[colorScheme != null ? colorScheme : 'light']);\n    }\n  }, {\n    key: \"rgba\",\n    value: function rgba(p1, p2, p3, p4) {\n      var hex;\n      var opacity;\n      var red;\n      var green;\n      var blue;\n\n      if (arguments.length === 2 && typeof p1 === 'string') {\n        hex = p1;\n        opacity = p2;\n        hex = validateHex(hex);\n        red = parseInt(hex.substring(0, 2), 16);\n        green = parseInt(hex.substring(2, 4), 16);\n        blue = parseInt(hex.substring(4, 6), 16);\n      } else if (arguments.length === 4 && typeof p1 === 'number') {\n        red = validateRGB(p1);\n        green = validateRGB(p2);\n        blue = validateRGB(p3);\n        opacity = p4;\n      } else {\n        throw new Error('rgba can work with either 2 or 4 arguments');\n      }\n\n      return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + opacity + \")\";\n    }\n  }, {\n    key: \"getBackgroundKeysPattern\",\n    value: function getBackgroundKeysPattern() {\n      return /^(bg-|background-)/;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(color) {\n      if (_.isNil(color) || color === 'transparent') {\n        return true;\n      }\n\n      try {\n        Color(color);\n        return false;\n      } catch (error) {\n        console.warn('Colors.isEmpty failed:', error);\n        return true;\n      }\n    }\n  }, {\n    key: \"getColorTint\",\n    value: function getColorTint(color, tintKey) {\n      var _this3 = this;\n\n      if (_.isUndefined(tintKey) || isNaN(tintKey) || _.isUndefined(color)) {\n        return color;\n      }\n\n      if (color === 'transparent') {\n        return color;\n      }\n\n      var colorKey = _.findKey(this, function (_value, key) {\n        return _this3[key] === color;\n      });\n\n      if (colorKey) {\n        var requiredColorKey = \"\" + colorKey.slice(0, -2) + tintKey;\n        var requiredColor = this[requiredColorKey];\n\n        if (_.isUndefined(requiredColor)) {\n          return this.getTintedColorForDynamicHex(color, tintKey);\n        }\n\n        return requiredColor;\n      }\n\n      return this.getTintedColorForDynamicHex(color, tintKey);\n    }\n  }, {\n    key: \"getColorName\",\n    value: function getColorName(color) {\n      return ColorName.name(color)[1];\n    }\n  }, {\n    key: \"getTintedColorForDynamicHex\",\n    value: function getTintedColorForDynamicHex(color, tintKey) {\n      var tintLevel = Math.floor(Number(tintKey) / 10);\n      tintLevel = Math.max(1, tintLevel);\n      tintLevel = Math.min(8, tintLevel);\n      var colorsPalette = this.generateColorPalette(color);\n      return colorsPalette[tintLevel - 1];\n    }\n  }, {\n    key: \"isDark\",\n    value: function isDark(color) {\n      var lum = tinycolor(color).getLuminance();\n      return lum < 0.55;\n    }\n  }, {\n    key: \"isValidHex\",\n    value: function isValidHex(string) {\n      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(string);\n    }\n  }, {\n    key: \"getHexString\",\n    value: function getHexString(color) {\n      return tinycolor(color).toHexString();\n    }\n  }, {\n    key: \"getHSL\",\n    value: function getHSL(color) {\n      return tinycolor(color).toHsl();\n    }\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent(color) {\n      return color && _.toUpper(color) === _.toUpper('transparent');\n    }\n  }, {\n    key: \"areEqual\",\n    value: function areEqual(colorA, colorB) {\n      return _.toLower(colorA) === _.toLower(colorB);\n    }\n  }]);\n\n  return Colors;\n}();\n\nfunction adjustSaturation(colors, color) {\n  var array;\n  var lightnessLevel = 80;\n  var saturationLevel = 60;\n  var hsl = Color(color).hsl();\n  var lightness = Math.round(hsl.color[2]);\n\n  if (lightness > lightnessLevel) {\n    var saturation = Math.round(hsl.color[1]);\n\n    if (saturation > saturationLevel) {\n      array = _.map(colors, function (e) {\n        return e !== color ? addSaturation(e, saturationLevel) : e;\n      });\n    }\n  }\n\n  return array;\n}\n\nfunction addSaturation(color, saturation) {\n  var hsl = Color(color).hsl();\n  hsl.color[1] = saturation;\n  return hsl.hex();\n}\n\nfunction generateColorTint(color, tintLevel) {\n  var hsl = Color(color).hsl();\n  hsl.color[2] = tintLevel;\n  return hsl.hex();\n}\n\nfunction validateRGB(value) {\n  if (isNaN(value) || value > 255 || value < 0) {\n    throw new Error(value + \" is invalid rgb code, please use number between 0-255\");\n  }\n\n  return value;\n}\n\nfunction validateHex(value) {\n  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value)) {\n    throw new Error(value + \" is invalid hex color\");\n  }\n\n  value = value.replace('#', '');\n\n  if (value.length === 3) {\n    value = threeDigitHexToSix(value);\n  }\n\n  return value;\n}\n\nfunction threeDigitHexToSix(value) {\n  return value.replace(/./g, '$&$&');\n}\n\nvar TypedColors = Colors;\nvar colorObject = new TypedColors();\ncolorObject.loadColors(colorsPalette);\nexport default colorObject;","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/style/colors.js"],"names":["_","Color","tinycolor","colorsPalette","themeColors","ColorName","Colors","schemes","light","dark","generateColorPalette","memoize","color","hsl","lightness","Math","round","ls","l","unshift","push","tints","forEach","e","tint","generateColorTint","sliced","slice","adjusted","adjustSaturation","colors","Appearance","addChangeListener","colorScheme","value","key","lightSchemeKeys","Object","keys","darkSchemeKeys","missingKeys","xor","isEmpty","console","error","join","getColorScheme","p1","p2","p3","p4","hex","opacity","red","green","blue","arguments","length","validateHex","parseInt","substring","validateRGB","Error","isNil","warn","tintKey","isUndefined","isNaN","colorKey","findKey","_value","requiredColorKey","requiredColor","getTintedColorForDynamicHex","name","tintLevel","floor","Number","max","min","lum","getLuminance","string","test","toHexString","toHsl","toUpper","colorA","colorB","toLower","array","lightnessLevel","saturationLevel","saturation","map","addSaturation","replace","threeDigitHexToSix","TypedColors","colorObject","loadColors"],"mappings":";;;;AACA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,WAAxB;AAEA,OAAOC,SAAP;AACA,WAAaC,MAAb;AAME,oBAAc;AAAA;;AAAA;;AAAA,SALdC,OAKc,GALJ;AACRC,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,IAAI,EAAE;AAFE,KAKI;AAAA,SAuIdC,oBAvIc,GAuISV,CAAC,CAACW,OAAF,CAAU,UAAAC,KAAK,EAAI;AACxC,UAAMC,GAAG,GAAGZ,KAAK,CAACW,KAAD,CAAL,CAAaC,GAAb,EAAZ;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACD,KAAJ,CAAU,CAAV,CAAX,CAAlB;AACA,UAAMK,EAAE,GAAG,CAACJ,GAAG,CAACD,KAAJ,CAAU,CAAV,CAAD,CAAX;AACA,UAAIM,CAAC,GAAGJ,SAAS,GAAG,EAApB;;AAEA,aAAOI,CAAC,IAAI,EAAZ,EAAgB;AACdD,QAAAA,EAAE,CAACE,OAAH,CAAWD,CAAX;AACAA,QAAAA,CAAC,IAAI,EAAL;AACD;;AAEDA,MAAAA,CAAC,GAAGJ,SAAS,GAAG,EAAhB;;AAEA,aAAOI,CAAC,GAAG,GAAX,EAAgB;AACdD,QAAAA,EAAE,CAACG,IAAH,CAAQF,CAAR;AACAA,QAAAA,CAAC,IAAI,EAAL;AACD;;AAED,UAAMG,KAAK,GAAG,EAAd;;AAEArB,MAAAA,CAAC,CAACsB,OAAF,CAAUL,EAAV,EAAc,UAAAM,CAAC,EAAI;AACjB,YAAMC,IAAI,GAAGC,iBAAiB,CAACb,KAAD,EAAQW,CAAR,CAA9B;AACAF,QAAAA,KAAK,CAACD,IAAN,CAAWI,IAAX;AACD,OAHD;;AAKA,UAAME,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAf;AACA,UAAMC,QAAQ,GAAGC,gBAAgB,CAACH,MAAD,EAASd,KAAT,CAAjC;AACA,aAAOgB,QAAQ,IAAIF,MAAnB;AACD,KA5BsB,CAvIT;;AACZ,QAAMI,MAAM,GAAG,SAAc3B,aAAd,EAA6BC,WAA7B,CAAf;;AACA,aAAc,IAAd,EAAoB0B,MAApB;;AACAC,IAAAA,UAAU,CAACC,iBAAX,CAA6B,gBAEvB;AAAA,UADJC,WACI,QADJA,WACI;;AACJ,eAAc,KAAd,EAAoB,KAAI,CAAC1B,OAAL,CAAa0B,WAAb,WAAaA,WAAb,GAA4B,OAA5B,CAApB;AACD,KAJD;AAKD;;AAdH;AAAA;AAAA,WAsBE,oBAAWH,MAAX,EAAmB;AAAA;;AACjB9B,MAAAA,CAAC,CAACsB,OAAF,CAAUQ,MAAV,EAAkB,UAACI,KAAD,EAAQC,GAAR,EAAgB;AAChC,QAAA,MAAI,CAACA,GAAD,CAAJ,GAAYD,KAAZ;AACD,OAFD;AAGD;AA1BH;AAAA;AAAA,WAkCE,qBAAY3B,OAAZ,EAAqB;AACnB,UAAM6B,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAY/B,OAAO,CAACC,KAApB,CAAxB;AACA,UAAM+B,cAAc,GAAGF,MAAM,CAACC,IAAP,CAAY/B,OAAO,CAACE,IAApB,CAAvB;;AAEA,UAAM+B,WAAW,GAAGxC,CAAC,CAACyC,GAAF,CAAML,eAAN,EAAuBG,cAAvB,CAApB;;AAEA,UAAI,CAACvC,CAAC,CAAC0C,OAAF,CAAUF,WAAV,CAAL,EAA6B;AAC3BG,QAAAA,OAAO,CAACC,KAAR,0CAAqDJ,WAAW,CAACK,IAAZ,CAAiB,IAAjB,CAArD;AACD;;AAED,WAAKtC,OAAL,GAAeA,OAAf;AACA,UAAM0B,WAAW,GAAGF,UAAU,CAACe,cAAX,EAApB;;AACA,eAAc,IAAd,EAAoB,KAAKvC,OAAL,CAAa0B,WAAb,WAAaA,WAAb,GAA4B,OAA5B,CAApB;AACD;AA/CH;AAAA;AAAA,WA0DE,cAAKc,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqB;AACnB,UAAIC,GAAJ;AACA,UAAIC,OAAJ;AACA,UAAIC,GAAJ;AACA,UAAIC,KAAJ;AACA,UAAIC,IAAJ;;AAEA,UAAIC,SAAS,CAACC,MAAV,KAAqB,CAArB,IAA0B,OAAOV,EAAP,KAAc,QAA5C,EAAsD;AACpDI,QAAAA,GAAG,GAAGJ,EAAN;AACAK,QAAAA,OAAO,GAAGJ,EAAV;AACAG,QAAAA,GAAG,GAAGO,WAAW,CAACP,GAAD,CAAjB;AACAE,QAAAA,GAAG,GAAGM,QAAQ,CAACR,GAAG,CAACS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAd;AACAN,QAAAA,KAAK,GAAGK,QAAQ,CAACR,GAAG,CAACS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAhB;AACAL,QAAAA,IAAI,GAAGI,QAAQ,CAACR,GAAG,CAACS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAf;AACD,OAPD,MAOO,IAAIJ,SAAS,CAACC,MAAV,KAAqB,CAArB,IAA0B,OAAOV,EAAP,KAAc,QAA5C,EAAsD;AAC3DM,QAAAA,GAAG,GAAGQ,WAAW,CAACd,EAAD,CAAjB;AACAO,QAAAA,KAAK,GAAGO,WAAW,CAACb,EAAD,CAAnB;AACAO,QAAAA,IAAI,GAAGM,WAAW,CAACZ,EAAD,CAAlB;AACAG,QAAAA,OAAO,GAAGF,EAAV;AACD,OALM,MAKA;AACL,cAAM,IAAIY,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,uBAAeT,GAAf,UAAuBC,KAAvB,UAAiCC,IAAjC,UAA0CH,OAA1C;AACD;AAlFH;AAAA;AAAA,WAoFE,oCAA2B;AACzB,aAAO,oBAAP;AACD;AAtFH;AAAA;AAAA,WAwFE,iBAAQxC,KAAR,EAAe;AACb,UAAIZ,CAAC,CAAC+D,KAAF,CAAQnD,KAAR,KAAkBA,KAAK,KAAK,aAAhC,EAA+C;AAC7C,eAAO,IAAP;AACD;;AAED,UAAI;AACFX,QAAAA,KAAK,CAACW,KAAD,CAAL;AACA,eAAO,KAAP;AACD,OAHD,CAGE,OAAOgC,KAAP,EAAc;AACdD,QAAAA,OAAO,CAACqB,IAAR,CAAa,wBAAb,EAAuCpB,KAAvC;AACA,eAAO,IAAP;AACD;AACF;AApGH;AAAA;AAAA,WAsGE,sBAAahC,KAAb,EAAoBqD,OAApB,EAA6B;AAAA;;AAC3B,UAAIjE,CAAC,CAACkE,WAAF,CAAcD,OAAd,KAA0BE,KAAK,CAACF,OAAD,CAA/B,IAA4CjE,CAAC,CAACkE,WAAF,CAActD,KAAd,CAAhD,EAAsE;AAEpE,eAAOA,KAAP;AACD;;AAED,UAAIA,KAAK,KAAK,aAAd,EAA6B;AAC3B,eAAOA,KAAP;AACD;;AAED,UAAMwD,QAAQ,GAAGpE,CAAC,CAACqE,OAAF,CAAU,IAAV,EAAgB,UAACC,MAAD,EAASnC,GAAT;AAAA,eAAiB,MAAI,CAACA,GAAD,CAAJ,KAAcvB,KAA/B;AAAA,OAAhB,CAAjB;;AAEA,UAAIwD,QAAJ,EAAc;AACZ,YAAMG,gBAAgB,QAAMH,QAAQ,CAACzC,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAN,GAA8BsC,OAApD;AACA,YAAMO,aAAa,GAAG,KAAKD,gBAAL,CAAtB;;AAEA,YAAIvE,CAAC,CAACkE,WAAF,CAAcM,aAAd,CAAJ,EAAkC;AAChC,iBAAO,KAAKC,2BAAL,CAAiC7D,KAAjC,EAAwCqD,OAAxC,CAAP;AACD;;AAED,eAAOO,aAAP;AACD;;AAED,aAAO,KAAKC,2BAAL,CAAiC7D,KAAjC,EAAwCqD,OAAxC,CAAP;AACD;AA9HH;AAAA;AAAA,WAgIE,sBAAarD,KAAb,EAAoB;AAClB,aAAOP,SAAS,CAACqE,IAAV,CAAe9D,KAAf,EAAsB,CAAtB,CAAP;AACD;AAlIH;AAAA;AAAA,WAoIE,qCAA4BA,KAA5B,EAAmCqD,OAAnC,EAA4C;AAE1C,UAAIU,SAAS,GAAG5D,IAAI,CAAC6D,KAAL,CAAWC,MAAM,CAACZ,OAAD,CAAN,GAAkB,EAA7B,CAAhB;AACAU,MAAAA,SAAS,GAAG5D,IAAI,CAAC+D,GAAL,CAAS,CAAT,EAAYH,SAAZ,CAAZ;AACAA,MAAAA,SAAS,GAAG5D,IAAI,CAACgE,GAAL,CAAS,CAAT,EAAYJ,SAAZ,CAAZ;AACA,UAAMxE,aAAa,GAAG,KAAKO,oBAAL,CAA0BE,KAA1B,CAAtB;AACA,aAAOT,aAAa,CAACwE,SAAS,GAAG,CAAb,CAApB;AACD;AA3IH;AAAA;AAAA,WA2KE,gBAAO/D,KAAP,EAAc;AACZ,UAAMoE,GAAG,GAAG9E,SAAS,CAACU,KAAD,CAAT,CAAiBqE,YAAjB,EAAZ;AACA,aAAOD,GAAG,GAAG,IAAb;AACD;AA9KH;AAAA;AAAA,WAgLE,oBAAWE,MAAX,EAAmB;AACjB,aAAO,qCAAqCC,IAArC,CAA0CD,MAA1C,CAAP;AACD;AAlLH;AAAA;AAAA,WAoLE,sBAAatE,KAAb,EAAoB;AAClB,aAAOV,SAAS,CAACU,KAAD,CAAT,CAAiBwE,WAAjB,EAAP;AACD;AAtLH;AAAA;AAAA,WAwLE,gBAAOxE,KAAP,EAAc;AACZ,aAAOV,SAAS,CAACU,KAAD,CAAT,CAAiByE,KAAjB,EAAP;AACD;AA1LH;AAAA;AAAA,WA4LE,uBAAczE,KAAd,EAAqB;AACnB,aAAOA,KAAK,IAAIZ,CAAC,CAACsF,OAAF,CAAU1E,KAAV,MAAqBZ,CAAC,CAACsF,OAAF,CAAU,aAAV,CAArC;AACD;AA9LH;AAAA;AAAA,WAgME,kBAASC,MAAT,EAAiBC,MAAjB,EAAyB;AACvB,aAAOxF,CAAC,CAACyF,OAAF,CAAUF,MAAV,MAAsBvF,CAAC,CAACyF,OAAF,CAAUD,MAAV,CAA7B;AACD;AAlMH;;AAAA;AAAA;;AAsMA,SAAS3D,gBAAT,CAA0BC,MAA1B,EAAkClB,KAAlC,EAAyC;AACvC,MAAI8E,KAAJ;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAM/E,GAAG,GAAGZ,KAAK,CAACW,KAAD,CAAL,CAAaC,GAAb,EAAZ;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACD,KAAJ,CAAU,CAAV,CAAX,CAAlB;;AAEA,MAAIE,SAAS,GAAG6E,cAAhB,EAAgC;AAC9B,QAAME,UAAU,GAAG9E,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACD,KAAJ,CAAU,CAAV,CAAX,CAAnB;;AAEA,QAAIiF,UAAU,GAAGD,eAAjB,EAAkC;AAChCF,MAAAA,KAAK,GAAG1F,CAAC,CAAC8F,GAAF,CAAMhE,MAAN,EAAc,UAAAP,CAAC;AAAA,eAAIA,CAAC,KAAKX,KAAN,GAAcmF,aAAa,CAACxE,CAAD,EAAIqE,eAAJ,CAA3B,GAAkDrE,CAAtD;AAAA,OAAf,CAAR;AACD;AACF;;AAED,SAAOmE,KAAP;AACD;;AAED,SAASK,aAAT,CAAuBnF,KAAvB,EAA8BiF,UAA9B,EAA0C;AACxC,MAAMhF,GAAG,GAAGZ,KAAK,CAACW,KAAD,CAAL,CAAaC,GAAb,EAAZ;AACAA,EAAAA,GAAG,CAACD,KAAJ,CAAU,CAAV,IAAeiF,UAAf;AACA,SAAOhF,GAAG,CAACsC,GAAJ,EAAP;AACD;;AAED,SAAS1B,iBAAT,CAA2Bb,KAA3B,EAAkC+D,SAAlC,EAA6C;AAC3C,MAAM9D,GAAG,GAAGZ,KAAK,CAACW,KAAD,CAAL,CAAaC,GAAb,EAAZ;AACAA,EAAAA,GAAG,CAACD,KAAJ,CAAU,CAAV,IAAe+D,SAAf;AACA,SAAO9D,GAAG,CAACsC,GAAJ,EAAP;AACD;;AAED,SAASU,WAAT,CAAqB3B,KAArB,EAA4B;AAC1B,MAAIiC,KAAK,CAACjC,KAAD,CAAL,IAAgBA,KAAK,GAAG,GAAxB,IAA+BA,KAAK,GAAG,CAA3C,EAA8C;AAC5C,UAAM,IAAI4B,KAAJ,CAAa5B,KAAb,2DAAN;AACD;;AAED,SAAOA,KAAP;AACD;;AAED,SAASwB,WAAT,CAAqBxB,KAArB,EAA4B;AAC1B,MAAI,CAAC,qCAAqCiD,IAArC,CAA0CjD,KAA1C,CAAL,EAAuD;AACrD,UAAM,IAAI4B,KAAJ,CAAa5B,KAAb,2BAAN;AACD;;AAEDA,EAAAA,KAAK,GAAGA,KAAK,CAAC8D,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;;AAEA,MAAI9D,KAAK,CAACuB,MAAN,KAAiB,CAArB,EAAwB;AACtBvB,IAAAA,KAAK,GAAG+D,kBAAkB,CAAC/D,KAAD,CAA1B;AACD;;AAED,SAAOA,KAAP;AACD;;AAED,SAAS+D,kBAAT,CAA4B/D,KAA5B,EAAmC;AACjC,SAAOA,KAAK,CAAC8D,OAAN,CAAc,IAAd,EAAoB,MAApB,CAAP;AACD;;AAED,IAAME,WAAW,GAAG5F,MAApB;AACA,IAAM6F,WAAW,GAAG,IAAID,WAAJ,EAApB;AACAC,WAAW,CAACC,UAAZ,CAAuBjG,aAAvB;AACA,eAAegG,WAAf","sourcesContent":["import { Appearance } from 'react-native';\nimport _ from 'lodash'; //@ts-ignore\n\nimport Color from 'color';\nimport tinycolor from 'tinycolor2';\nimport { colorsPalette, themeColors } from \"./colorsPalette\"; //@ts-ignore\n\nimport ColorName from \"./colorName\";\nexport class Colors {\n  schemes = {\n    light: {},\n    dark: {}\n  };\n\n  constructor() {\n    const colors = Object.assign(colorsPalette, themeColors);\n    Object.assign(this, colors);\n    Appearance.addChangeListener(({\n      colorScheme\n    }) => {\n      Object.assign(this, this.schemes[colorScheme ?? 'light']);\n    });\n  }\n  /**\n   * Load custom set of colors\n   * arguments:\n   * colors - map of keys and colors values e.g {dark10: '#20303C', dark20: '#43515C'}\n   */\n\n\n  loadColors(colors) {\n    _.forEach(colors, (value, key) => {\n      this[key] = value;\n    });\n  }\n  /**\n   * Load set of schemes for light/dark mode\n   * arguments:\n   * schemes - two sets of map of colors e.g {light: {screen: 'white'}, dark: {screen: 'black'}}\n   */\n\n\n  loadSchemes(schemes) {\n    const lightSchemeKeys = Object.keys(schemes.light);\n    const darkSchemeKeys = Object.keys(schemes.dark);\n\n    const missingKeys = _.xor(lightSchemeKeys, darkSchemeKeys);\n\n    if (!_.isEmpty(missingKeys)) {\n      console.error(`There is a mismatch in scheme keys: ${missingKeys.join(', ')}`);\n    }\n\n    this.schemes = schemes;\n    const colorScheme = Appearance.getColorScheme();\n    Object.assign(this, this.schemes[colorScheme ?? 'light']);\n  }\n  /**\n   * Add alpha to hex or rgb color\n   * arguments:\n   * p1 - hex color / R part of RGB\n   * p2 - opacity / G part of RGB\n   * p3 - B part of RGB\n   * p4 - opacity\n   */\n\n\n  rgba(p1, p2, p3, p4) {\n    let hex;\n    let opacity;\n    let red;\n    let green;\n    let blue;\n\n    if (arguments.length === 2 && typeof p1 === 'string') {\n      hex = p1;\n      opacity = p2;\n      hex = validateHex(hex);\n      red = parseInt(hex.substring(0, 2), 16);\n      green = parseInt(hex.substring(2, 4), 16);\n      blue = parseInt(hex.substring(4, 6), 16);\n    } else if (arguments.length === 4 && typeof p1 === 'number') {\n      red = validateRGB(p1);\n      green = validateRGB(p2);\n      blue = validateRGB(p3);\n      opacity = p4;\n    } else {\n      throw new Error('rgba can work with either 2 or 4 arguments');\n    }\n\n    return `rgba(${red}, ${green}, ${blue}, ${opacity})`;\n  }\n\n  getBackgroundKeysPattern() {\n    return /^(bg-|background-)/;\n  }\n\n  isEmpty(color) {\n    if (_.isNil(color) || color === 'transparent') {\n      return true;\n    }\n\n    try {\n      Color(color);\n      return false;\n    } catch (error) {\n      console.warn('Colors.isEmpty failed:', error);\n      return true;\n    }\n  }\n\n  getColorTint(color, tintKey) {\n    if (_.isUndefined(tintKey) || isNaN(tintKey) || _.isUndefined(color)) {\n      // console.error('\"Colors.getColorTint\" must accept a color and tintKey params');\n      return color;\n    }\n\n    if (color === 'transparent') {\n      return color;\n    }\n\n    const colorKey = _.findKey(this, (_value, key) => this[key] === color);\n\n    if (colorKey) {\n      const requiredColorKey = `${colorKey.slice(0, -2)}${tintKey}`;\n      const requiredColor = this[requiredColorKey];\n\n      if (_.isUndefined(requiredColor)) {\n        return this.getTintedColorForDynamicHex(color, tintKey);\n      }\n\n      return requiredColor;\n    }\n\n    return this.getTintedColorForDynamicHex(color, tintKey);\n  }\n\n  getColorName(color) {\n    return ColorName.name(color)[1];\n  }\n\n  getTintedColorForDynamicHex(color, tintKey) {\n    // Handles dynamic colors (non uilib colors)\n    let tintLevel = Math.floor(Number(tintKey) / 10);\n    tintLevel = Math.max(1, tintLevel);\n    tintLevel = Math.min(8, tintLevel);\n    const colorsPalette = this.generateColorPalette(color);\n    return colorsPalette[tintLevel - 1];\n  }\n\n  generateColorPalette = _.memoize(color => {\n    const hsl = Color(color).hsl();\n    const lightness = Math.round(hsl.color[2]);\n    const ls = [hsl.color[2]];\n    let l = lightness - 10;\n\n    while (l >= 20) {\n      ls.unshift(l);\n      l -= 10;\n    }\n\n    l = lightness + 10;\n\n    while (l < 100) {\n      ls.push(l);\n      l += 10;\n    }\n\n    const tints = [];\n\n    _.forEach(ls, e => {\n      const tint = generateColorTint(color, e);\n      tints.push(tint);\n    });\n\n    const sliced = tints.slice(0, 8);\n    const adjusted = adjustSaturation(sliced, color);\n    return adjusted || sliced;\n  });\n\n  isDark(color) {\n    const lum = tinycolor(color).getLuminance();\n    return lum < 0.55;\n  }\n\n  isValidHex(string) {\n    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(string);\n  }\n\n  getHexString(color) {\n    return tinycolor(color).toHexString();\n  }\n\n  getHSL(color) {\n    return tinycolor(color).toHsl();\n  }\n\n  isTransparent(color) {\n    return color && _.toUpper(color) === _.toUpper('transparent');\n  }\n\n  areEqual(colorA, colorB) {\n    return _.toLower(colorA) === _.toLower(colorB);\n  }\n\n}\n\nfunction adjustSaturation(colors, color) {\n  let array;\n  const lightnessLevel = 80;\n  const saturationLevel = 60;\n  const hsl = Color(color).hsl();\n  const lightness = Math.round(hsl.color[2]);\n\n  if (lightness > lightnessLevel) {\n    const saturation = Math.round(hsl.color[1]);\n\n    if (saturation > saturationLevel) {\n      array = _.map(colors, e => e !== color ? addSaturation(e, saturationLevel) : e);\n    }\n  }\n\n  return array;\n}\n\nfunction addSaturation(color, saturation) {\n  const hsl = Color(color).hsl();\n  hsl.color[1] = saturation;\n  return hsl.hex();\n}\n\nfunction generateColorTint(color, tintLevel) {\n  const hsl = Color(color).hsl();\n  hsl.color[2] = tintLevel;\n  return hsl.hex();\n}\n\nfunction validateRGB(value) {\n  if (isNaN(value) || value > 255 || value < 0) {\n    throw new Error(`${value} is invalid rgb code, please use number between 0-255`);\n  }\n\n  return value;\n}\n\nfunction validateHex(value) {\n  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value)) {\n    throw new Error(`${value} is invalid hex color`);\n  }\n\n  value = value.replace('#', '');\n\n  if (value.length === 3) {\n    value = threeDigitHexToSix(value);\n  }\n\n  return value;\n}\n\nfunction threeDigitHexToSix(value) {\n  return value.replace(/./g, '$&$&');\n}\n\nconst TypedColors = Colors;\nconst colorObject = new TypedColors();\ncolorObject.loadColors(colorsPalette);\nexport default colorObject;"]},"metadata":{},"sourceType":"module"}