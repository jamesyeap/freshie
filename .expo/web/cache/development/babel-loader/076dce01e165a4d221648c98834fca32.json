{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"modifiers\", \"fieldStyle\", \"containerStyle\", \"floatingPlaceholder\", \"floatingPlaceholderColor\", \"floatingPlaceholderStyle\", \"floatOnFocus\", \"hint\", \"label\", \"labelColor\", \"labelStyle\", \"labelProps\", \"leadingAccessory\", \"trailingAccessory\", \"enableErrors\", \"validationMessage\", \"validationMessageStyle\", \"validationMessagePosition\", \"showCharCounter\", \"charCounterStyle\", \"placeholder\"];\n\nvar _this = this,\n    _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TextField/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _pt from \"prop-types\";\nimport React, { useMemo } from 'react';\nimport { omit, isFunction } from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport { ValidationMessagePosition } from \"./types\";\nimport Input from \"./Input\";\nimport ValidationMessage from \"./ValidationMessage\";\nimport Label from \"./Label\";\nimport FieldContext from \"./FieldContext\";\nimport useFieldState from \"./useFieldState\";\nimport usePreset from \"./usePreset\";\nimport FloatingPlaceholder from \"./FloatingPlaceholder\";\nimport CharCounter from \"./CharCounter\";\n\nvar TextField = function TextField(props) {\n  var _usePreset = usePreset(props),\n      modifiers = _usePreset.modifiers,\n      fieldStyleProp = _usePreset.fieldStyle,\n      containerStyle = _usePreset.containerStyle,\n      floatingPlaceholder = _usePreset.floatingPlaceholder,\n      floatingPlaceholderColor = _usePreset.floatingPlaceholderColor,\n      floatingPlaceholderStyle = _usePreset.floatingPlaceholderStyle,\n      floatOnFocus = _usePreset.floatOnFocus,\n      hint = _usePreset.hint,\n      label = _usePreset.label,\n      labelColor = _usePreset.labelColor,\n      labelStyle = _usePreset.labelStyle,\n      labelProps = _usePreset.labelProps,\n      leadingAccessory = _usePreset.leadingAccessory,\n      trailingAccessory = _usePreset.trailingAccessory,\n      enableErrors = _usePreset.enableErrors,\n      validationMessage = _usePreset.validationMessage,\n      validationMessageStyle = _usePreset.validationMessageStyle,\n      _usePreset$validation = _usePreset.validationMessagePosition,\n      validationMessagePosition = _usePreset$validation === void 0 ? ValidationMessagePosition.BOTTOM : _usePreset$validation,\n      showCharCounter = _usePreset.showCharCounter,\n      charCounterStyle = _usePreset.charCounterStyle,\n      placeholder = _usePreset.placeholder,\n      others = _objectWithoutProperties(_usePreset, _excluded);\n\n  var _useFieldState = useFieldState(others),\n      onFocus = _useFieldState.onFocus,\n      onBlur = _useFieldState.onBlur,\n      onChangeText = _useFieldState.onChangeText,\n      fieldState = _useFieldState.fieldState;\n\n  var context = useMemo(function () {\n    return _objectSpread(_objectSpread({}, fieldState), {}, {\n      disabled: others.editable === false\n    });\n  }, [fieldState, others.editable]);\n  var margins = modifiers.margins,\n      paddings = modifiers.paddings,\n      typography = modifiers.typography,\n      color = modifiers.color;\n  var typographyStyle = useMemo(function () {\n    return omit(typography, 'lineHeight');\n  }, [typography]);\n  var colorStyle = useMemo(function () {\n    return color && {\n      color: color\n    };\n  }, [color]);\n  var fieldStyle = isFunction(fieldStyleProp) ? fieldStyleProp(context) : fieldStyleProp;\n  return React.createElement(FieldContext.Provider, {\n    value: context,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 10\n    }\n  }, React.createElement(View, {\n    style: [margins, containerStyle],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(Label, {\n    label: label,\n    labelColor: labelColor,\n    labelStyle: labelStyle,\n    labelProps: labelProps,\n    floatingPlaceholder: floatingPlaceholder,\n    validationMessagePosition: validationMessagePosition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), validationMessagePosition === ValidationMessagePosition.TOP && React.createElement(ValidationMessage, {\n    enableErrors: enableErrors,\n    validationMessage: validationMessage,\n    validationMessageStyle: validationMessageStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 73\n    }\n  }), React.createElement(View, {\n    style: [paddings, fieldStyle],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    row: true,\n    centerV: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, leadingAccessory, React.createElement(View, {\n    flex: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, floatingPlaceholder && React.createElement(FloatingPlaceholder, {\n    placeholder: placeholder,\n    floatingPlaceholderStyle: [typographyStyle, floatingPlaceholderStyle],\n    floatingPlaceholderColor: floatingPlaceholderColor,\n    floatOnFocus: floatOnFocus,\n    validationMessagePosition: validationMessagePosition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 39\n    }\n  }), React.createElement(Input, _extends({}, others, {\n    style: [typographyStyle, colorStyle, others.style],\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChangeText: onChangeText,\n    placeholder: floatingPlaceholder ? undefined : placeholder,\n    hint: hint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }))), trailingAccessory)), React.createElement(View, {\n    row: true,\n    spread: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, validationMessagePosition === ValidationMessagePosition.BOTTOM && React.createElement(ValidationMessage, {\n    enableErrors: enableErrors,\n    validationMessage: validationMessage,\n    validationMessageStyle: validationMessageStyle,\n    retainSpace: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 78\n    }\n  }), showCharCounter && React.createElement(CharCounter, {\n    maxLength: others.maxLength,\n    charCounterStyle: charCounterStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 31\n    }\n  }))));\n};\n\nTextField.propTypes = {\n  leadingAccessory: _pt.element,\n  trailingAccessory: _pt.element,\n  floatingPlaceholder: _pt.bool,\n  validateOnStart: _pt.bool,\n  validateOnChange: _pt.bool,\n  validateOnBlur: _pt.bool,\n  onChangeValidity: _pt.func\n};\nTextField.displayName = 'Incubator.TextField';\nTextField.validationMessagePositions = ValidationMessagePosition;\nexport default asBaseComponent(forwardRef(TextField));","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/incubator/TextField/index.js"],"names":["_pt","React","useMemo","omit","isFunction","asBaseComponent","forwardRef","View","ValidationMessagePosition","Input","ValidationMessage","Label","FieldContext","useFieldState","usePreset","FloatingPlaceholder","CharCounter","TextField","props","modifiers","fieldStyleProp","fieldStyle","containerStyle","floatingPlaceholder","floatingPlaceholderColor","floatingPlaceholderStyle","floatOnFocus","hint","label","labelColor","labelStyle","labelProps","leadingAccessory","trailingAccessory","enableErrors","validationMessage","validationMessageStyle","validationMessagePosition","BOTTOM","showCharCounter","charCounterStyle","placeholder","others","onFocus","onBlur","onChangeText","fieldState","context","disabled","editable","margins","paddings","typography","color","typographyStyle","colorStyle","TOP","style","undefined","maxLength","propTypes","element","bool","validateOnStart","validateOnChange","validateOnBlur","onChangeValidity","func","displayName","validationMessagePositions"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n\n/**\n * Known issues with React Native TextInput component\n * 1. iOS - input inner padding is off in multiline mode\n * 2. Android - input has minHeight that can't be overridden with zero padding (unlike iOS)\n * 3. Passing typography preset that includes lineHeight usually cause alignment issues with\n * other elements (leading/trailing accessories). It usually best to set lineHeight with undefined\n */\nimport React, { useMemo } from 'react';\nimport { omit, isFunction } from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport { ValidationMessagePosition } from \"./types\";\nimport Input from \"./Input\";\nimport ValidationMessage from \"./ValidationMessage\";\nimport Label from \"./Label\";\nimport FieldContext from \"./FieldContext\";\nimport useFieldState\n/* , FieldStateProps */\nfrom \"./useFieldState\";\nimport usePreset from \"./usePreset\";\nimport FloatingPlaceholder from \"./FloatingPlaceholder\";\nimport CharCounter from \"./CharCounter\";\n\n/**\n * @description: A controlled, customizable TextField with validation support\n * @extends: TextInput\n * @extendsLink: https://reactnative.dev/docs/textinput\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/IncubatorTextFieldScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/FloatingPlaceholder.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Validation.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/ColorByState.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/CharCounter.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Hint.gif?raw=true\n */\nconst TextField = props => {\n  const {\n    modifiers,\n    // General\n    fieldStyle: fieldStyleProp,\n    containerStyle,\n    floatingPlaceholder,\n    floatingPlaceholderColor,\n    floatingPlaceholderStyle,\n    floatOnFocus,\n    hint,\n    // Label\n    label,\n    labelColor,\n    labelStyle,\n    labelProps,\n    // Accessory Buttons\n    leadingAccessory,\n    trailingAccessory,\n    // Validation\n    enableErrors,\n    // TODO: rename to enableValidation\n    validationMessage,\n    validationMessageStyle,\n    validationMessagePosition = ValidationMessagePosition.BOTTOM,\n    // Char Counter\n    showCharCounter,\n    charCounterStyle,\n    // Input\n    placeholder,\n    ...others\n  } = usePreset(props);\n  const {\n    onFocus,\n    onBlur,\n    onChangeText,\n    fieldState\n  } = useFieldState(others);\n  const context = useMemo(() => {\n    return { ...fieldState,\n      disabled: others.editable === false\n    };\n  }, [fieldState, others.editable]);\n  const {\n    margins,\n    paddings,\n    typography,\n    color\n  } = modifiers;\n  const typographyStyle = useMemo(() => omit(typography, 'lineHeight'), [typography]);\n  const colorStyle = useMemo(() => color && {\n    color\n  }, [color]);\n  const fieldStyle = isFunction(fieldStyleProp) ? fieldStyleProp(context) : fieldStyleProp;\n  return <FieldContext.Provider value={context}>\n      <View style={[margins, containerStyle]}>\n        <Label label={label} labelColor={labelColor} labelStyle={labelStyle} labelProps={labelProps} floatingPlaceholder={floatingPlaceholder} validationMessagePosition={validationMessagePosition} />\n        {validationMessagePosition === ValidationMessagePosition.TOP && <ValidationMessage enableErrors={enableErrors} validationMessage={validationMessage} validationMessageStyle={validationMessageStyle} />}\n        <View style={[paddings, fieldStyle]}>\n          <View row centerV>\n            {leadingAccessory}\n            <View flex>\n              {floatingPlaceholder && <FloatingPlaceholder placeholder={placeholder} floatingPlaceholderStyle={[typographyStyle, floatingPlaceholderStyle]} floatingPlaceholderColor={floatingPlaceholderColor} floatOnFocus={floatOnFocus} validationMessagePosition={validationMessagePosition} />}\n              <Input {...others} style={[typographyStyle, colorStyle, others.style]} onFocus={onFocus} onBlur={onBlur} onChangeText={onChangeText} placeholder={floatingPlaceholder ? undefined : placeholder} hint={hint} />\n            </View>\n            {trailingAccessory}\n          </View>\n        </View>\n        <View row spread>\n          {validationMessagePosition === ValidationMessagePosition.BOTTOM && <ValidationMessage enableErrors={enableErrors} validationMessage={validationMessage} validationMessageStyle={validationMessageStyle} retainSpace />}\n          {showCharCounter && <CharCounter maxLength={others.maxLength} charCounterStyle={charCounterStyle} />}\n        </View>\n      </View>\n    </FieldContext.Provider>;\n};\n\nTextField.propTypes = {\n  /**\n       * Pass to render a leading element\n       */\n  leadingAccessory: _pt.element,\n\n  /**\n       * Pass to render a trailing element\n       */\n  trailingAccessory: _pt.element,\n\n  /**\n       * Pass to add floating placeholder support\n       */\n  floatingPlaceholder: _pt.bool,\n\n  /**\n       * Should validate when the TextField mounts\n       */\n  validateOnStart: _pt.bool,\n\n  /**\n       * Should validate when the TextField value changes\n       */\n  validateOnChange: _pt.bool,\n\n  /**\n       * Should validate when losing focus of TextField\n       */\n  validateOnBlur: _pt.bool,\n\n  /**\n       * Callback for when field validity has changed\n       */\n  onChangeValidity: _pt.func\n};\nTextField.displayName = 'Incubator.TextField';\nTextField.validationMessagePositions = ValidationMessagePosition;\nexport default asBaseComponent(forwardRef(TextField));"]},"metadata":{},"sourceType":"module"}