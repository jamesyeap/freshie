{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"modifiers\", \"style\", \"center\", \"uppercase\", \"children\", \"forwardedRef\"];\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/text/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport _ from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport { Colors } from \"../../style\";\n\nvar Text = function (_PureComponent) {\n  _inherits(Text, _PureComponent);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.TextContainer = _this.props.animated ? Animated.createAnimatedComponent(RNText) : RNText;\n    return _this;\n  }\n\n  _createClass(Text, [{\n    key: \"getTextPartsByHighlight\",\n    value: function getTextPartsByHighlight() {\n      var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var highlightString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (_.isEmpty(highlightString.trim())) {\n        return [targetString];\n      }\n\n      var textParts = [];\n      var highlightIndex;\n\n      do {\n        highlightIndex = targetString.toLowerCase().indexOf(highlightString.toLowerCase());\n\n        if (highlightIndex !== -1) {\n          if (highlightIndex > 0) {\n            textParts.push(targetString.substring(0, highlightIndex));\n          }\n\n          textParts.push(targetString.substr(highlightIndex, highlightString.length));\n          targetString = targetString.substr(highlightIndex + highlightString.length);\n        } else {\n          textParts.push(targetString);\n        }\n      } while (highlightIndex !== -1);\n\n      return textParts;\n    }\n  }, {\n    key: \"renderText\",\n    value: function renderText(children) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          highlightString = _this$props.highlightString,\n          highlightStyle = _this$props.highlightStyle;\n\n      if (!_.isEmpty(highlightString)) {\n        if (_.isArray(children)) {\n          return _.map(children, function (child) {\n            return _this2.renderText(child);\n          });\n        }\n\n        if (_.isString(children)) {\n          var textParts = this.getTextPartsByHighlight(children, highlightString);\n          return _.map(textParts, function (text, index) {\n            var shouldHighlight = _.lowerCase(text) === _.lowerCase(highlightString);\n\n            return React.createElement(RNText, {\n              key: index,\n              style: shouldHighlight ? [styles.highlight, highlightStyle] : styles.notHighlight,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 18\n              }\n            }, text);\n          });\n        }\n      }\n\n      return children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          modifiers = _this$props2.modifiers,\n          style = _this$props2.style,\n          center = _this$props2.center,\n          uppercase = _this$props2.uppercase,\n          children = _this$props2.children,\n          forwardedRef = _this$props2.forwardedRef,\n          others = _objectWithoutProperties(_this$props2, _excluded);\n\n      var color = this.props.color || modifiers.color;\n      var margins = modifiers.margins,\n          typography = modifiers.typography,\n          backgroundColor = modifiers.backgroundColor,\n          flexStyle = modifiers.flexStyle;\n      var textStyle = [styles.container, typography, color && {\n        color: color\n      }, backgroundColor && {\n        backgroundColor: backgroundColor\n      }, flexStyle, margins, center && styles.centered, uppercase && styles.uppercase, style];\n      var TextContainer = this.TextContainer;\n      return React.createElement(TextContainer, _extends({}, others, {\n        style: textStyle,\n        ref: forwardedRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 12\n        }\n      }), this.renderText(children));\n    }\n  }]);\n\n  return Text;\n}(PureComponent);\n\nText.propTypes = {\n  color: _pt.string,\n  center: _pt.bool,\n  uppercase: _pt.bool,\n  highlightString: _pt.string,\n  animated: _pt.bool,\n  textAlign: _pt.string\n};\nText.displayName = 'Text';\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    textAlign: 'left'\n  },\n  centered: {\n    textAlign: 'center'\n  },\n  uppercase: {\n    textTransform: 'uppercase'\n  },\n  highlight: {\n    color: Colors.grey30\n  },\n  notHighlight: {\n    color: undefined\n  }\n});\nexport { Text };\nexport default asBaseComponent(forwardRef(Text));","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/text/index.js"],"names":["_pt","React","PureComponent","_","asBaseComponent","forwardRef","Colors","Text","TextContainer","props","animated","Animated","createAnimatedComponent","RNText","targetString","highlightString","isEmpty","trim","textParts","highlightIndex","toLowerCase","indexOf","push","substring","substr","length","children","highlightStyle","isArray","map","child","renderText","isString","getTextPartsByHighlight","text","index","shouldHighlight","lowerCase","styles","highlight","notHighlight","modifiers","style","center","uppercase","forwardedRef","others","color","margins","typography","backgroundColor","flexStyle","textStyle","container","centered","propTypes","string","bool","textAlign","displayName","StyleSheet","create","textTransform","grey30","undefined"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nimport { Text as RNText, StyleSheet, Animated } from 'react-native';\nimport _ from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport { Colors } from \"../../style\";\n\n/**\n * @description: A wrapper for Text component with extra functionality like modifiers support\n * @extends: Text\n * @extendsLink: https://facebook.github.io/react-native/docs/text.html\n * @modifiers: margins, color, typography\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextScreen.js\n * @image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Modifiers.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Transformation.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Highlights.png?raw=true\n */\nclass Text extends PureComponent {\n  static propTypes = {\n    /**\n       * color of the text\n       */\n    color: _pt.string,\n\n    /**\n       * whether to center the text (using textAlign)\n       */\n    center: _pt.bool,\n\n    /**\n       * whether to change the text to uppercase\n       */\n    uppercase: _pt.bool,\n\n    /**\n       * Substring to highlight\n       */\n    highlightString: _pt.string,\n\n    /**\n       * Use Animated.Text as a container\n       */\n    animated: _pt.bool,\n    textAlign: _pt.string\n  };\n  static displayName = 'Text';\n  TextContainer = this.props.animated ? Animated.createAnimatedComponent(RNText) : RNText; // setNativeProps(nativeProps) {\n  //   this._root.setNativeProps(nativeProps); // eslint-disable-line\n  // }\n\n  getTextPartsByHighlight(targetString = '', highlightString = '') {\n    if (_.isEmpty(highlightString.trim())) {\n      return [targetString];\n    }\n\n    const textParts = [];\n    let highlightIndex;\n\n    do {\n      highlightIndex = targetString.toLowerCase().indexOf(highlightString.toLowerCase());\n\n      if (highlightIndex !== -1) {\n        if (highlightIndex > 0) {\n          textParts.push(targetString.substring(0, highlightIndex));\n        }\n\n        textParts.push(targetString.substr(highlightIndex, highlightString.length));\n        targetString = targetString.substr(highlightIndex + highlightString.length);\n      } else {\n        textParts.push(targetString);\n      }\n    } while (highlightIndex !== -1);\n\n    return textParts;\n  }\n\n  renderText(children) {\n    const {\n      highlightString,\n      highlightStyle\n    } = this.props;\n\n    if (!_.isEmpty(highlightString)) {\n      if (_.isArray(children)) {\n        return _.map(children, child => {\n          return this.renderText(child);\n        });\n      }\n\n      if (_.isString(children)) {\n        const textParts = this.getTextPartsByHighlight(children, highlightString);\n        return _.map(textParts, (text, index) => {\n          const shouldHighlight = _.lowerCase(text) === _.lowerCase(highlightString);\n\n          return <RNText key={index} style={shouldHighlight ? [styles.highlight, highlightStyle] : styles.notHighlight}>\n              {text}\n            </RNText>;\n        });\n      }\n    }\n\n    return children;\n  }\n\n  render() {\n    const {\n      modifiers,\n      style,\n      center,\n      uppercase,\n      children,\n      forwardedRef,\n      ...others\n    } = this.props;\n    const color = this.props.color || modifiers.color;\n    const {\n      margins,\n      typography,\n      backgroundColor,\n      flexStyle\n    } = modifiers;\n    const textStyle = [styles.container, typography, color && {\n      color\n    }, backgroundColor && {\n      backgroundColor\n    }, flexStyle, margins, center && styles.centered, uppercase && styles.uppercase, style];\n    const TextContainer = this.TextContainer;\n    return <TextContainer {...others} style={textStyle} ref={forwardedRef}>\n        {this.renderText(children)}\n      </TextContainer>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    textAlign: 'left'\n  },\n  centered: {\n    textAlign: 'center'\n  },\n  uppercase: {\n    textTransform: 'uppercase'\n  },\n  highlight: {\n    color: Colors.grey30\n  },\n  notHighlight: {\n    color: undefined\n  }\n});\nexport { Text }; // For tests\n\nexport default asBaseComponent(forwardRef(Text));"]},"metadata":{},"sourceType":"module"}