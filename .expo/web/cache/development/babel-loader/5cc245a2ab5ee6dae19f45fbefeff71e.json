{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/dialog/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../../style\";\nimport Constants from \"../../helpers/Constants\";\nimport { extractAlignmentsValues } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { LogService } from \"../../services\";\nimport Modal from \"../modal\";\nimport View from \"../view\";\nimport PanListenerView from \"../panningViews/panListenerView\";\nimport DialogDismissibleView from \"./DialogDismissibleView\";\nimport OverlayFadingBackground from \"./OverlayFadingBackground\";\nimport PanningProvider from \"../panningViews/panningProvider\";\nvar DEFAULT_OVERLAY_BACKGROUND_COLOR = Colors.rgba(Colors.dark10, 0.6);\n\nvar Dialog = function (_Component) {\n  _inherits(Dialog, _Component);\n\n  var _super = _createSuper(Dialog);\n\n  function Dialog(_props) {\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    _this = _super.call(this, _props);\n\n    _this.onOrientationChange = function () {\n      var orientationKey = Constants.orientation;\n\n      if (_this.state.orientationKey !== orientationKey) {\n        _this.setState({\n          orientationKey: orientationKey\n        });\n      }\n    };\n\n    _this.onFadeDone = function () {\n      if (!_this.state.modalVisibility) {\n        setTimeout(function () {\n          _.invoke(_this.props, 'onDialogDismissed', _this.props);\n\n          _.invoke(_this.props, 'onModalDismissed', _this.props);\n        }, 100);\n      }\n    };\n\n    _this._onDismiss = function () {\n      _this.setState({\n        modalVisibility: false,\n        fadeOut: false\n      }, function () {\n        var props = _this.props;\n\n        if (props.visible) {\n          _.invoke(props, 'onDismiss', props);\n        }\n\n        if (Constants.isAndroid) {\n          _.invoke(props, 'onDialogDismissed', props);\n        }\n      });\n    };\n\n    _this.onDismiss = function () {\n      var fadeOut = Constants.isIOS && _this.props.visible;\n\n      if (fadeOut) {\n        _this.setState({\n          fadeOut: fadeOut\n        }, _this._onDismiss);\n      } else {\n        _this._onDismiss();\n      }\n    };\n\n    _this.onModalDismissed = function () {\n      _.invoke(_this.props, 'onDialogDismissed', _this.props);\n\n      _.invoke(_this.props, 'onModalDismissed', _this.props);\n    };\n\n    _this.hideDialogView = function () {\n      _this.setState({\n        dialogVisibility: false\n      });\n    };\n\n    _this.renderPannableHeader = function (directions) {\n      var _this$props = _this.props,\n          renderPannableHeader = _this$props.renderPannableHeader,\n          pannableHeaderProps = _this$props.pannableHeaderProps;\n\n      if (renderPannableHeader) {\n        return React.createElement(PanListenerView, {\n          directions: directions,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 14\n          }\n        }, renderPannableHeader(pannableHeaderProps));\n      }\n    };\n\n    _this.getContainerType = function () {\n      var _this$props2 = _this.props,\n          panDirection = _this$props2.panDirection,\n          renderPannableHeader = _this$props2.renderPannableHeader;\n\n      if (!panDirection || renderPannableHeader) {\n        return View;\n      }\n\n      return PanListenerView;\n    };\n\n    _this.renderDialogView = function () {\n      var _this$props3 = _this.props,\n          children = _this$props3.children,\n          _this$props3$panDirec = _this$props3.panDirection,\n          panDirection = _this$props3$panDirec === void 0 ? PanningProvider.Directions.DOWN : _this$props3$panDirec,\n          containerStyle = _this$props3.containerStyle,\n          testID = _this$props3.testID;\n      var dialogVisibility = _this.state.dialogVisibility;\n\n      var Container = _this.getContainerType();\n\n      return React.createElement(View, {\n        testID: testID,\n        style: [_this.styles.dialogViewSize],\n        pointerEvents: \"box-none\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 12\n        }\n      }, React.createElement(PanningProvider, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }\n      }, React.createElement(DialogDismissibleView, {\n        direction: panDirection,\n        visible: dialogVisibility,\n        onDismiss: _this.onDismiss,\n        containerStyle: _this.styles.flexType,\n        style: _this.styles.flexType,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }, React.createElement(Container, {\n        directions: [panDirection],\n        style: [_this.styles.overflow, _this.styles.flexType, containerStyle],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }\n      }, _this.renderPannableHeader([panDirection]), children))));\n    };\n\n    _this.renderDialogContainer = function () {\n      var _this$state = _this.state,\n          modalVisibility = _this$state.modalVisibility,\n          dialogVisibility = _this$state.dialogVisibility,\n          fadeOut = _this$state.fadeOut;\n      var _this$props4 = _this.props,\n          useSafeArea = _this$props4.useSafeArea,\n          bottom = _this$props4.bottom,\n          overlayBackgroundColor = _this$props4.overlayBackgroundColor,\n          testID = _this$props4.testID;\n      var addBottomSafeArea = Constants.isIphoneX && useSafeArea && bottom;\n      var bottomInsets = Constants.getSafeAreaInsets().bottom - 8;\n      var onFadeDone = Constants.isIOS ? _this.onFadeDone : undefined;\n      return React.createElement(View, {\n        useSafeArea: useSafeArea,\n        style: [_this.styles.centerHorizontal, _this.styles.alignments, _this.styles.container],\n        pointerEvents: \"box-none\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 12\n        }\n      }, React.createElement(OverlayFadingBackground, {\n        testID: testID + \".overlayFadingBackground\",\n        modalVisibility: modalVisibility,\n        dialogVisibility: dialogVisibility,\n        overlayBackgroundColor: overlayBackgroundColor,\n        onFadeDone: onFadeDone,\n        fadeOut: fadeOut,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 9\n        }\n      }), _this.renderDialogView(), addBottomSafeArea && React.createElement(View, {\n        style: {\n          marginTop: bottomInsets\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 31\n        }\n      }));\n    };\n\n    _this.render = function () {\n      var _this$state2 = _this.state,\n          orientationKey = _this$state2.orientationKey,\n          modalVisibility = _this$state2.modalVisibility;\n      var _this$props5 = _this.props,\n          testID = _this$props5.testID,\n          supportedOrientations = _this$props5.supportedOrientations,\n          accessibilityLabel = _this$props5.accessibilityLabel,\n          ignoreBackgroundPress = _this$props5.ignoreBackgroundPress;\n      var onBackgroundPress = !ignoreBackgroundPress ? _this.hideDialogView : undefined;\n      return React.createElement(Modal, {\n        key: orientationKey,\n        testID: testID + \".modal\",\n        transparent: true,\n        visible: modalVisibility,\n        animationType: 'none',\n        onBackgroundPress: onBackgroundPress,\n        onRequestClose: onBackgroundPress,\n        supportedOrientations: supportedOrientations,\n        accessibilityLabel: accessibilityLabel,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 12\n        }\n      }, _this.renderDialogContainer());\n    };\n\n    _this.state = {\n      alignments: extractAlignmentsValues(_props),\n      orientationKey: Constants.orientation,\n      modalVisibility: _props.visible,\n      dialogVisibility: _props.visible\n    };\n    _this.styles = createStyles(_this.props);\n\n    _this.setAlignment();\n\n    if (!_.isUndefined(_props.onModalDismissed)) {\n      LogService.deprecationWarn({\n        component: 'Dialog',\n        oldProp: 'onModalDismissed',\n        newProp: 'onDialogDismissed'\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Constants.addDimensionsEventListener(this.onOrientationChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.onOrientationChange);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var nexVisible = nextProps.visible;\n      var visible = this.props.visible;\n\n      if (nexVisible && !visible) {\n        this.setState({\n          modalVisibility: true,\n          dialogVisibility: true\n        });\n      } else if (visible && !nexVisible) {\n        this.hideDialogView();\n      }\n    }\n  }, {\n    key: \"setAlignment\",\n    value: function setAlignment() {\n      var alignments = this.state.alignments;\n\n      if (_.isEmpty(alignments)) {\n        this.styles.alignments = this.styles.centerContent;\n      } else {\n        this.styles.alignments = alignments;\n      }\n    }\n  }]);\n\n  return Dialog;\n}(Component);\n\nDialog.propTypes = {\n  visible: _pt.bool,\n  onDismiss: _pt.func,\n  ignoreBackgroundPress: _pt.bool,\n  overlayBackgroundColor: _pt.string,\n  width: _pt.oneOfType([_pt.string, _pt.number]),\n  height: _pt.oneOfType([_pt.string, _pt.number]),\n  useSafeArea: _pt.bool,\n  onModalDismissed: _pt.func,\n  onDialogDismissed: _pt.func,\n  renderPannableHeader: _pt.func,\n  pannableHeaderProps: _pt.any,\n  testID: _pt.string\n};\nDialog.displayName = 'Dialog';\nDialog.defaultProps = {\n  overlayBackgroundColor: DEFAULT_OVERLAY_BACKGROUND_COLOR\n};\n\nfunction createStyles(props) {\n  var _props$width = props.width,\n      width = _props$width === void 0 ? '90%' : _props$width,\n      height = props.height;\n  var flexType = height ? {\n    flex: 1\n  } : {\n    flex: 0\n  };\n  return StyleSheet.create({\n    dialogViewSize: {\n      width: width,\n      height: height\n    },\n    flexType: flexType,\n    container: {\n      flex: 1\n    },\n    centerHorizontal: {\n      alignItems: 'center'\n    },\n    centerContent: {\n      justifyContent: 'center'\n    },\n    overflow: {\n      overflow: 'hidden'\n    }\n  });\n}\n\nexport default asBaseComponent(Dialog);","map":{"version":3,"sources":["/Users/jamesyeap1/freshie/node_modules/react-native-ui-lib/src/components/dialog/index.js"],"names":["_pt","_","React","Component","Colors","Constants","extractAlignmentsValues","asBaseComponent","LogService","Modal","View","PanListenerView","DialogDismissibleView","OverlayFadingBackground","PanningProvider","DEFAULT_OVERLAY_BACKGROUND_COLOR","rgba","dark10","Dialog","props","onOrientationChange","orientationKey","orientation","state","setState","onFadeDone","modalVisibility","setTimeout","invoke","_onDismiss","fadeOut","visible","isAndroid","onDismiss","isIOS","onModalDismissed","hideDialogView","dialogVisibility","renderPannableHeader","directions","pannableHeaderProps","getContainerType","panDirection","renderDialogView","children","Directions","DOWN","containerStyle","testID","Container","styles","dialogViewSize","flexType","overflow","renderDialogContainer","useSafeArea","bottom","overlayBackgroundColor","addBottomSafeArea","isIphoneX","bottomInsets","getSafeAreaInsets","undefined","centerHorizontal","alignments","container","marginTop","render","supportedOrientations","accessibilityLabel","ignoreBackgroundPress","onBackgroundPress","createStyles","setAlignment","isUndefined","deprecationWarn","component","oldProp","newProp","addDimensionsEventListener","removeDimensionsEventListener","nextProps","nexVisible","isEmpty","centerContent","propTypes","bool","func","string","width","oneOfType","number","height","onDialogDismissed","any","displayName","defaultProps","flex","StyleSheet","create","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors } from \"../../style\";\nimport Constants from \"../../helpers/Constants\";\nimport { extractAlignmentsValues } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { LogService } from \"../../services\";\nimport Modal from \"../modal\";\nimport View from \"../view\";\nimport PanListenerView from \"../panningViews/panListenerView\";\nimport DialogDismissibleView from \"./DialogDismissibleView\";\nimport OverlayFadingBackground from \"./OverlayFadingBackground\";\nimport PanningProvider from \"../panningViews/panningProvider\"; // TODO: KNOWN ISSUES\n// 1. iOS pressing on the background while enter animation is happening will not call onDismiss\n//    Touch events are not registered?\n// 2. SafeArea is transparent\n// 3. Check why we need the state change in DialogDismissibleView -> onLayout -> animateTo\n\nconst DEFAULT_OVERLAY_BACKGROUND_COLOR = Colors.rgba(Colors.dark10, 0.6);\n/**\n * @description: Dialog component for displaying custom content inside a popup dialog\n * @notes: Use alignment modifiers to control the dialog position\n * (top, bottom, centerV, centerH, etc... by default the dialog is aligned to center)\n * @modifiers: alignment\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DialogScreen.js\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Dialog/Dialog.gif?raw=true\n */\n\nclass Dialog extends Component {\n  static propTypes = {\n    /**\n         * Control visibility of the dialog\n         */\n    visible: _pt.bool,\n\n    /**\n         * Dismiss callback for when clicking on the background\n         */\n    onDismiss: _pt.func,\n\n    /**\n         * Whether or not to ignore background press\n         */\n    ignoreBackgroundPress: _pt.bool,\n\n    /**\n         * The color of the overlay background\n         */\n    overlayBackgroundColor: _pt.string,\n\n    /**\n         * The dialog width (default: 90%)\n         */\n    width: _pt.oneOfType([_pt.string, _pt.number]),\n\n    /**\n         * The dialog height (default: undefined)\n         */\n    height: _pt.oneOfType([_pt.string, _pt.number]),\n\n    /**\n         * Whether or not to handle SafeArea\n         */\n    useSafeArea: _pt.bool,\n\n    /**\n         * Called once the modal has been dismissed (iOS only) - Deprecated, use onDialogDismissed instead\n         */\n    onModalDismissed: _pt.func,\n\n    /**\n         * Called once the dialog has been dismissed completely\n         */\n    onDialogDismissed: _pt.func,\n\n    /**\n         * If this is added only the header will be pannable;\n         * this allows for scrollable content (the children of the dialog)\n         * props are transferred to the renderPannableHeader\n         */\n    renderPannableHeader: _pt.func,\n\n    /**\n         * The props that will be passed to the pannable header\n         */\n    pannableHeaderProps: _pt.any,\n\n    /**\n         * Used as a testing identifier\n         */\n    testID: _pt.string\n  };\n  static displayName = 'Dialog';\n  static defaultProps = {\n    overlayBackgroundColor: DEFAULT_OVERLAY_BACKGROUND_COLOR\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      alignments: extractAlignmentsValues(props),\n      orientationKey: Constants.orientation,\n      modalVisibility: props.visible,\n      dialogVisibility: props.visible\n    };\n    this.styles = createStyles(this.props);\n    this.setAlignment();\n\n    if (!_.isUndefined(props.onModalDismissed)) {\n      LogService.deprecationWarn({\n        component: 'Dialog',\n        oldProp: 'onModalDismissed',\n        newProp: 'onDialogDismissed'\n      });\n    }\n  }\n\n  componentDidMount() {\n    Constants.addDimensionsEventListener(this.onOrientationChange);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.onOrientationChange);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      visible: nexVisible\n    } = nextProps;\n    const {\n      visible\n    } = this.props;\n\n    if (nexVisible && !visible) {\n      this.setState({\n        modalVisibility: true,\n        dialogVisibility: true\n      });\n    } else if (visible && !nexVisible) {\n      this.hideDialogView();\n    }\n  }\n\n  onOrientationChange = () => {\n    const orientationKey = Constants.orientation;\n\n    if (this.state.orientationKey !== orientationKey) {\n      this.setState({\n        orientationKey\n      });\n    }\n  };\n\n  setAlignment() {\n    const {\n      alignments\n    } = this.state;\n\n    if (_.isEmpty(alignments)) {\n      this.styles.alignments = this.styles.centerContent;\n    } else {\n      this.styles.alignments = alignments;\n    }\n  } // TODO: revert adding this workaround once RN fixes https://github.com/facebook/react-native/issues/29455\n\n\n  onFadeDone = () => {\n    if (!this.state.modalVisibility) {\n      setTimeout(() => {\n        // unfortunately this is needed if a modal needs to open on iOS\n        _.invoke(this.props, 'onDialogDismissed', this.props);\n\n        _.invoke(this.props, 'onModalDismissed', this.props);\n      }, 100);\n    }\n  };\n  _onDismiss = () => {\n    this.setState({\n      modalVisibility: false,\n      fadeOut: false\n    }, () => {\n      const props = this.props;\n\n      if (props.visible) {\n        _.invoke(props, 'onDismiss', props);\n      } // Parity with iOS Modal's onDismiss\n\n\n      if (Constants.isAndroid) {\n        _.invoke(props, 'onDialogDismissed', props);\n      }\n    });\n  };\n  onDismiss = () => {\n    const fadeOut = Constants.isIOS && this.props.visible;\n\n    if (fadeOut) {\n      this.setState({\n        fadeOut\n      }, this._onDismiss);\n    } else {\n      this._onDismiss();\n    }\n  };\n  onModalDismissed = () => {\n    _.invoke(this.props, 'onDialogDismissed', this.props);\n\n    _.invoke(this.props, 'onModalDismissed', this.props);\n  };\n  hideDialogView = () => {\n    this.setState({\n      dialogVisibility: false\n    });\n  };\n  renderPannableHeader = directions => {\n    const {\n      renderPannableHeader,\n      pannableHeaderProps\n    } = this.props;\n\n    if (renderPannableHeader) {\n      return <PanListenerView directions={directions}>{renderPannableHeader(pannableHeaderProps)}</PanListenerView>;\n    }\n  };\n  getContainerType = () => {\n    const {\n      panDirection,\n      renderPannableHeader\n    } = this.props;\n\n    if (!panDirection || renderPannableHeader) {\n      return View;\n    }\n\n    return PanListenerView;\n  };\n  renderDialogView = () => {\n    const {\n      children,\n      panDirection = PanningProvider.Directions.DOWN,\n      containerStyle,\n      testID\n    } = this.props;\n    const {\n      dialogVisibility\n    } = this.state;\n    const Container = this.getContainerType();\n    return <View testID={testID} style={[this.styles.dialogViewSize]} pointerEvents=\"box-none\">\n        <PanningProvider>\n          <DialogDismissibleView direction={panDirection} visible={dialogVisibility} onDismiss={this.onDismiss} containerStyle={this.styles.flexType} style={this.styles.flexType}>\n            <Container directions={[panDirection]} style={[this.styles.overflow, this.styles.flexType, containerStyle]}>\n              {this.renderPannableHeader([panDirection])}\n              {children}\n            </Container>\n          </DialogDismissibleView>\n        </PanningProvider>\n      </View>;\n  }; // TODO: renderOverlay {_.invoke(this.props, 'renderOverlay')}\n\n  renderDialogContainer = () => {\n    const {\n      modalVisibility,\n      dialogVisibility,\n      fadeOut\n    } = this.state;\n    const {\n      useSafeArea,\n      bottom,\n      overlayBackgroundColor,\n      testID\n    } = this.props;\n    const addBottomSafeArea = Constants.isIphoneX && useSafeArea && bottom;\n    const bottomInsets = Constants.getSafeAreaInsets().bottom - 8; // TODO: should this be here or in the input style?\n\n    const onFadeDone = Constants.isIOS ? this.onFadeDone : undefined;\n    return <View useSafeArea={useSafeArea} style={[this.styles.centerHorizontal, this.styles.alignments, this.styles.container]} pointerEvents=\"box-none\">\n        <OverlayFadingBackground testID={`${testID}.overlayFadingBackground`} modalVisibility={modalVisibility} dialogVisibility={dialogVisibility} overlayBackgroundColor={overlayBackgroundColor} onFadeDone={onFadeDone} fadeOut={fadeOut} />\n        {this.renderDialogView()}\n        {addBottomSafeArea && <View style={{\n        marginTop: bottomInsets\n      }} />}\n      </View>;\n  };\n  render = () => {\n    const {\n      orientationKey,\n      modalVisibility\n    } = this.state;\n    const {\n      testID,\n      supportedOrientations,\n      accessibilityLabel,\n      ignoreBackgroundPress\n    } = this.props;\n    const onBackgroundPress = !ignoreBackgroundPress ? this.hideDialogView : undefined;\n    return <Modal key={orientationKey} testID={`${testID}.modal`} transparent visible={modalVisibility} animationType={'none'} onBackgroundPress={onBackgroundPress} onRequestClose={onBackgroundPress} // onDismiss={this.onModalDismissed}\n    supportedOrientations={supportedOrientations} accessibilityLabel={accessibilityLabel}>\n        {this.renderDialogContainer()}\n      </Modal>;\n  };\n}\n\nfunction createStyles(props) {\n  const {\n    width = '90%',\n    height\n  } = props;\n  const flexType = height ? {\n    flex: 1\n  } : {\n    flex: 0\n  };\n  return StyleSheet.create({\n    dialogViewSize: {\n      width,\n      height\n    },\n    flexType,\n    container: {\n      flex: 1\n    },\n    centerHorizontal: {\n      alignItems: 'center'\n    },\n    centerContent: {\n      justifyContent: 'center'\n    },\n    overflow: {\n      overflow: 'hidden'\n    }\n  });\n}\n\nexport default asBaseComponent(Dialog);"]},"metadata":{},"sourceType":"module"}